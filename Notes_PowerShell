#!/bin/py

# Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
# Book2: Sams Teach Yourself ASP.NET Core in 24 hours - Jeffrey Fritz 2018 
# Book3: Learn PowerShell Scripting - in a month of lunches 2018
# Book4: Windows PowerShell In Action - Manning Books Characters 2018
# Book5: Windows PowerShell 3.0 Step By Step 2013
# Book6: Automating Active Directory Administration with Windows PowerShell 2.0 (2011)
# Book 0: Dependency Injection in .NET - Mark Seemann 2012 


==========================================TOC==============================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015

Part 1 Introducing Windows PowerShell
Chapter 1 Getting to Know Windows PowerShell
Chapter 2 Installing and Configuring Windows PowerShell
Chapter 3 Mastering the Windows PowerShell Help System                      Help System 
Chapter 4 Finding and Discovering Windows PowerShell Commands               Cmdlet Discovery 

Part 2 Understanding Objects and the Pipeline                               
Chapter 5 Thinking in Terms of Objects                                      Pipeline-Objects
Chapter 6 Mastering the Windows PowerShell Pipeline                         Pipeline 
Chapter 7 Sorting, Filtering, and Measuring Windows PowerShell Output       

Part 3 Extending the Reach of Windows PowerShell
Chapter 8 Managing Windows PowerShell Providers
Chapter 9 Formatting, Exporting, and Converting Windows PowerShell Output

Part 4 Managing Computers Remotely with Windows PowerShell
Chapter 10 Implementing One-to-One Windows PowerShell Remoting
Chapter 11 Implementing One-to-Many Windows PowerShell Remoting
Chapter 12 Deploying Windows PowerShell Web Access

Part 5 Putting Windows PowerShell to Work
Chapter 13 Multitasking Windows PowerShell
Chapter 14 Harnessing Windows PowerShell Workflow
Chapter 15 Introducing WMI and CIM 
Chapter 16 Searching and Filtering with Regular Expressions

Part 6 Enterprise-Class Windows PowerShell
Chapter 17 Managing Software with Windows PowerShell OneGet
Chapter 18 Desired State Configuration (DSC) Basics

Part 7 Scripting with Windows PowerShell
Chapter 19 Introduction to Windows PowerShell Scripting
Chapter 20 Making PowerShell Code Portable with Modules

Part 8 Administering Microsoft Enterprise Servers with Windows PowerShell
Chapter 21 Managing Active Directory with Windows PowerShell
Chapter 22 Managing SQL Server with Windows PowerShell
Chapter 23 Managing SharePoint Server with Windows PowerShell
Chapter 24 Managing Microsoft Azure with Windows PowerShell
===========================================================================================




==========================================TOC Details======================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015

Part 1 Introducing Windows PowerShell

Chapter 1 Getting to Know Windows PowerShell
        Why You Shoud Learn Windows PowerShell
        Brief History of Windows PowerShell
        Understanding the Windows PowerShell Components
        Investigating the Power and Simplicity of Windows PowerShell
        Summary Q&A Workshop


Chapter 2 Installing and Configuring Windows PowerShell
        Determining Your Windows PowerShell Environment
        Installing the Latest Version of Windows PowerShell
        Customizing the Windows PowerShell Console
        Customizing the Windows PowerShell ISE
        Summary Q&A Workshop
        

Chapter 3 Mastering the Windows PowerShell Help System
        Anatomy of a Windows PowerShell Cmdlet
        Updating the Windows PowerShell Help Library
        Understanding Windows PowerShell Help Syntax
        Accessing Additional Command Help
        Summary Q&A Workshop


Chapter 4 Finding and Discovering Windows PowerShell Commands
        How Windows PowerShell Commands Are Packaged
        Installing RSAT Tools on Windows 8.1
        Locating Windows PowerShell Commands
        Running External Commands
        Summary Q&A Workshop


Part 2 Understanding Objects and the Pipeline

Chapter 5 Thinking in Terms of Objects
        The Problem with Unix/Linux
        What Is An Object?
        Discovering Object Members
        Putting Objects into Action
        Summary Q&A Workshop


Chapter 6 Mastering the Windows PowerShell Pipeline
        Understanding How the Pipeline Works from a High Level
        Understanding in Depth How the Pipeline Works
        Passing Data Through the Pipeline
        "Forcing" Objects Through the Pipeline
        Summary Q&A Workshop


Chapter 7 Sorting, Filtering, and Measuring Windows PowerShell Output
        Sorting Output
        Filtering Output
        Measuring Objects
        Summary Q&A Workshop


Part 3 Extending the Reach of Windows PowerShell

Chapter 8 Managing Windows PowerShell Providers
        What Are Providers?
        Introduction to Default PSDrives
        Using the FileSystem Provider
        Using the Alias Provider
        Using the Registry Provider
        Using Extended Providers
        Summary Q&A Workshop


Chapter 9 Formatting, Exporting, and Converting Windows PowerShell Output
        How the PowerShell Formatting Subsystem Works
        Formatting PowerShell Output
        Exporting PowerShell Output
        Converting PowerShell Output
        Summary Q&A Workshop


Part 4 Managing Computers Remotely with Windows PowerShell

Chapter 10 Implementing One-to-One Windows PowerShell Remoting
        Understanding Classic Windows PowerShell Remote Access
        Introducing "True" PowerShell Remoting
        Enabling Windows PowerShell Remoting
        Creating a Windows PowerShell Remote Session
        Sending Scripts over the Network
        Summary Q&A Workshop


Chapter 11 Implementing One-to-Many Windows PowerShell Remoting
        One-to-Many Remote Access in the Classic Scenario
        One-to-Many Remoting with Persistent Sessions 
        Managing Session Configurations
        One-to-Many Remoting with the Windows PowerShell ISE
        Passing Input to Remote Commands 
        Summary Q&A Workshop


Chapter 12 Deploying Windows PowerShell Web Access
        Introducing Windows PowerShell Web Access
        Setting Up the Windows PSWA Gateway
        Testing the Windows PSWA User Experience
        Managing the Gateway
        Summary Q&A Workshop
    

Part 5 Putting Windows PowerShell to Work

Chapter 13 Multitasking Windows PowerShell
        Investigating the PowerShell Job Architecture
        Controlling Job Behavior
        Understanding Parent and Child Jobs
        Introducing the -AsJob Parameter
        Scheduling Jobs
        Reviewing What We Have Learned
        Summary Q&A Workshop


Chapter 14 Harnessing Windows PowerShell Workflow
        Understanding How Windows PowerShell Workflow Works
        Writing Your First Windows PowerShell Workflow 
        Running a Workflow as a Job
        Understanding Workflow Activities
        Tying Everything Together
        Summary Q&A Workshop


Chapter 15 Introducing WMI and CIM 
        Defining WMI and CIM 
        Getting Comfortable with WMI 
        Using Windows PowerShell WMI Commands
        Using Windows PowerShell CIM Commands
        Summary Q&A Workshop


Chapter 16 Searching and Filtering with Regular Expressions
        Revisiting the Wildcard Operators 
        Understanding Regular Expressions
        Using the -Match Parameter
        Using Select-String 
        Using the RegEx Type Accelerator
        Summary Q&A Workshop


Part 6 Enterprise-Class Windows PowerShell

Chapter 17 Managing Software with Windows PowerShell OneGet
        Understanding IT-Related Technology
        Preparing Your Environment
        Browsing Package Repositories
        Installing Software from the Command Line 
        Managing Providers and Packages 
        Hosting a Private OneGet Repository
        Summary Q&A Workshop

Chapter 18 Desired State Configuration (DSC) Basics
        Historical Background of DSC
        Basic Tenets of DSC 
        DSC Authoring Environment
        Configuring the DSC Environment
        Writing Your First Configuration Script
        A Word on DSC Push Configuration
        Summary Q&A Workshop


Part 7 Scripting with Windows PowerShell

Chapter 19 Introduction to Windows PowerShell Scripting
        Managing Execution Policy
        Writing Our First Script: The User Profile
        Writing a PowerShell Function
        Adding Programming Logic
        Running Scripts
        Pointers to Master PowerShell Scripting
        Summary Q&A Workshop


Chapter 20 Making PowerShell Code Portable with Modules
        Understanding Snap-Ins 
        Introducing PowerShell Modules
        Creating Your First PowerShell Script Module 
        Using Module Manifests
        Adding Comment-Based Help
        Finding Modules Easily
        Summary Q&A Workshop


Part 8 Administering Microsoft Enterprise Servers with Windows PowerShell
        
Chapter 21 Managing Active Directory with Windows PowerShell
        Installing Active Directory
        Creating Common Active Directory Objects
        Understanding Various AD Administrative Tasks
        Summary Q&A Workshop


Chapter 22 Managing SQL Server with Windows PowerShell
        Running PowerShell Using SQL Server Tools 
        Interacting with SQL Server Using PowerShell
        Automating Common SQL Server DBA Tasks 
        Summary Q&A Workshop


Chapter 23 Managing SharePoint Server with Windows PowerShell
        Understanding the Environment
        Deploying a Service Application
        Deploying a Web Application
        Deploying a Site Collection 
        Setting Permissions on a Site Collection
        Reporting on a SharePoint Farm 
        Summary Q&A Workshop


Chapter 24 Managing Microsoft Azure with Windows PowerShell
        Defining Microsoft Azure 
        Preparing Your Azure-PowerShell Environment
        Working with Azure Virtual Machines 
        Managing Office 365 and SharePoint Online with Azure
        Summary Q&A Workshop 
===========================================================================================


===================ATUL NOTES - Code Only

PS> Get-Alias
PS> Get-Help about_* 
PS> Get-Help about_pipelines
PS> Get-Help about_parameters 
PS> Get-Help about_objects

PS> Help Get-Content                # same text on screen
PS> Get-Help Get-Content            # same text on screen
PS> Get-Help Get-Content -Online    # same online

PS> Get-Help Start-Job -Parameter * | Select-Object -Property Name                                  <<<<<<ATUL<<<<<<<<
PS> Get-Command *scheduled*
PS> Get-Command *scheduledjobs*
PS> Get-Command *scheduledTask*
PS> Get-Command *Info*

PS> Get-Service | Get-Member
PS> get-command -Noun *process*

PS> Get-Command | Where-Object {$_.name -like "*clear*"}
PS> Get-Command | Where-Object {$_.name -like "*Trusted*"}      # search Name for "Trusted"
PS> Get-Command | Where-Object {$_.source -like "*Trusted*"}    # search Sources for "Trusted"

PS> Get-Help Get-Process -Online        # use any Reference Terms
                        Reference Terms 
                                            """
                                            CimCmdlets
                                            ISE 
                                            Microsoft.PowerShell.Archive 
                                            Microsoft.PowerShell.Core 
                                            Microsoft.PowerShell.Diagnostics
                                            Microsoft.PowerShell.Host
                                            Microsoft.PowerShell.Management
                                            Microsoft.PowerShell.ODataUtils 
                                            Microsoft.PowerShell.Security
                                            Microsoft.PowerShell.Utility
                                            Microsoft.WsMan.Management
                                            PackageManagement
                                            PowerShellGet
                                            PSDesiredStateConfiguration
                                            PSDiagnostics
                                            PSReadline 
                                            PSScheduledJob 
                                            PSWorkflow 
                                            PSWorkflowUtility

                                            """

                        Microsoft.PowerShell.Management

                                            """
                                            Add-Computer                Invoke-Item                         Set-Item 
                                            Add-Content                 Invoke-WmiMethod                    Set-ItemProperty
                                            Checkpoint-Computer         Join-Path                           Set-Location
                                            Clear-Content               Limit-EventLog                      Set-Service
                                            Clear-EventLog              Move-Item                           Set-WmiInstance
                                            Clear-Item                  Move-ItemProperty                   Show-ControlPanelItem
                                            Clear-ItemProperty          New-EventLog                        Show-EventLog
                                            Clear-RecycleBin            New-Item                            Split-Path  
                                            Complete-Transaction        New-ItemProperty                    Start-Process
                                            Convert-Path                New-PSDrive                         Start-Service
                                            Copy-Item                   New-Service                         Start-Transaction
                                            Copy-ItemProperty           New-WebServiceProxy                 Stop-Computer
                                            Debug-Process               Pop-Location                        Stop-Process
                                            Disable-ComputerRestore     Push-Location                       Stop-Service
                                            Enable-ComputerRestore      Register-WmiEvent                   Suspend-Service
                                            Get-ChildItem               Remove-Computer                     Test-ComputerSecureChannel
                                            Get-Clipboard               Remove-EventLog                     Test-Connection
                                            Get-ComputerRestorePoint    Remove-Item                         Test-Path
                                            Get-Content                 Remove-ItemProperty                 Undo-Transaction
                                            Get-ControlPanelItem        Remove-PSDrive                      Use-Transaction
                                            Get-EventLog                Remove-WmiObject                    Wait-Process
                                            Get-HotFix                  Rename-Computer                     Write-EventLog
                                            Get-Item                    Rename-Item 
                                            Get-ItemProperty            Rename-ItemProperty
                                            Get-ItemPropertyValue       Reset-ComputerMachinePassword
                                            Get-Location                Resolve-Path
                                            """
                        Get-Member          
                                            """          
                                            Get-PSDrive                 Restart-Computer
                                            Get-PSProvider              Restart-Service
                                            Get-Process                 Restore-Computer
                                            Get-Service                 Resume-Service
                                            Get-Transaction             Set-Clipboard
                                            Get-WmiObject               Set-Content
                                            
                                            """


# ISE Administrator Hello World
# 1) save txt file or ps1 file
            # script for PS ISE:
            Write-Host { "Hi There Atul! Hello World." }

# 2) PS ISE write script and run script

            PS> C:\Users\Atul\Desktop\Untitled.ps1

            "Hi There Atul! Hello World."
# note PS is wd C:\windows\system32 but -Path to text file is C:\Users\Atul\Desktop\Untitled1.ps1

# 3) running from PS directly, then able to code without executing code

            PS> Get-Content -Path C:\Users\Atul\Desktop\Untitled1.ps1

            # displays all the code, including errors

# 4) running from PS ISE directly, then F5 will execute code, causing error message b/c of coding errors.s






==========================================TOC Details - NOTES==============================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015

Part 1 Introducing Windows PowerShell

===========================================================================================
Chapter 1 Getting to Know Windows PowerShell

--------Why You Shoud Learn Windows PowerShell
--------Brief History of Windows PowerShell


# WSH = Windows Script Host
# VBScript = Visual Basic Scripting Edition --> too many security vulnerabilities and exploits.
# 1 line of PowerShell vs 30 lines of VBScript or 200 lines VBScript

# PowerShell = (1) management shell with automation aspects.
# task automation and configuration management framework consisting of CLI and associated
# scripting language built on the .NET framework.
# .NET framework = abstraction layer sitting between your applications and your operating system

# so software developers can tap into any aspect of the operating system hardware and software 
# that is exposed via the .NET framework.

# PowerShell cmdlets are actually compiled .NET classes.

--------Understanding the Windows PowerShell Components

# PowerShell console (powershell.exe)
    # CLI = command line interface is a REPL interface = thus 
    # (1) PowerShell runtime environment reads the code and makes sure your syntax is correct
    # (2) the runtime evaluates the code and determines most efficient and secure execution plan
    #     ie PowerShell is an interpreted scripting language in which PowerShell runtime parses
    #        your script code line by line.
    # (3) prints to standard output (ie screen) but can push output to anywhere.
    # (4) PowerShell loops back to user and waits for further instructions.

# PowerShell ISE (powershell_ise.exe)
# PowerShell host applications (first and third parties)

--------Investigating the Power and Simplicity of Windows PowerShell # building a Pipe Chain

> dir 
> powershell
> ise           # launches PowerShell ISE

# Running as standard user vs running as an Administrator
> PowerShell # run as Administrator 
# PS C:\WINDOWS\system32>
# C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# vs
> PowerShell # standard user
# PS C:\Users\Atul>

# keyboard
Windows R 
Run Dialog> cmd             # CLI
PS> powershell                # launches PowerShell within Terminal           # or > PowerShell.exe
PS> cmd                       # returns back to CLI
        C>  # this code gives us C prompt
        C> exit
        PS> # returns to PS prompt
PS> exit                      # to leave PowerShell and return to CLI

PS> Get-EventLog -list        # > Get-Eventlog -list
PS> Get-Eventlog -LogName Application -Newest 10
PS> Get-Eventlog -LogName Application -Newest 10 | Format-List

PS> PowerShell # run as Administrator 
# PS C:\WINDOWS\system32>

PS> Get-Eventlog -LogName Application -Newest 10 | Format-List | Out-File "C:\events20090209.txt"
PS> Notepad C:\events20090209.txt"
PS> exit

PS> dir
PS> Get-ChildItem         # alias for dir

keyboard
WINDOWS X 

# Takes bite out of using PowerShell
PS> Stop-Service Spooler -WhatIf          # Stop-Service cmdlet # used to parse your command, what would happen if you did this

PS> $host
PS> $Host         # Mac> who am I

--------Summary Q&A Workshop
# Workshop
# using Get-EventLog cmdlet, try to export a CSV file showing the most recent 35 entries from your 
# system's Security log using -WhatIf switch parameter to test your syntax in advance.


===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 2 Installing and Configuring Windows PowerShell

--------Determining Your Windows PowerShell Environment
# inventory your system
# install needed bits
---------------- Determining Your .NET Framework Version


# try to use Windows PowerShell Registry provider to list installed .NET Framework versions
# ATUL does not work
Get-Item -Path "HKLM\SOFTWARE\Microsoft\NET Framework\Setup\NDP\*"
# yields error

# to search online
download .NET Framework X  # replace X with the particular version you want

--------Installing the Latest Version of Windows PowerShell

# but note that Microsoft didnt make-back-compatability possible for all versions. Why? dont know.
# Study laptop runs
PS> cmd
PS> ver       # Microsoft Windows [Version 10.0.1/134.556]
# ATUL - notice that this gives Windows version, not PowerShell version


PS> PowerShell
PS> $PSVersionTable                 # main entry to find this
PS> $PSVersionTable.PSVersion       # also this works

# today PowerShell releases are independent Windows Management Framework (WMF)
# today, its difficult to troubleshoot broken functionality as a result of a Windows PowerShell version upgrade.

# next to tweak and tune for Administrative PowerShell

--------Customizing the Windows PowerShell Console

PS> Write-Host "Hello World"
PS> Get-Service | Where-Object {$_.Status -eq "Stopped"}
PS> $host.version


--------Customizing the Windows PowerShell ISE

PS> ise         # this should launch ISE

# if dont have ise
PS> Get-WindowsFeature -Name *ise*
PS> Install-WindowsFeature -Name PowerShell-ISE

# within ISE
Untitled1.ps1*>
Write-Host "Hello World, Atul!"
<f5>


clear
Write-Host "Hello World, Atul!"
$PSVersionTable

# can highlight code and right click to run selection

# ISE Tools for more customization

# This is a PowerShell comment.

        function MyFunction([Parameter(Position = 0)][System.String]$path)
        {
            :loopLabel foreach ($thisFile in (Get-ChildItem $path))
            {
                Write-Host ; Write-Host -Fore Yellow `
                    ('Length:' +
                    [System.Math]::Floor($thisFile.Length / 1000))
            }
        }

--------Summary Q&A Workshop

# change window title bar text 

PS> $host.UI.RawUI.WindowTitle="My OWN Windows NEAT PowerShell Console"
<f5>


PS> Write-Output "hi"      


===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 3 Mastering the Windows PowerShell Help System

--------Anatomy of a Windows PowerShell Cmdlet
# cmdlet = verb-prefixsingularnoun syntax

Cmdlets         # written in a compiled .NET programming language
Functions       # written natively in PowerShell
Workflows       # written natively in PowerShell, can survive restarts 
Configurations  # scripts that orchestrate Desired State Configuration (DSC) settings
Classes         # ability to create .NET classes , which are code blocks that provide a specific interface


# anatomy of Windows Powershell cmdlet


PS> Get-EventLog -LogName Application -ComputerName dc1, dc2, dc3, -Verbose 
     |    |          |          |                     |               |     
#   verb  noun    parameter   parameter             parameter       switch
#                 name        value                 vaule           parameter
#                             (single)              (multiple)

# all cmdlets take this approach:
 
        verb        noun  
         |            |
     ApprovedVerb-PrefixSingluarNoun

# why matters?
# 1) prefix uniquely serves to identify a command and mitigate potential name collisions
# 2) prefixes offer administrators better discovery of PowerShell commands
        >Get-Command -Noun AD*

        >Get-Verb | Sort-Object -Property Verb

        Verb        Group              Verb        Group       Verb        Group           Verb        Group 
        ----        -----              -----       -----       -----       -----           -----       -----
        Add         Common             Edit        Data        New         Common          Save        Data 
        Approve     Lifecycle          Enable      Lifecycle   Open        Common          Search      Common 
        Assert      Lifecycle          Enter       Common      Optimize    Common          Select      Common  
        Backup      Data               Exit        Common      Out         Data            Send        Communications
        Block       Security           Expand      Data        Ping        Diagnostic      Set         Common
        Checkpoint  Data               Export      Data        Pop         Common          Show        Common 
        Clear       Common             Find        Common      Protect     Security        Skip        Common 
        Close       Common             Format      Common      Publish     Data            Split       Common 
        Compare     Data               Get         Common      Push        Common          Start       Lifecycle
        Complete    Lifecycle          Grant       Security    Read        Communications  Step        Common 
        Compress    Data               Group       Data        Receive     Communications  Stop        Lifecycle
        Confirm     Lifecycle          Hide        Common      Redo        Common          Submit      Lifecycle
        Connect     Communications     Import      Data        Register    Lifecycle       Suspend     Lifecycle
        Convert     Data               Initialize  Data        Remove      Common          Switch      Common 
        ConvertFrom Data               Install     Lifecycle   Rename      Common          Sync        Data
        ConvertTo   Data               Invoke      Lifecycle   Repair      Diagnostic      Test        Diagnostic
        Copy        Common             Join        Common      Request     Lifecycle       Trace       Diagnostic
        Debug       Diagnostic         Limit       Data        Reset       Common          Unblock     Security
        Deny        Lifecycle          Lock        Common      Resize      Common          Undo        Security
        Disable     Lifecycle          Measure     Diagnostic  Resolve     Diagnostic      Undo        Common
        Disconnect  Communications     Merge       Data        Restart     Lifecycle       Uninstall   Lifecycle
        Dismount    Data               Mount       Data        Restore     Data            Unlock      Common
                                       Move        Common      Resume      Lifecycle       Unprotect   Security
                                                               Revoke      Security        Unpublish   Data 
                                                                                           Unregister  Lifecycle
                                                                                           Update      Data
                                                                                           Use         Other
                                                                                           Wait        Lifecycle
                                                                                           Watch       Common
                                                                                           Write       Communications
        # Groups = Common Lifecycle Data Security Communications Diagnostic
                    1      2         3    4         5             6

        # PowerShell will alert you if vendor makes mistake loading a module but with wrong approved verb
        # Technicolor did this. We will see when we cover PowerShell-based SQL Server administration


        Noun Behavior in Windows PowerShell

        # 1) Nouns are singular
                PS> Get-EventLog -List          # correct, gives list of all event logs
                PS> Get-EventLogs -List         # error message, so notice that nouns are singluer

        # 2) cmdlet nouns are named with a prefix which denotes the module 
                PS> Get-ADUser 
                PS> Get-ADComputer
                # AD here refers to Active Directory
                # in SharePoint Server 2013, Microsoft's enterprise content management platform, those cmdlets 
                # are all phrased with prefix SP

# ATUL posted here for review/summary
PS> Get-EventLog -LogName Application -ComputerName dc1, dc2, dc3, -Verbose 
     |    |          |          |                     |               |     
#   verb  noun    parameter   parameter             parameter       switch
#                 name        value                 vaule           parameter
#                             (single)              (multiple)

        Parameters 
        # 3) parameters will alter how the cmdlet behaves. Never use spaces. Always prefixed by the hyphen.
        # 4) each parameter has one or more values
                 -LogName       # accepts a single value
                 -ComputerName  # accepts one or more values
        # 5) do give a cmdlet multiple parameter values, then dont use spaces between value elements.
        # 6) swicth parameters function like on/off switches


                                    --- Code Sumary So Far ----
                                    # keyboard WINDOWS-R
                                    # powershell.exe            Regular
                                    PS C:\Users\Atul
                                    # C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe

                                    PS C:\WINDOWS\system32
                                    # C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe

                                    > clear
                                    > $host.UI.RawUI.WindowTitle="My Own Windows Title for PowerShell Console"
                                    > Write-Host "Hello World, Atul!"

                                    >$PSVersionTable


--------Updating the Windows PowerShell Help Library

PS> Get-Help cmdletname
   [Y] 

Name                                Category    Module  
----                                --------    ------
about_Parameters_Default_Values     HelpFile
about_Profiles                      HelpFile 



PS> help cmdletname
PS> man cmdletname


PS> Get-Help | more

PS> Get-Help -Name Get-Service
PS> Get-Help Get-Service
PS> Get-Help -Name Get-Process
PS> Get-Help Get-Process


# you need to update the files as they are constantly being updated
PS> Get-Help -Name Get-Service -Online  # launches webpage

PS> Get-Help -Name Get-Help         # launches text help full page listing
PS> Help Get-Help                   # launches text help page by page using spacebar key to scroll
PS> Get-Help -Name Get-Service -ShowWindow      # launches white help box (easy to read)

# Using help but what about Secure Servers that dont have internet access?
# Run PowerShell from your administrative workstation and not your servers.

# if you need an OffLine System, try this:
# 1) run Save-Help on an online-system
# 2) put the saved Windows PowerShell help files in a shared location or a USB thumb drive
# 3) on the offline system, run Update-Help with the -SourcePath parameter
PS> Save-Help -DestinationPath "c:\savedhelp"
# it them could become a bunch of Extensible Markup Language (XML) and Microsoft compressed Cabinet (.cab) archives.

# so then you go the offline system, and run Update-Help, but this time, specify the location of
# those previously saved help files:
PS> Update-Help -SourcePath \\server1\savedhelp



--------Understanding Windows PowerShell Help Syntax

# running Get-Help gives you the standard help output
# AUTHOR - try adding the Full parameter to retrieve the entire contents of the help file:

PS> Get-Help Get-EventLog -Full 

# this will give you the following parts
# Name of cmdlet
# Synopsis: one sentence of what cmdlet does
# Syntax: lists the parameter sets
# Aliases: lists any built-in aliases
# Description: more comprehensive description of cmdlet's functionality
# Parameters: listing of each parameter and relevant metadata
# Inputs
# Outputs
# Notes
# Examples also listed

# to short list only the examples as they are very useful
PS> Get-Help Get-EventLog -Example

----------------Defining Parameter Sets
# do not mix and match parameter sets from set 1 and from set 2. This will not work.

----------------More Information About Parameters 

# this is the best way to learn about it-> get the whole thing and read thru it. Use it.
PS> Get-Help -Full 

    # Metadata for each parameter
        Data Type # string, integer, etc
        Required # vs optional
        Position 
        Default Value 
        Accept Pipeline Input 
        Accept Wildcard Characters

# If you dont kwow the name, try using wildcards
PS> Get-Help *process*
PS> Get-Help *printer*
PS> Get-Help *help*
PS> Get-Help Get-*

PS> Get-[-LogName] <String>
PS> Get-EventLog <stringneeded>
PS> Get-EventLog Application

# TIP - use named parameters instead of position parameters
# when you explictily declare parameter names, you can put them in any order
PS> Get-EventLog -Newest 5 -LogName Security        # as a beginner, try this
PS> Get-EventLog Application -Newest 10             # you will be able to understand precisly why you need this info


----------------Try Yourself


PS> Get-Help process
PS> Help Get-Process        # spacebar for next page
PS> Get-Help Get-Process -#tab then keep pressing tab to cycle through the parameters. Very helpful.

PS> Get-Process -Name powershell -fileversioninfo

PS> Get-Process -Id # space then hit tab and it will cycle through the Id numbers for you.


--------Accessing Additional Command Help
----------------The "About" File Library

PS> Get-Help about_*
PS> Get-Help about_#try tabbing now, it works
PS> Get-Help about_Aliases
PS> Get-Help New-Alias

PS> Get-Help about_ | out-file file.txt | Notepad file.txt
PS> get-help about_ | out-file file.txt | notepad file.txt

---------------- The -ShowWindow Parameter 

# displays a separate window (white) easy to read, not cluttered, not crowding out your PowerShell display.
PS> Get-Help Stop-Service -ShowWindow

---------------- The Show-Command Cmdlet 

# displays a separate GUI window when using cmdlets
PS> Show-Command -Name Get-EventLog

# parameter sets are tabs
# required parameters are marked with asterisk
# common parameter can be added to any cmdlet and used for debugging, code improvement, and risk mitigation.
# run button
# copy button for clipboard use

----------------Try Yourself
# hypo: create a new alias in Windows Powershell such that typing np will start Windows Notepad

PS> Get-Help *alias*                    # use the New-Alias cmdlet. Give listing of *alias*
PS> Get-Help about-Aliases -ShowWindow  # creates separate help window for conceptual help
# now need syntax help
PS> Get-Help New-Alias -ShowWindow      # look for required parameters
# now craft the command by pop-up command window
PS> Show-Command New-Alias
# now complete the GUI and run
PS> New-Alias -Name np -Value C:\\Windows\System32\Notepad.exe
PS> np 
# it works!

# note that np custom alias will disappear from PowerShell when you close this session.
# later we learn how to make the custom alias persistent

--------Summary Q&A Workshop

PS> Get-Service | ConvertTo-HTML | Out-File -FilePath "getservice.html"
# you should get getservice.html web page in your current working directory. Open the file 

# more about Common Parameters
PS> Help about_CommonParameters -ShowWindow

# AUTHOR once you reach the point of writing your own Windows PowerShell scripts and modules
# then you will want to take advantage of the common parameters to give your users a better
# experience with your code.

PS> (Get-Command Help) .Definition      # does not work

PS> Get-Help @ PSBoundParameters | more

--------Summary Q&A Workshop
Workshop
# to download Windows PowerShell help files form a network share location
PS> Save-Help # to download the Windows PowerShell help file from the internet, then put those files on a network share.
# Then run
PS> Update-Help #specifying the SourcePath parameter to download the offline help files to the local system


# Linux systems administrator should try man command b/c this an alias for Get-Help
# remember that Windows team tried to make Windows PowerShell and Unix and Linux as shell- and 
# environment-agnostic as possible.

# Parameters sets must be applied if a single paramater set is required.
# If multiple sets are offered, then its your choice.


===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 4 Finding and Discovering Windows PowerShell Commands

--------How Windows PowerShell Commands Are Packaged
# modules replaced snap-in but many features were orginally written as snap-ins


# 1) by snapin = is compiled dynamic link library (DLL) that contains PowerShell commands.
#    potential problem = they must be registered on a system before use
#    the implement cmdlets and PowerShell providers.
#    b/c snapins represent compiled code, they run faster 

# 2) by module = plain text files

# to see what snapins are registered on your system, run
PS> Get-PPSnapins -Registered

        Name        : WDeploySnapin3.0
        PSVersion   : 2.0
        Description : This is a PowerShell snap-in that contains cmdlets for managing Microsoft Web Deployment infrastructure.


# to see snapins on your system (not registered)
PS> Get-PSSnapin

        Name        : Microsoft.PowerShell.Core
        PSVersion   : 5.1.17134.407
        Description : This Windows PowerShell snap-in contains cmdlets used to manage components of Windows PowerShell.


# could remove by
PS> Remove-PPSnapin
# each Windows PowerShell console session is an island

----------------Understanding Modules
# modules is the preferred way to package cmdles and providers.
# this book is IT pro, not developer centric thus no need to dive into module details.
# do not need to register DLLs
# just need to drag and drop modules to start using them

PS> Get-Module -ListAvailable
                            
                            # longer list is available, but too long to include here

                            ModuleType Version    Name                                ExportedCommands
                            ---------- -------    ----                                ----------------
                            Script     1.0.1      Microsoft.PowerShell.Operation.V... {Get-OperationValidation, Invoke-OperationValidation}
                            Binary     1.0.0.1    PackageManagement                   {Find-Package, Get-Package, Get-PackageProvider, Get-Packag...
                            Binary     1.0.0.0    PackageManagement                   {Find-Package, Get-Package, Get-PackageProvider, Get-Packag...
                            Script     3.4.0      Pester                              {Describe, Context, It, Should...}
                            Script     1.0.0.1    PowerShellGet                       {Install-Module, Find-Module, Save-Module, Update-Module...}
                            Script     1.2        PSReadline                          {Get-PSReadlineKeyHandler, Set-PSReadlineKeyHandler, Remove...


                            ModuleType Version    Name                                ExportedCommands
                            ---------- -------    ----                                ----------------
                            Manifest   1.0.0.0    AppBackgroundTask                   {Disable-AppBackgroundTaskDiagnosticLog, Enable-AppBackgrou...
                            Manifest   2.0.0.0    Appx                                {Add-AppxPackage, Get-AppxPackage, Get-AppxPackageManifest,...
                            Manifest   1.0.0.0    BitLocker                           {Unlock-BitLocker, Suspend-BitLocker, Resume-BitLocker, Rem...
                            Manifest   2.0.0.0    BitsTransfer                        {Add-BitsFile, Complete-BitsTransfer, Get-BitsTransfer, Rem...
                            Manifest   1.0.0.0    CimCmdlets                          {Get-CimAssociatedInstance, Get-CimClass, Get-CimInstance, ...
                            Manifest   1.0        Defender                            {Get-MpPreference, Set-MpPreference, Add-MpPreference, Remo...
                            Manifest   1.0.0.0    DeliveryOptimization                {Get-DeliveryOptimizationStatus, Get-DeliveryOptimizationPe...
                            Manifest   1.0.0.0    DirectAccessClientComponents        {Disable-DAManualEntryPointSelection, Enable-DAManualEntryP...
                            Script     3.0        Dism                                {Add-AppxProvisionedPackage, Add-WindowsDriver, Add-Windows...
                            Manifest   1.0.0.0    DnsClient                           {Resolve-DnsName, Clear-DnsClientCache, Get-DnsClient, Get-...

----------------Where Does Windows PowerShell Find Modules?

# environment variable named $PSModulePath stores the default search locations for modules.
PS> $env:PSModulePath 
# gives paths
# as long as your module exists in one of those directory paths, you will have seemless access
# to that functionality

# as you add more roles, features, additional software, then you will add more modules
# for example
# promoting a Windows Server computer to an Active Directory Domain Services (AS DS) domain controller
# will give you the ActiveDirectory module.

---------------- Working with Windows PowerShell Modules 
# how to tap into modules already on your system?
# prior to Windows PowerShell v3, you had to manually import a module before its functionality was available
# example
# if you wanted to install a server role on a Windows Server 2008 R2 domain controller.
# then after starting PS console, you would need to load the Server Manager module:
PS> Import-Module -Name ServerManager
# (ATUL!!!!!)
# but how did you know that the Server Manager was ServerManager and not something else?
# for now, just assume that if runing v3 or later, modules are automatically loaded whenever you
# reference a command contained in that module, and further assume then that the module would have been
# stored in a PSModulePath location --> called module autoloading

# to test out module autoloading, first verify that we dont have the Server Manager module loaded
# into our session:
PS> Get-Module 
# then we need to find the command to install a new Windows feature by invoking Get-Help or Get-Command
PS> Get-Help -Name *feature*
PS> Get-Command -Name *feature*

# we need to install        InstallWindowsFeature
# so we do this

PS> Get-Help InstallWindowsFeature -ShowWindow 
# then if you try another run of Get-Module, that Server Module has been now loaded into your session.
# Now you have full access to all the commands for that module.
# so AutoLoading does this:
# start not knowing what to install
# retrieve help generally
# retrieve help specifically
# that particular module is automatically loaded in the session.

# Pipe the commands results?
PS> Get-Module -Name ServerManager | Measure-Object
# Note "Measure-Object" is an excellent tool to know about
# Measure-Object is used for counts, sums, mins, maxs, etc.

PS> Get-Help -Name ActiveDirectory  
PS> Get-Help -Name ActiveDirectory  | Measure-Object

# add multiple comamnds --> use a continuation character

PS> Get-Module -ListAvailable | Import-Module ; Get-Command -CommandType cmdlet | Measure-Object

# there are too many commands to remember so just use this approach to search.

--------Installing RSAT Tools on Windows 8.1

# most of your work should not be done directly on your servers, but instead do it on
# your administrative workstation. By leveraging the Remote Server Adminstration Tools (RSAT) and 
# Windows PowerShell remoting, you can do most or all of your work directly from your
# domain-joined workstation.
# RSAT gives us
# 1) GUI admin tools
# 2) PowerShell modules needed to work with Windows Server roles and features.
# thus you need RSAT in order to access these server modules.

----------------What Is the RSAT?
# an optional download for Windows client operating systems that gies you GUI management and associated
# Windows PowerShell modules for Windows Server roles and services.
# But there are several RSAT packages. 

# plug for PowerShell remoting. By using remoting, you can connect directly with your servers and run 
# commands remotely on those boxes, obviating the need of the RSAT toolkit.

# can not install RSAT on Windows running Home or Standard editions. You must have Professional or
# Enterprise editions of Windows.

# if you did have it
# 1) search for download RSAT
# 2) download by selecting either the 64-bit or 32-bit .msu Microsoft Update standalone installation package.
# 3) Next
# 4) after reboot, loging with admin privileges
# 5) Open Windows Feature - control panel
# 6) open PowerShell and run PS> get-Module -ListAvailable
# 7) note that Windows Server 2012 R2 might be remote enabled by default. If so, then then run
#    the following command to enumerate all Active Directory user accounts on your domain controllers
#    Get-ADUser -Filter *


--------Locating Windows PowerShell Commands

# how to discover cmdlets that we need to accomplish our Windows system administrative tasks.

----------------Verb and Nouns Revisted

# recall standard syntax is ApprovedVerb-PrefixSingularNoun
# retrieve a list of approved verbs by running
PS> Get-Verb | Sort-Object Verb 

        >Get-Verb | Sort-Object -Property Verb

        Verb        Group              Verb        Group       Verb        Group           Verb        Group 
        ----        -----              -----       -----       -----       -----           -----       -----
        Add         Common             Edit        Data        New         Common          Save        Data 
        Approve     Lifecycle          Enable      Lifecycle   Open        Common          Search      Common 
        Assert      Lifecycle          Enter       Common      Optimize    Common          Select      Common  
        Backup      Data               Exit        Common      Out         Data            Send        Communications
        Block       Security           Expand      Data        Ping        Diagnostic      Set         Common
        Checkpoint  Data               Export      Data        Pop         Common          Show        Common 
        Clear       Common             Find        Common      Protect     Security        Skip        Common 
        Close       Common             Format      Common      Publish     Data            Split       Common 
        Compare     Data               Get         Common      Push        Common          Start       Lifecycle
        Complete    Lifecycle          Grant       Security    Read        Communications  Step        Common 
        Compress    Data               Group       Data        Receive     Communications  Stop        Lifecycle
        Confirm     Lifecycle          Hide        Common      Redo        Common          Submit      Lifecycle
        Connect     Communications     Import      Data        Register    Lifecycle       Suspend     Lifecycle
        Convert     Data               Initialize  Data        Remove      Common          Switch      Common 
        ConvertFrom Data               Install     Lifecycle   Rename      Common          Sync        Data
        ConvertTo   Data               Invoke      Lifecycle   Repair      Diagnostic      Test        Diagnostic
        Copy        Common             Join        Common      Request     Lifecycle       Trace       Diagnostic
        Debug       Diagnostic         Limit       Data        Reset       Common          Unblock     Security
        Deny        Lifecycle          Lock        Common      Resize      Common          Undo        Security
        Disable     Lifecycle          Measure     Diagnostic  Resolve     Diagnostic      Undo        Common
        Disconnect  Communications     Merge       Data        Restart     Lifecycle       Uninstall   Lifecycle
        Dismount    Data               Mount       Data        Restore     Data            Unlock      Common
                                       Move        Common      Resume      Lifecycle       Unprotect   Security
                                                               Revoke      Security        Unpublish   Data 
                                                                                           Unregister  Lifecycle
                                                                                           Update      Data
                                                                                           Use         Other
                                                                                           Wait        Lifecycle
                                                                                           Watch       Common
                                                                                           Write       Communications
        # Groups = Common Lifecycle Data Security Communications Diagnostic
                    1      2         3    4         5             6



# Note 
# verb-noun format works better for IT administrators b/c systems administrators think of actions first
# noun-verb format works better for programmers b/c programmers think of objects first and methods afterward

----------------Getting Familiar with Get-Command 

# Get-Command can be referenced with alias gcm for Windows PowerShell command discovery
PS> Get-Command service     # error
PS> gcm *service*           # works!

PS> Get-Service *service*       # works
PS> Get-Service *registry*      # works

# now lets to invetigate a particular module for commands
PS> Get-Command -Module ActiveDirectory
PS> Get-Help Get-Command

# notice that Active Directory cmdlets all have a AD prefix. Why? two goals
# 1) to identify the parent module (in this case Active Directory)
# 2) to prevent name collisions (b/c New-User vs New-ADUser are different modules.)


PS> Get-Command -Noun AD* 
# gives long list. This will identify all the Active Directory cmdlets without having to know
# the name of the parent module.
# This is useful for longer, clunky names such as
Microsoft.SharePoint.PowerShell
# why useful? b/c all SharePoint commands have the prefix SP
PS> gcm -Noun SP*

# to get list of all Get commands that relate to Windows PowerShell?
PS> Get-Command -Verb Get* -Noun PS*



----------------Differentiating Get-Command and Get-Help

# Get-Help retrieves help articles for commands
# Get-Command retrieves the command themselves
# remember that Windows PowerShell works in a schema called the pipeline, and thus the
# results of a cmdlet execution are one or more objects, not simply blocks of text
# like we see in Unix/Linux
# ie PowerShell leads us to Objects not just text? Yup...
# AUTHOR
# Here is a general summary
# Get-Command gives metadata about a command
# Get-Help gives the help text file
# example

PS> Get-Command -Name Get-Process
PS> Get-Help -Name Get-Process


----------------Yourself - Discovering Windows PowerShell Commands

# 1) with commands deal with processes

PS> Get-Command *process*           # indicate which commands deal with processes
PS> Get-Command *storage*
PS> Get-Command *settings*
PS> Get-Command *tier*
PS> Get-Command *mitigation*
PS> Get-Command *clear*
PS> Get-Command *property*
PS> Get-Command *Net*
PS> Get-Command *network*
PS> Get-Command *set*
PS> Get-Command *broker*
PS> Get-Command *user*
PS> Get-Command *mgr*
PS> Get-Command *manager*
PS> Get-Command *alias*
PS> Get-Command *import*
# you can use any word for "discovery" or "command discovery"


# 2) NEXT 

PS> C:\WINDOWS/system32> cd alias:
PS> cd alias:                           # notice the jump to the directory. Jumped due to : use

# grab all alias then filters output to show all aliases that are mapped to "Get Process"

# what happened?
# 1) first command shifted our context to the Alias PSDrive which makes all available command aliases
#    available to us in the same manner that a file system makes directories and files available to us.
#    We will learn about PowerShell providers and PSDrives in the next hour.
# 2) this code uses Dir alias (which actually references Get-ChildItem), filters the output
#    to show all aliases that are mapped to Get-Process
#    Note that output shows a ps which is the same name in Unix/Linux.

# 3) see here
#    note -eq means =       this is how PowerShell represents equality

PS Alias> dir | Where-Object { $_.Definition -eq "Get-Process" }

        CommandType     Name                  Version    Source
        -----------     ----                  -------    ------
        Alias           gps -> Get-Process
        Alias           ps -> Get-Process

PS Alias> Get-Process
# gives output lot of info: Handles, NPM(K), PM(K), WS(K), VM(K), CPU(s), Id, SI, ProcessName
# Handles   = number of memory handles opened by the process
# NPM(K)    = amount of nonpaged memory given in kilobytes
# PM(K)     = amount of paged memory
# WS(K)     = the working set
# VM(K)     = amount of virtual memory used by the process
# CPU(s)    = amount of processor time consumed by the process
# Id        = process ID = PID
# ProcessName = name of the process

# 4) see here - (1) want list of all Get-Process running on the system
#               (2) organized by metric and filter out the first 10
#                   note that we are using terms ProcesName and property is CPU
#                   later in book learn how to use Get-Member
#               (3) wnat a descending sort on the CPU property

PS Alias> Get-Process | Select-Object ProcessName, CPU -First 10 | Sort-Object CPU -Descending

        ProcessName                    CPU
        -----------                    ---
        chrome                   461.15625
        chrome                   186.40625
        chrome                   88.109375
        chrome                   47.703125
        AppleMobileDeviceService    1.5625
        APSDaemon                  0.71875
        chrome                     0.59375
        chrome                         0.5
        ApplicationFrameHost      0.171875
        armsvc                    0.046875

PS Alias> Get-Help Get-Process -Examples 
PS Alias> Get-Help Select-Object -Examples 
PS Alias> Get-Help Sort-Object -Examples 

# 5) open Notepad
PS Alias> open Notepad
PS Alias> Notepad
PS Alias> notepad 
#    then look up process properties for Notepad
PS Alias> Get-Process -Name *notepad*

# 6) investigate data attributes (ie properties) of Windows PowerShell object
#    how? by piping the cmdlet into Get-Member
PS Alias> Get-Process -Name *notepad* | Get-Member | more       # ATUL does not work

# 7) carefully read the long list and look for kill
#    We can capture any Windows PowerShell object into a variable.
#    Variables are defined by using the dollar sign ($) and a unique name.
#    You can then use what programmers call dot notation to invoke the kill method

PS Alias> $np = Get-Process -Name Notepad 
PS Alias> $np.kill()

# for more info on how to capture any PowerShell object into a variable, see Chapter 5
# "Thinking in Terms of Objects"


PS Alias> dir | ? Definition -eq "Get-Process"
# here AUTHOR makes liberal use of aliases along with PSDrives to discover which aliases are mapped
# to a given command. Here the ? is an alias for Where-Object and -eq represents equality (=)

# ATUL how to find Windows PowerShell verion?

--------------------------------TIP
# Tab Completion

Get-<tab>                       # then Tab Completion gives many, many options for Get Commands
Get-Ev<tab>                     # try this
Get-EventLog -<tab>             # cycles thru Parameters 
Get-EventLog -LogName -<tab>    # cycles thru Parameter Values


--------Running External Commands

DOS> ver                # gives version info
PS> $host.version

# note that when Windows PowerShell was created, they also allowed for some cmd.exe code lines to 
# also work in PowerShell but with slightly different syntax
# replicating old school functionality

DOS> ping 
DOS> ipconfig 
DOS> tracert
DOS> help 
DOS> HELP 

PS> ping -a -n 2 executrain.com 
PS> ping -a -n 2 broadmeadow.needham.k12.ma.us
PS> netstat /?                  # displays protocol statistics and current TCP/IP network connections
PS> ipconfig /displaydns
PS> net use * \\server\share    # did not work
PS> Test-Connection #cmdlet that extends using ping's functionality.

Few Gotchas to Watchout For 
#1) External command in environment path
#2) Invoke-Item 
#3) Call Operator
#4) Stop Parsing Symbol


---------------- 1) External command in environment path
# as long as the external command you want to run exists in a directory that is part of
# your system's PATH environment variable, Windows PowerShell will execute the command
# as it were a Cmd.exe session

# you can check your PATH environment variable contents by querying the environment variable
# in PowerShell provider drive with this

PS> $env:path       # ATUL work
# This is the pathway used by Windows PowerShell when you run your favorite command-line tools
# the built-in programs all exist within system directories or directories already present in
# your search path.


# PS C:\WINDOWS\system32> $env:path
# C:\ProgramData\Oracle\Java\javapath;
# c:\Program Files (x86)\Intel\iCLS Client\;
# c:\Program Files\Intel\iCLS Client\;
# C:\WINDOWS\system32;
# C:\WINDOWS;
# C:\WINDOWS\System32\Wbem;
# C:\WINDOWS\System32\WindowsPowerShell\v1.0\;
# C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;
# C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;
# C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;
# C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;
# C:\Program Files\Intel\WiFi\bin\;
# C:\Program Files\Common Files\Intel\WirelessCommon\;
# C:\Program Files (x86)\Windows Live\Shared;
# C:\Program Files (x86)\Microsoft SDKs\TypeScript\1.0\;
# C:\Program Files (x86)\Common Files\MicroStrategy;
# C:\Program Files (x86)\MicroStrategy\Intelligence Server;
# C:\Program Files (x86)\Common Files\MicroStrategy\JRE\170_51\Win32\bin\client;
# C:\Program Files (x86)\QuickTime\QTSystem\;
# C:\WINDOWS\System32\OpenSSH\;
# C:\Program Files (x86)\HP\IdrsOCR_15.2.10.1114\;
# C:\Program Files\dotnet\;
# C:\Users\Atul\AppData\Local\Microsoft\WindowsApps


---------------- 2) Invoke-Item 
# we can use the Windows PowerShell cmdlet Invoke-Ite to run the default action on an external
# command or file. Example, lets say that we have an Abode Portable Document Format (PDF) file
# in my C:/pdfs directory that I want to open using Windows PowerShell
# b/c we have Adobe Reader installed on the system and that program is associated with PDF files,
# I can use the following Windows PowerShell statement to open the PDF directly

PS> Invoke-Item -Path "C:\pdfs\mypdfdocument.pdf"
# technically, we dont need to use "" b/c the directory path did not contain any spaces.
# however, just to be safe, use quotes as a habit.

---------------- 3) Call Operator = Invocation Operator (&)
# when we prefix an invocation to an external command with the ampersand (&), Windows PowerShell
# evaluates your statement as a comamnd instead of a .NET Framework object as usual.

# example
# if you were to try starting Internet Explorer from a Windows PowerShell console, this statement
# will generate an error
PS> iexplore  # error
PS> & "C:\Program Files\Internet Explorer\iexplore.exe"     # works

# you can even experiement with passing a single parameter to external commands this way
# example
# the following opens IE and loads google.com
PS> & "C:\Program Files|Internet Explorer\iexplore.exe" www.bing.com

# to start submitting multiple parameters to an external command, its get complicated quickly
# example
# suppose you want to start IE with extensions disabled and open the Google home page
# you then parameterize the parameters as follows:
PS> $ie = "C:\Program Files\Internet Explorer\iexplore.exe"
PS> $extoff = "-extoff"
PS> $url = "www.google.com"
# so now when you run the command with the invocation operator, you just plug in your variables:
& $ie $extoff $url

# now as it happens, you can pass multiple arguments to IE without having to do the parameterization.
# Nonetheless, its a good skill to have in your tool belt if and when you find yourself needing
# to launch a complex external command from Windows PowerShell.


---------------- 4) Stop Parsing Symbol  (--%)
# Windows PowerShell v3 introduced the stop parsing symbol which instructs PS parser to stop interpreting
# the following input as PowerShell code.
# example using icacls
PS> Help icacls             # parsing tool
# this is an old command line utility with which we can view and modify the discretionary access control
# list (DACLs) on folders and files.
# The following statement grants the user Chad Modify permissions on a folder named docs
# we also specify container inherit (OI) and object inherit (OI) parameters:
PS> icacls .\docs /grant Chad(CI)(OI)M
# TIP .\ means docs folder exists in my current working directory
# gives lots of blood on the screen (errors)
# PS got stuck on interpreting the CI and OI parameters, specifically the paraentheses
# so try this. Invoke the "stop parsing" command right before we issue our parameters
PS> icacls .\docs --% /grant Chad(CI)(OI)M
# success, the PS stops parsing at that character.

        PS C:\WINDOWS\system32> HELP icacls

        Name                              Category  Module                    Synopsis
        ----                              --------  ------                    --------
        about_Escape_Characters           HelpFile                            Introduces the escape character in Windows Pow...
        about_Parsing                     HelpFile                            Describes how Windows PowerShell parses commands.
        about_Parsing_LocTest             HelpFile                            Describes how Windows PowerShell parses commands.
        about_Special_Characters          HelpFile                            Describes the special characters that you can ...

# see the Help document on parsing to understand more
PS> Get-Help about_parsing -ShowWindow 

--------Summary Q&A Workshop
--------Summary
# how PS commands arrive at your system
# difference between snap-ins and modules
# how autoloading modules and how to reference them with individual commands
# how to set up PS GUI for administrative workstation work using RSAT tools (useful later for remoting)
# how to discover PS commands and run external commands 
# next what PS objects are and how the pipeline works

--------Q&A
# to see list of all available verb, which are most popular in Windows PowerShell
PS> Get-Command 
PS> Get-Command -CommandType cmdlet 
PS> Get-Command -CommandType cmdlet | Group-Object
PS> Get-Command -CommandType cmdlet | Group-Object -Property Verb
PS> Get-Command -CommandType cmdlet | Group-Object -Property Verb | Sort-Object
PS> Get-Command -CommandType cmdlet | Group-Object -Property Verb | Sort-Object -Property Count
PS> Get-Command -CommandType cmdlet | Group-Object -Property Verb | Sort-Object -Property Count -Descending 

# most used are Get (126), Set (55), New (42), Remove (33), Export (19), Add (18)


# Note in PS, we use Get-Command -module (with snap-ins as well)
# example
# to retrieve all commands resident in the SharPoint Server 2013 snap-in, we would use the following statement
PS> Get-Command -Module Microsoft.SharePoint.PowerShell

# to review your key strokes, can use Up Arrow, F7 (might work?), and Get-History
PS> Get-History


PS> Get-Member  # use this cmdlet to enumerate the attributes (properties) and actions (methods)
#  that associated with a given PS object


# Windows command prompt vs Windows PowerShell console are located in differnt Windows directories
# PowerShell.exe is located in the path C:\Windows\System32\WindowsPowerShell\v1.0
# Cmd.ext is located in the path        C:\Windows\System32
# ie DOS prompt and PowerShell prompt are two totally different programs

# TotalCount parameter of the Get-Command cmdlet retrieves a specified nubmer of commands
# example
# the following statement gives us 10 alias commands
PS> Get-Command -CommandType Alias -TotalCount 10


Part 2 Understanding Objects and the Pipeline

# everything in PS is an Object
# over the next 3 chapters
# - how data is output and processed in Unix/Linux operating system
# - classes, objects, properties, and methods
# - applying 1 and 2 knowledge to PS


===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 5 Thinking in Terms of Objects

--------The Problem with Unix/Linux
# PS team studied Unix and Unix-like (Linux) as they architected Windows PS
# goal to cherry pick, apply to PS and then tweak to make them even easier to use

# what can you do? get list of all running processes, filter the return list to show only processes
# that meet particular criteria, modify the filered list to show only particular data columns, then 
# send the messaged process list to yet another program.

# Linux is a file based operating system. This means all files are simply flat text files.
        # ie Linux is a text based approach.
# even hardware such as disk drives are represented as files in the file system.
# This means all the things we do (searching, filtering, sorting, etc) requires that we pipe
# the output of one Linux command into another command, and so on down the (pipe)line until we
# have the data we need.
# Big pain points = your feeding data into completely separate programs, each with its own
# syntax and behaviors.
# in Linux to do the above, you need to know: ps, grep, awk, sed
# vs PS
# Since PS treast all items as objects, each with its own data types, methods, and properties, 
# this gives us much more flexibility and control over the objects behavior and output (vs Linux).

--------What Is An Object?
# Windows PowerShell defines an object as a collection of data that represents an item.

PS> Get-Service

        PS C:\WINDOWS\system32> Get-Service

        Status   Name               DisplayName                           # <<< known as Properties
        ------   ----               -----------
        Stopped  015063155013271... McAfee Application Installer Clean    # <<< entire list is Collection  
        Running  AdobeARMservice    Adobe Acrobat Update Service          # <<< each row is an Object
        Stopped  AJRouter           AllJoyn Router Service                # <<< each row is an Object
        Stopped  ALG                Application Layer Gateway Service     # <<< each row is an Object  
        Stopped  AppIDSvc           Application Identity                  # <<< each row is an Object
        Running  Appinfo            Application Information               # <<< each row is an Object
        Running  Apple Mobile De... Apple Mobile Device Service           # <<< each row is an Object

# Propeties = define attributes and descriptive metadata about an object.
# Each row in the table represents an object.
# Entire list of services returned by the command Get-Service is known as a collection.

Class = Car 

(ATTRIBUTES)                                        (ACTIONS)

Properties = Name, Color, BodyStyle, HasAntenna     Methods = EngineOn, EngineOff, Accelerate, Brake, Steer 
    $y = New-Car                                    $g = New-Car
    $y.Color = Yellow                               $g.Color = Green 
    $y.BodyStyle = A                                $g.BodyStyle = B
    $y.HasAntenna = $false                          $y.HasAntenna = $true 
    $y.EngineOn()
    $y.Accelerate(10)
    $y.Brake()
    $y.EngineOff()

# PowerShell convention is variable begin with $
# Instantiate = use the template to create the car
# Code Reuse of classeses = Inheritance    
    # code reuse 1 = instantiate exact copy of parent class blueprint and then modify individual instances
    # code reuse 2 = instantiate exact copy of parent class blueprint then define new child subclass

$PS> Get-Service -Name alg      # Application Layer Gateway Service
#or
$PS> Get-Service -Name "Application Layer Gateway Service"
$PS> Get-Service -Name 'Application Layer Gateway Service'
# Get-Service always gives Name and DisplayName 

--------Discovering Object Members

$PS> Get-Service    # returns 3 columns
$PS> Get-Member     # returns a collection describing all of the metadata (properties, methods, and events)

# example
$PS> Get-Service -Name alg
$PS> Get-Service -Name alg | Get-Member     # returns metadata

----------------Data Type

PS C:\WINDOWS\system32> Get-Service -Name alg | Get-Member

                       TypeName: System.ServiceProcess.ServiceController

                    Name                      MemberType    Definition
                    ----                      ----------    ----------
                    Name                      AliasProperty Name = ServiceName
                    RequiredServices          AliasProperty RequiredServices = ServicesDependedOn
                    Disposed                  Event         System.EventHandler Disposed(System.Object, System.EventArgs)
                    Close                     Method        void Close()
                    Continue                  Method        void Continue()
                    CreateObjRef              Method        System.Runtime.Remoting.ObjRef CreateObjRef(type requestedType)
                    CanPauseAndContinue       Property      bool CanPauseAndContinue {get;}
                    CanShutdown               Property      bool CanShutdown {get;}
                    CanStop                   Property      bool CanStop {get;}
                    Status                    Property      System.ServiceProcess.ServiceControllerStatus Status {get;}
                    ToString                  ScriptMethod  System.Object ToString();

# .NET class = .NET data type = System.ServiceProcess.ServiceController
# use rightmost component of the data type when building PowerShell pipeline sequences.
# thus we can say
# Get-Service returns ServiceController objects
# MSDN = Microsoft Developer Network documentation library
# so summary for now: the data type references the parent class 
# parent class is what defines the members of a particular object


----------------Member Type
# in OOP, each object has two fundamental descriptors: properties and methods

# (1) Property explained
            PS> Get-Service

                    PS C:\WINDOWS\system32> Get-Service

                    Status   Name               DisplayName                           # <<< known as Properties
                    ------   ----               -----------
                    Stopped  ALG                Application Layer Gateway Service     # <<< each row is an Object  

            # notice in Get-Service there is a Status property which specifies running or stopped
            # some cmdlets also have special properties defined for them called AliasProperties
            # AliasProperty = shortcut to another property name
            # in the Get-Service membership, Name is an AliasProperty for that Service-Name property

                    PS C:\WINDOWS\system32> Get-Service
                                                                    # gives same info 
                    Status   Name               DisplayName
                    ------   ----               -----------
                    Running  WSearch            Windows Search

                    PS> Get-Service -Name wsearch                   # gives same info
                    PS> Get-Service -Name WSearch                   # gives same info
                    PS> Get-Service -ServiceName WSearch            # gives same info

            # here the official name Windows Search but PowerShell was able to reconcile the inconsistency
            # b/c the developers who created PowerShell thought about this.

ATUL

# (2) Methods explained
            # represent some action that the object can take
            # want to create a PS object on a non-critical component
            $PS> $spool = Get-Service -Spooler      # put Print Spooler object instance into a variable called spool
            $PS> $spool.Stop()                      # invoke the Stop method
            $PS> $spool                             # to check the service's run state, have PS tell us about
                                                    # the contents of our variable
                                                    # can use the Start() method to restart the service



# Windows PowerShell team used a .NET programming language to create the object classes that represent
# Windows services and processes. This allows the programmer to now choose which properties, methods, and
# events that they want to expose to the user.
# By learning .NET programming, you can extend built-in PowerShell object classes and even create your own.

# note that for the above spool example, we already have the Start-Service and Stop-Service cmdlets already.

ATUL - playing
                        PS> $PSVersionTable

                        Name                           Value
                        ----                           -----
                        PSVersion                      5.1.17134.590
                        PSEdition                      Desktop
                        PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
                        BuildVersion                   10.0.17134.590
                        CLRVersion                     4.0.30319.42000
                        WSManStackVersion              3.0
                        PSRemotingProtocolVersion      2.3
                        SerializationVersion           1.1.0.1

                        PS> $Atulspooltest = $PSVersionTable.CLRVersion         # create temp object
                        PS> $Atulspooltest                                      

                        Major  Minor  Build  Revision
                        -----  -----  -----  --------
                        4      0      30319  42000



----------------Getting to Know Get-Member

# you will use/know Get-Member so often that its best to use the alias

$PS> Get-Process | gm       # as you seek to discover what is possible with PS objects, you will find
                            # yourself "piping to gm" reflexively.
# be sure to check out the full help for Get-Member
$PS> Help Get-Member -ShowWindow

# scroll thru this until you get to -MemberType parameter
# ATUL need to remember how to list existing aliases in the system

# Get-Member Parameters --> -MemberType is helpful to investigate specific aspects of an object

PS> Get-Process | Get-Member -MemberType Properties
PS> Get-Process | gm -MemberType Properties
#                     ----------
#                           ^                        
#                      enumeration
# In an enumeration, the Microsoft .NET Framework development team predefines a list of valid values
# for that property, which we grab using PowerShell

                       AliasProperty 
                       NoteProperty
                       Property 
                       ScriptProperty

# can do same search for available methods
PS> Get-Process | Get-Member -MemberType Method

# remember that Methods define concrete actions that we can perform on an object.
# the most common way to work with objects is to "pack" them into a variable.
# So you can look at a variable as an in-memory placeholder for data (on which you can read from and write to).

--------Putting Objects into Action

# so above, we covered objects, properties, and methods.
# what can you do with them?
# as system administrators, we do practical things.
# as programmers, we can be more creative.

launch PowerShell ISE # launch as an Administrator from Start Menu
# make sure you temporarily relax your computer's script execution policy in the ISE before
# you begin your work.
Set-ExecutionPolicy -ExecutionPolicy Bypass 

# you can and should reset it to a more reasonable policy policy once your finished
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned

--------Summary Q&A Workshop

----------------Try It Yourself (Working with Objects and Members)
# launch PowerShell ISE
# launch Notepad as we want to test the processes running for Notepad
# in ISE 
Get-Process         <F8>        # runs the command within ISE

# now we need to pack Notepad into a variable
# ATUL ? what does this mean?
# ATUL - built-in alises exist. See list below. Notepad has no existing alias. So create an alias
# for Notepad and then place a generic Notepad instance inside the newly created alias called np.
PS> $np = Get-Process -Name notepad

# note 
# (1) that name is used a parameter. But Get-Process output uses ProcessName. Which is different
# as Name is not the same as ProcessName.
# how is this possible?
# Windows PowerShell team created a AliasProperty called Name, with the definition = ProcessName
# this allows us to substitute Name for ProcessName.
# (2) we created the $np variable. ISE uses 

# so first 
PS> Get-Process | Get-Member        # searches System.Diagnostics.Process

PS> $np | gm    # this works

                   TypeName: System.Diagnostics.Process

                Name                       MemberType     Definition
                ----                       ----------     ----------
                Handles                    AliasProperty  Handles = Handlecount
                Name                       AliasProperty  Name = ProcessName
                ProcessName                Property       string ProcessName {get;}

                                ========================================================================================
                                BACKGROUND INFO 

                                PS> Get-Help about_*

                                Name                              Category  Module                    Synopsis
                                ----                              --------  ------                    --------
                                about_ActivityCommonParameters    HelpFile                            Describes the parameters that Windows PowerShell
                                about_Aliases                     HelpFile                            Describes how to use alternate names for cmdlets and commands in Windows
                                about_Arithmetic_Operators        HelpFile                            Describes the operators that perform arithmetic in Windows PowerShell.
                                about_Arrays                      HelpFile                            Describes arrays, which are data structures designed to store
                                about_Assignment_Operators        HelpFile                            Describes how to use operators to assign values to variables.
                                about_Automatic_Variables         HelpFile                            Describes variables that store state information for Windows PowerShell.
                                about_Break                       HelpFile                            Describes a statement you can use to immediately exit Foreach, For, While,
                                about_Parallel                    HelpFile                            Describes the Parallel keyword, which runs the
                                about_Sequence                    HelpFile                            Describes the Sequence keyword, which runs selected
                                about_Suspend-Workflow            HelpFile                            Describes the Suspend-Workflow activity, which suspends
                                about_WorkflowCommonParameters    HelpFile                            This topic describes the parameters that are valid on all Windows
                                about_Workflows                   HelpFile                            Provides a brief introduction to the Windows



                                PS> Get-Alias           # list all built-in aliases

                                CommandType     Name                                               Version    Source
                                -----------     ----                                               -------    ------
                                Alias           % -> ForEach-Object
                                Alias           ? -> Where-Object
                                Alias           ac -> Add-Content
                                Alias           asnp -> Add-PSSnapin
                                Alias           sajb -> Start-Job
                                Alias           where -> Where-Object
                                Alias           wjb -> Wait-Job
                                Alias           write -> Write-Output

PS> $np.MainWindowTitle         # error b/c its read-only.
PS> $np.BasePriority            # nothing happened on screen. But if you run a MSDN or Google search on
                                # the parent class of the object, you will see the default of 8 as normal priority.
                                # And BasePriority of 4 is idle (low priority).
PS> $np.BasePriority = 4

launch Notepad                          # now the process is running
PS> $np = Get_Process -Name notepad     # assigns notepad process to variable $np
PS> $np.Kill()                          # now can kill notepad


----------------Q&A

# play with Get-...
PS> Get-Service             # lists all Services and metadata: Status, Name, DisplayName
PS> Get-Alias               # lists all Aliases
PS> Get-AppBackgroudTask    # lists all AppBackgroundTask
PS> Get-FileShare           # lists all ...  etc
# etc...


# play with Get-Service but change the default columns
PS> Get-Service | Select-Object                                             # columns are Status, Name, DisplayName
PS> Get-Service | Select-Object -Property Name, Status, RequiredServices    # gives new columns as listed

# SQL uses the Select-Object cmdlet. What is happening? we are taking the full service list and 
# running it through a filter in which we specify a comma-separate list of only those columns we 
# want to see in the output.

PS> Get-Service | Format-Table -AutoSize        # stretches each column to its full width across your screen

# Get-Service search yields Status, Name, and DisplayName
# then note DisplayName has its own members.
# DisplayName is an individual object member

PS> $s = Get-Service -Name wsearch          # how do you know this exists?
                                            # b/c you run a Get-Service search (see 4 comments above)
PS> $s.DisplayName 
            # returns Windows Search
PS> $s.DisplayName | Get-Member             # gives long list of System.String results showing
                                            # Name, MemberType, Definition
# AUTHOR
# what is happening here? the DisplayName property itself, is an instance of a .NET class (blueprint)
# called System.String


----------------Workshop

# method = is functionally programmed into an object that specifies what actions it can perform.
# event member = speifies what actions can happen to an object itself.
# property = describes the object

# Pin Down the Object = when doing some work on the object. Its temporary.
#                       First you pack the PowwerShell object into a variable. Then you Pin Down it.


===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 6 Mastering the Windows PowerShell Pipeline

--------Understanding How the Pipeline Works from a High Level

PS> Dir | more      # this gives some info but not sure what it means? ATUL?

# In Cmd.exe pipes, an output is fed from one command and into another command. But in Cmd.exe and Linux,
# the output and input is all FLAT TEXT. Thus you will need to understand text parsing and regular expressions.
# In PowerShell, the output is fed into input but all data in PowerShell are .NET objects, so each data element 
# contains a suite of properties, methods, and events. (See end of last chapter). This is the OBJECT based nature
# of PowerShell.
# Thus the object based nature, allow us to parse, filter, sort, export, etc... our object data as broadly or
# granularly as we want.

----------------Brief Case Study

# Your a Windows System Administrator. Call comes in "some process server01 that is eating up all"
# "its CPU and messing up user access to their home folders. Please kill it."

PS> Get-Process | Sort-Object -Property CPU - Descending 
PS> $p = Get-Process -Name lob1
PS> $p.Kill()

# another way to find it
PS> get-command -Noun *process*         # gives list of Cmdlet, Name, Version, Source
# Stop-Process was given 
# pretend lob1 was still running, so try this

PS> Get-Process -Name lob1 | Stop-Process       # this performs a close, not a kill

PS> Get-Process -Name lob1 | Stop-Process -Force    # add -Force switch to simulate a true process termination
# or
PS> (Get-Process -Name lob1).Kill()         # invoke kill method by enclosing the kill call in ()

----------------After Action Review for Case Study

PS> Get-Process | Sort-Object -Property CPU - Descending 
# Get-Process returns a collection of System.Diagnostics.Process objects
# can then pipe the cmdlet to Get-Member
PS> Get-Process | Get-Member    # use Get-Member to (a) determine type of object being return in the pipeline
                                # and (b) the methods and properties exposed by that object.

PS> Get-Help Get-Process -Online    # launches a website Microsoft PowerShell documentation page
                                    # this HELPFUL b/c you can identify
                                    # (1) the objects that Get-Process accepts as Inputs and 
                                    # (2) the objects that Get-Process cmdlet outputs

# now look at full help file for Sort-Object
PS> Get-Help Sort-Object -Online 
# Inputs are System.Management.Automation.PSObject 
# "you can pipe the objects to be sorted to Sort-Object". Sort-Object then can sort based on
# any property or properties that you specify as parameters.


PS> Get-Process -Name lob1 | Stop-Process       # this performs a close, not a kill

# inputs are "process objects" to this cmdlet
# outputs are objects or parameters

# Outputs are System.Diagnostics.Process, System.Diagnostics.FileVersionInfo, System.Diagnostics.ProcessModule
# this cmdlet is used like this:   if you input an object, then it returns a parameter as specified


# input this           "parameter"          --> returns this object
#                      = "process objects"
                     |______________|
# System.Diagnostics.Process                --> returns this object Process
# System.Diagnostics.FileVersionInfo        --> returns this object FileVersionInfo
# System.Diagnostics.ProcessModule          --> returns this object ProcessModule

# objects entering the pipeline must have a compatible data type (object type) to be successfully
# received and processed by the subsequent command in the pipeline.

# Windows PowerShell has many pipelines
# primary pipeline is called the output pipeline, analogous to StdOut in the Cmd.exe world
# other pipeline (not covered here)
# Error pipeline - used to catch and channel error messages
# Warning pipeline - used to catch and channel warning messages
# Verbose pipeline - used to catch and channel large output volume
# Debugging pipeline


Reference Terms 
                    """
                    CimCmdlets
                    ISE 
                    Microsoft.PowerShell.Archive 
                    Microsoft.PowerShell.Core 
                    Microsoft.PowerShell.Diagnostics
                    Microsoft.PowerShell.Host
                    Microsoft.PowerShell.Management
                    Microsoft.PowerShell.ODataUtils 
                    Microsoft.PowerShell.Security
                    Microsoft.PowerShell.Utility
                    Microsoft.WsMan.Management
                    PackageManagement
                    PowerShellGet
                    PSDesiredStateConfiguration
                    PSDiagnostics
                    PSReadline 
                    PSScheduledJob 
                    PSWorkflow 
                    PSWorkflowUtility

                    """

Microsoft.PowerShell.Management

                    """
                    Add-Computer                Invoke-Item                         Set-Item 
                    Add-Content                 Invoke-WmiMethod                    Set-ItemProperty
                    Checkpoint-Computer         Join-Path                           Set-Location
                    Clear-Content               Limit-EventLog                      Set-Service
                    Clear-EventLog              Move-Item                           Set-WmiInstance
                    Clear-Item                  Move-ItemProperty                   Show-ControlPanelItem
                    Clear-ItemProperty          New-EventLog                        Show-EventLog
                    Clear-RecycleBin            New-Item                            Split-Path  
                    Complete-Transaction        New-ItemProperty                    Start-Process
                    Convert-Path                New-PSDrive                         Start-Service
                    Copy-Item                   New-Service                         Start-Transaction
                    Copy-ItemProperty           New-WebServiceProxy                 Stop-Computer
                    Debug-Process               Pop-Location                        Stop-Process
                    Disable-ComputerRestore     Push-Location                       Stop-Service
                    Enable-ComputerRestore      Register-WmiEvent                   Suspend-Service
                    Get-ChildItem               Remove-Computer                     Test-ComputerSecureChannel
                    Get-Clipboard               Remove-EventLog                     Test-Connection
                    Get-ComputerRestorePoint    Remove-Item                         Test-Path
                    Get-Content                 Remove-ItemProperty                 Undo-Transaction
                    Get-ControlPanelItem        Remove-PSDrive                      Use-Transaction
                    Get-EventLog                Remove-WmiObject                    Wait-Process
                    Get-HotFix                  Rename-Computer                     Write-EventLog
                    Get-Item                    Rename-Item 
                    Get-ItemProperty            Rename-ItemProperty
                    Get-ItemPropertyValue       Reset-ComputerMachinePassword
                    Get-Location                Resolve-Path
                    """
Get-Member          
                    """          
                    Get-PSDrive                 Restart-Computer
                    Get-PSProvider              Restart-Service
                    Get-Process                 Restore-Computer
                    Get-Service                 Resume-Service
                    Get-Transaction             Set-Clipboard
                    Get-WmiObject               Set-Content
                    
                    """


--------Understanding in Depth How the Pipeline Works



PS> Get-Service -Name *spool*
PS> Get-Service -Name spooler | Stop-Service
PS> Get-Service -Name *spool*
PS> Start-Service -Name spooler

                    """
                    PS C:\WINDOWS\system32> Get-Help Get-Process -Online
                    PS C:\WINDOWS\system32> Get-Help Sort-Object -Online
                    PS C:\WINDOWS\system32> Get-Service -Name *spool*

                    Status   Name               DisplayName
                    ------   ----               -----------
                    Running  Spooler            Print Spooler


                    PS C:\WINDOWS\system32> Get-Service -Name spooler | Sto
                    PS C:\WINDOWS\system32> Get-Service -Name *spool*

                    Status   Name               DisplayName
                    ------   ----               -----------
                    Stopped  Spooler            Print Spooler


                    PS C:\WINDOWS\system32> Start-Service -Name spooler
                    PS C:\WINDOWS\system32> Get-Service -Name *spool*

                    Status   Name               DisplayName
                    ------   ----               -----------
                    Running  Spooler            Print Spooler
                    """
# explained. 1973 Pipeline created b/c represents actual pipeline.

# ATUL you can pipe to Get-Member if want to see its properites and methods
PS> Get-Help Get-Service -Online 
PS> Get-Help Sort-Object -Online 
PS> Get-Help Get-Process -Online 
PS> Get-Help Get-Member -Online 
PS> Get-Help Stop-Service -Online 
# here it is, got it
PS> Get-Service | Get-Member        # you can pipe to Get-Member if want to see its properites and methods


----------------First, Data Types 

# you can pipe to Get-Member if want to see its properites and methods: done here.

                                    Get-Service | Get-Member                    # so Get-Service spits out OUTPUTS that are
                                                                                # ServiceController objects
                                                                       |===============|         
                                       TypeName: System.ServiceProcess.ServiceController

                                                                                # and note that Stop-Service natively expects
                                                                                # ServiceController objects as INPUT
                                    Name                      MemberType    Definition
                                    ----                      ----------    ----------
                                    Name                      AliasProperty Name = ServiceName
                                    RequiredServices          AliasProperty RequiredServices = ServicesDependedOn
                                    Disposed                  Event         System.EventHandler Disposed(System.Object, System.EventArgs)
                                    Close                     Method        void Close()
                                    Continue                  Method        void Continue()
                                    CreateObjRef              Method        System.Runtime.Remoting.ObjRef CreateObjRef(type requestedType)
                                    Dispose                   Method        void Dispose(), void IDisposable.Dispose()
                                    Equals                    Method        bool Equals(System.Object obj)
                                    ExecuteCommand            Method        void ExecuteCommand(int command)
                                    GetHashCode               Method        int GetHashCode()
                                    GetLifetimeService        Method        System.Object GetLifetimeService()
                                    GetType                   Method        type GetType()
                                    InitializeLifetimeService Method        System.Object InitializeLifetimeService()
                                    Pause                     Method        void Pause()
                                    Refresh                   Method        void Refresh()
                                    Start                     Method        void Start(), void Start(string[] args)
                                    Stop                      Method        void Stop()
                                    WaitForStatus             Method        void WaitForStatus(System.ServiceProcess.ServiceControllerStatus desire
                                    CanPauseAndContinue       Property      bool CanPauseAndContinue {get;}
                                    CanShutdown               Property      bool CanShutdown {get;}
                                    CanStop                   Property      bool CanStop {get;}
                                    Container                 Property      System.ComponentModel.IContainer Container {get;}
                                    DependentServices         Property      System.ServiceProcess.ServiceController[] DependentServices {get;}
                                    DisplayName               Property      string DisplayName {get;set;}
                                    MachineName               Property      string MachineName {get;set;}
                                    ServiceHandle             Property      System.Runtime.InteropServices.SafeHandle ServiceHandle {get;}
                                    ServiceName               Property      string ServiceName {get;set;}
                                    ServicesDependedOn        Property      System.ServiceProcess.ServiceController[] ServicesDependedOn {get;}
                                    ServiceType               Property      System.ServiceProcess.ServiceType ServiceType {get;}
                                    Site                      Property      System.ComponentModel.ISite Site {get;set;}
                                    StartType                 Property      System.ServiceProcess.ServiceStartMode StartType {get;}
                                    Status                    Property      System.ServiceProcess.ServiceControllerStatus Status {get;}
                                    ToString                  ScriptMethod  System.Object ToString();

# Notice that that the Stop-Service cmdlet natively expects ServiceController objects
# ATUL to confirm this, you can pipe Get-Service | Get-Member to see its properties and methods.

----------------Second, Parameters --> Parameter Binding 

# true "secret sauce" that makes PowerShell pipeline so awesome is called parameter binding.
# object type allows the data to flow from PS command 1 to PS comamnd 2 (this is step one).
# (step two is) PS looks for a match on parameter values and/or property names.

# we are passing objects from cmdlet 1 to cmdlet 2
# help file shows < > expected object types for input and output. And [] denotes the array of values.
# This allows us to pass more than one service into this cmdlet.
# required = true 
# position = 1
# thus this means we are looking at positional parameters.

true (ByValue)  # true means that PS will use this parameter to bind the two cmdlets together.

# equal statements
Stop-Service -InputObject spooler
Stop-Service spooler 

# note that not all PS commands write to the pipeline.
# PS here choose to bind the output of Get-Service to the input of Stop-Service in an intentionally complementary way
# This is done using the ServiceController object itself. This reference is made on the Stop-Service side by means
# of the -InputObject parameter.
# Stop-Service accepts a -Name <String[]>

        DIAGRAM 6.1
        # pipeline always moves left to right
        # can iterate through collection of objects, which tranlates into cycling through same pipeline repeatedly
        # Diagram here:
        # Here PS choose to bind output of Get-Service to the input of Stop-Service by 
        # using the ServiceController object itself (note - this reference is made on the Stop-Service side by 
        # means of the -InputObject parameter

                                   >           SUN DIAGRAM          |
        Get-Service -Name Spooler  > Type = ServiceController       | Stop-Service -InputObject
                                   >                                |
        
        # so in the second example, parameter binding can take advantage of a shared property name
        # Note that Stop-Service Help file shows 
                                                -Name <String[]>
        # which means that Stop-Service can also bind to string data from the preceeding command, specifically
        # the object's name. In PS, almost every object has a property (or AliasProperty) called 
                                                                                                 name 

        or
                                  >    SUN DIAGRAM            |
        Get-Service -Name Spooler > Name=spooler              | Stop-Serviced -Name 
                                  >                           |
        

----------------Try It Yourself 

# You need to generate an HTML report that displays all the stopped services on your computer.
# After generating the report, we will examine the pipeline for troubleshooting and learning.

# 1) get members of Get-Service
PS> Get-Service | Get-Member        
# 2) play with object methods, so generate a variable to hold all system services whose status is
#    equal to Stopped. Then display the contents of the variable.
PS> $srv = Get-Service | Where-Object -Property Status -eq "Stopped"        # creates the object 
PS> $srv                                                                    # display results
#    what has happened? you created a variable $srv and packed all stopped services inside it.
# 3) check out the metadata details of $srv which shows datatype, properties, and methods.
PS> $srv | Get-Member 
#    this confirms that $srv variable consists of many ServiceController objects.
#    Where-Object to be covered later in book.

# 4) try Out-File
#    Out-File is a parameter that shows a textual representational of whatever data resides in the pipeline.
$srv | Out-File -FilePath stopped-services.txt 
# to open this
Notepad stopped-services.txt 

# 5) consult Out-File help file and look for inputs, output, and pipeline aware parameters
#    Inputs --> PSObject
#    Outputs --> no output is generated
#    prove it to yourself that there are no outputs by trying to pipe Out-File to Get-Member
PS> $srv | Out-File test.txt | Get-Member       # this should generate an error.
#    note: will see that PSObject is a great object to work with b/c its so flexible.
PS> Help Out-File -Online       # to generate webpage help tab
                                # Out-File located in Microsoft.PowerShell.Utility

--------Passing Data Through the Pipeline

# parameters are a way to modify the run state of PS command.
# parameters can be passed positionally
            Get-EventLog Application

# or they can be passed by name
            Get-EventLog -LogName Application

# most parameters have 3 attributes: Name, Value, Data Type
# some parameters have a switch behavior = name and value are the same
        Get-ChildItem C:\Windows -Recuse
# Summary: Windows PS binds parameters internally either by parameter values or by parameter names
# Summary (better): Windows PS when performing pipelin parameter bindinds:
# PS always tries to bind first by ByValue (default)
# and then second ByPropertyName if PS can not find a match by value.

# Useful Help Resource is about_ help files                                 
Get-Help about_* 
Get-Help about_pipelines
Get-Help about_parameters 
Get-Help about_objects

----------------Parameter Passing ByValue 
# read Get-Help, b/c it shows how many parameters will accept pipeline input by value.

----------------Parameter Passing ByPropertyName 
# ATUL key to this is that the "property name binding method" will cause PS to examine all properties of the incoming objects
# and looks for a property with a MATCHING name and data type.

# AUTHOR (vs ATUL explanation below)
# this is plan B (when paramater pipeline input by value does NOT work)
# Hypo you are diagnosing a malware infection on your user's computer, and you find a rogue service 
# named winders_updatte. Its always good to stop the service, but even better to stop the underlying
# process that is mapped to the service. So create the following pipeline:
Get-Service -Name winders_updatte | Stop_Process            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<THIS IS THE ACTUAL PIPELINE
# Stop-Process will look for Process objects as input. Stop-Process has a parameter named -InputObject
# that does indeed accept pipeline input by value, BUT the data type required here 
# is Process, not ServiceController. Thus, this will not work (Parameter binding by value is NOT going to work).
# Now onto Plan B.
# Stop-Service 

# ATUL 
PS> Get-Help Get-Process -Online

                PS> Get-Process | Sort-Object -Property CPU - Descending 
                PS> $p = Get-Process -Name lob1
                PS> $p.Kill()


                PS> get-command -Noun *process*         # another way to find it

                PS> Get-Process -Name lob1 | Stop-Process       # this performs a close, not a kill

                PS> Get-Process -Name lob1 | Stop-Process -Force    # add -Force switch to simulate a true process termination
                # or
                PS> (Get-Process -Name lob1).Kill()         # invoke kill method by enclosing the kill call in ()

                                                            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Note here from above
PS> Get-Service | Get-Member    # to identify the Members and TypeName
                                        Get-Service | Get-Member
                                                        TypeName: System.ServiceProcess.ServiceController
                                                                                        |---------------|
PS> Get-Process | Get-Member    # to identify the Members and TypeName
                                        Get-Process | Get-Member
                                                        TypeName: System.Diagnostics.Process
                                                                                     |-----|
PS> Get-Help Stop-Process -Online   # to identify the cmdlet's input process object
                                                        TypeName: System.Diagnostics.Process
                                                                                     |-----|
                                    # and Stop-Process has a parameter namded -InputObject that accepts pipeline input ByValue.
                                    # But the data type required is a Process object. 
                                    # Look 3 lines up, TypeName for Get-Service is a ServiceController
                                    # No match: Process vs ServiceController.
                                    # thus parameter binding by value is not a workable solution here.
                                    # onto Plan B

# Plan B
# need to check Get-Help Stop-Service -Online
PS> Get-Help Stop-Service -Online
            
                # Inputs TypeName: System.ServiceProcess.ServiceController, System.String
                                                         |---------------|         |----|
                -Name
                        Specifies the service names of the services to stop. Wildcard characters are permitted.

                        Type:   String[]
                        Aliases:    ServiceName
                        Position:   0
                        Default value:  None
                        Accept pipeline input:  True (ByPropertyName, ByValue)
                        Accept wildcard characters: False

                # note that Stop-Service accepts two types of inputs: ServiceController and String
# so
# when PS attemps to do parameter binding by property name, it examines all of the incoming objects (in this case ServiceController)
# and PS looks for a property with a matching name and data type:

PS> Get-Service | Get-Member    # to identify the Members and TypeName
                                        Get-Service | Get-Member
                                                        TypeName: System.ServiceProcess.ServiceController
                                                                                        |---------------|
PS> Get-Help Stop-Process -Online # see above code specifies -InputObject with ServiceController objects. MATCH here.

# Helpful about "property name binding method" is that it open up a lot of pipelining possibilities that might not have worked.
# Bad - is that you might get unexpected results.
            # in our example, malware service with name winders_updatte 
            # this name = "winders_updatte" will be sent across the pipeline into Stop-Process
            # if by chance there is a service with that exact match on the name, then pipeline will work.
            # if however the underlying service has another name, then the pipeline will break.


# AUTHOR Summary for this section
# 1) data types must match on both sides of the pipeline for data to flow.
# 2) PS first attempts to match parameters by value (data type) only.
# 3) Failing 2, then PS looks for a matching property name (and data type) on each side of the pipeline.
# 4) Sometime, even a parameter match can result in unexpected results.

# AUTHOR TIP
# Don Jones advises, if you get unexpected results in a pipeline expression, remove the rightmost element
# and pipe the rest to Get-Member. Then if you see a member list, at least you know that the output
# is pipeline-aware. You can also view the output objects' data type and property list.



--------------------------------Try It Yourself
Experiementing with Pipeline Parameter Binding

PS> Get-Help Import-Csv         # this cmdlet creates table-like custom objects from the csv file
                                # each col in CSV file becomes a property of the custom object
                                # each item in the rows become the property values.s

# 1) create a text file named server.csv that contains the following data
#               computername,role
#               dc1,domain controller
#               dc2,domain controller
#               mem1,file server
#               sql1,sql server
#               sp1,sharpoint server
#               exA,exchange server
# remember that this process will work seemlessly only in an Active Directory domain environment.

# servers.csv file created
# navigate to correct directory or find directory
PS> $servers = Import-Csv -Path C:\Users\Atul\Desktop\servers.csv


PS> $servers        # displays content in StdOut


# 2) start PS. Leverage Import-Csv cmdlet to perform the data input. Echo the contents of $servers variable
#   so that you can see the output. Finally, pipe to Get-Member.

                    PS> $servers = Import-Csv -Path C:\Users\
                    PS> $servers

                    computername role
                    ------------ ----
                    dc1          domain controller
                    dc2          domain controller
                    mem1         file server
                    sql1         file server
                    sp1          file server
                    exA          file server


                    PS> $servers | Get-Member


                       TypeName: System.Management.Automation.PSCustomObject            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    Name         MemberType   Definition
                    ----         ----------   ----------
                    Equals       Method       bool Equals(System.Object obj)
                    GetHashCode  Method       int GetHashCode()
                    GetType      Method       type GetType()
                    ToString     Method       string ToString()
                    computername NoteProperty string computername=dc1                   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  
                    role         NoteProperty string role=domain controller
# we will need to call  computername NoteProperty string computername=dc1       

# 3) piping the results of $servers PSCustomObject objects into Get-Service:

                #ATUL
                PS> Get-Help Import-Csv             # poorly formatted, not complete
                PS> Get-Help Import-Csv -Online     # better
                PS> Get-Help Get-Service -Online    # yes, agree, better
    so piping is from

                    Import-Csv                              into                Get-Service 
        # default   bind by value                                               default bind by string
        # flow      output                                                      input
        # creates   custom object
        # as per    description (table like "custom object")
        # parameter computername=dc1
        # ComputerName is an OPTIONAL parameter for Import-Csv
mismatch# type      String[]                                                    ByValue = tried to do a value name bind
        # so need to try plan B ----------------------------------------------> property name bind
        fix     
        #                                                                       change parameter from -Name to -ComputerName
        mismatch here --------------------------------------------------------> Required parameter -DisplayName 
        #                                                                       failed thus need to look at Property Name bind 
        #                                                                       instead so look at Optional parameters
        #                                                                       Optional parameter -ComputerName

        match
                    property name                                               property name 
                    string                                                      string 
                    default                                                     optional (1st tried default, 2nd option worked)
                                                                                computername=dc1

# 4) this should work
        PS> Import-Csv -Path C:\Users\Atul\Desktop\servers.csv | Get-Service -Name *

error generated on -Name *
# book - asterik is a placeholder that says return all service names. See next couple of hours to learn about splat operator.

# does NOT work b/c not in an Active Directory domain environment.

Code
PS> Get-Help Import-Csv -Online
# works fine
PS> Import-Csv -Path C:\Users\Atul\Desktop\servers.csv 
PS> Import-Csv -Path C:\Users\Atul\Desktop\servers.csv | Get-Member

# not working b/c not in Active Directory Domain Environment
PS> Import-Csv -Path C:\Users\Atul\Desktop\servers.csv | Get-Service


--------"Forcing" Objects Through the Pipeline

# if parameter values/prperties do not line up, can still force data thru
# Case Study
# you are given a csv file containing newly hired employees. Your task is to create Active Directory user objects
# for the new personnel as efficiently as possible.

Created newhires.csv 
PS> Import-Csv -Path C:\Users\Atul\Desktop\newhires.csv 
# note Import-Csv cmdlet produces custom objects that resemble but are not string objects
# piping the statement to Get-Members
# why do this? to see the membership of those objects
# this is done by piping that statement to Get-Member
PS> Import-Csv -Path C:\Users\Atul\Desktop\newhires.csv | Get-Member
PS> Update-Help         # to update all help files
# New-ADUser help is not available. It does not update.
# New-ADUser is the end of the pipeline, so we dont care outputs here.
# From Book
# New-ADUser parameters are -GivenName <string>
# -GivenName string should line up with CSV files data for netname field which is
#           New-ADUser-GivenName string property match up with FirstName field int he csv file
#           New-ADUser-SurName string property match up with LastName field in the csv file
#           EmailAdress string property match up CSV file's emailaddress field
# now test it
PS> Import-Csv -Path .\newhires.csv | New-ADUser
# blood on screen
# error messages here are that PS can not find any properties in the Import-Csv output that matches property names in Get-ADUser
# Solution here is that to do property name-based parameter binding, the parameter names and data types must match exactly. So,
# the data type part is covered, b/c its all string data.
# So we can employ custom properties to manually map properties from Import-Csv to corresponding properties in New-ADUser.


----------------Introducing Hash Tables

# In PS, a hash table is an associative array that contains a collection of key/value pairs.
# generic hash table code:
$hashtable_name = @{key1 = item1; key2 = item2; key3 = item3; key4 = item4; key5 = item5}

# yes, its true we can fix our particular problem trivially simply by renaming the column headers in newhires.csv
# to match the New-ADUser property names. However, you are learning that the simplist approach is not preferred.

# PS script (just accept it for now)
Import-Csv -Path .\newhires.csv |
Select-Object -Property * , `
@{name='samAccountName';expression={$_.netname}}, `
@{name='GivenName';expression={$_.firstname}}, `
@{name='Name';expression={$_.lastname}}, `
# @{name='EmailAddress';expression={$_.emailaddress}} |
New-ADUser

# notes
# two ways to do line breaks            ` grave accent also called backtick character
#                                       | pipe operator
# see Chapter 19 for Intro to PS Scripting
# line 1 - you get this as have see it before
# line 2 - Select-Object cmdlet specifies we want to pull all property values from the CSV file
# use the comma in PS as a command separator when we want to do more than one action in the same pipeline
# Hash table begins on line 3
@{name='samAccountName';expression={$_.netname}}, `
# Here name and expression are the keys, and are arbitrary for our purposes.
# Just need to be consistent with their use in the context of the script
# The values match the properties expected in New-ADUser, so samAccountName is a required property
# that we are HAND-MAPPING to the netname field in the CSV file.
# &_ is a shortcut way to refer to the current object in the pipeline.

# Here we parse the CSV fie and connect everything in 
# the netname column to the samAccountName property in New-ADUser.

# Note that "#" was commented out of the hash table for the EmailAddress field
# that line is not needed b/c the column header name in the CSV file is already EmailAddress
# ie the required property column header name in the CSV matches the property expected in the New-ADUser.

--------Summary Q&A Workshop

# when confused about what something means or does then break up the statement
# just remove the last element from the pipeline and see what happens
PS> Get-Service -Name Wsearch | Stop-Process
# break it up
PS> Get-Service -Name Wsearch                   # works
PS> Get-Service -Name Wsearch Get-Member        # error
PS> Get-Service -Name Wsearch | Get-Member      # correct
# this will give you precisely the object data type and all parameters that are available for binding
# then you can look up individual properties using the -Parameter parameter:
PS> Get Help Stop-Process -Parameter InputObject 
# above two statements will 

                        # first search
                        PS C:\WINDOWS\system32> Get-Service -Name Wsearch | Get-Member

                           TypeName: System.ServiceProcess.ServiceController

                        Name                      MemberType    Definition
                        ----                      ----------    ----------
                        Name                      AliasProperty Name = ServiceName
                        RequiredServices          AliasProperty RequiredServices = ServicesD
                        Disposed                  Event         System.EventHandler Disposed
                        Close                     Method        void Close()
                        Continue                  Method        void Continue()
                        CreateObjRef              Method        System.Runtime.Remoting.ObjR
                        Dispose                   Method        void Dispose(), void IDispos
                        Equals                    Method        bool Equals(System.Object ob
                        ExecuteCommand            Method        void ExecuteCommand(int comm
                        GetHashCode               Method        int GetHashCode()
                        GetLifetimeService        Method        System.Object GetLifetimeSer
                        GetType                   Method        type GetType()
                        InitializeLifetimeService Method        System.Object InitializeLife
                        Pause                     Method        void Pause()
                        Refresh                   Method        void Refresh()
                        Start                     Method        void Start(), void Start(str
                        Stop                      Method        void Stop()
                        WaitForStatus             Method        void WaitForStatus(System.Se
                        CanPauseAndContinue       Property      bool CanPauseAndContinue {ge
                        CanShutdown               Property      bool CanShutdown {get;}
                        CanStop                   Property      bool CanStop {get;}
                        Container                 Property      System.ComponentModel.IConta
                        DependentServices         Property      System.ServiceProcess.Servic
                        DisplayName               Property      string DisplayName {get;set;
                        MachineName               Property      string MachineName {get;set;
                        ServiceHandle             Property      System.Runtime.InteropServic
                        ServiceName               Property      string ServiceName {get;set;
                        ServicesDependedOn        Property      System.ServiceProcess.Servic
                        ServiceType               Property      System.ServiceProcess.Servic
                        Site                      Property      System.ComponentModel.ISite
                        StartType                 Property      System.ServiceProcess.Servic
                        Status                    Property      System.ServiceProcess.Servic
                        ToString                  ScriptMethod  System.Object ToString();

                        # search two
                        PS C:\WINDOWS\system32>> Get-Help Stop-Process -Parame

                        -InputObject <Process[]>
                            Specifies the process objects to stop. Enter a var...
                            that gets the objects.

                            Required?                    true
                            Position?                    0
                            Default value                None
                            Accept pipeline input?       True (ByValue)
                            Accept wildcard characters?  false


# How to get let of only the parameters for a given cmdlet? use asterisk wildcard
PS> Get-Help Get-ChildItem -Parameter *         # yes, this works

# here is one line of code that brings back only parameters that accept pipeline input as well how its accepted:
PS> Get-Help Get-Process -Parameter * | Where {$_.pipelineInput -Like 'true*'} | Select Name, PipelineInput 
# this also exposes you to the Where-Object and Select-Object cmdlets:

                            name         pipelineInput
                            ----         -------------
                            ComputerName True (ByPropertyName)
                            Id           True (ByPropertyName)
                            InputObject  True (ByValue)
                            Name         True (ByPropertyName)


----------------Workshop
# Start up four instances of Notepad on your system. Using only PS, learn about those processes.
# Determine whether you can kill allo four instances at once.

# Then get a list of whats running on your system, sort them alphabetically by service name, and outout
# to an HTML report.

----------------Quiz
# 1 when you pipe objects, PS attempts to associate the piped objects with one the PARAMETERS
# the onus is on the receiving command to map one of its parameters to either the incoming object
# directly (by value), or to a matching property name (by property name).

# 2 the Linux and Cmd.exe shells pipe TEXT whereas PS pipes only OBJECTS. These objects are fully functional data structures.

# 3 Get-Service | Where-Object { $_.Status -eq "Stopped" }
# $_ means CURRENT ITEMS in the pipeline. $_ is an automatically created variable and means $PSItem
PS> Get-Service | Where-Object { $_.Status -eq "Stopped" }
PS> Get-Service | Where-Object { $PSItem.Status -eq "Stopped" }  # both are equal


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 7 Sorting, Filtering, and Measuring Windows PowerShell Output
        Sorting Output
        Filtering Output
        Measuring Objects

Chapter 7 Sorting, Filtering, and Measuring Windows PowerShell Output
# explore how to format, export, and massage PS output for ONSCREEN display

PS> Get-Command -Verb out 
PS> gcm                     # alias for Get-Command
PS> Get-Process | Out-Default
PS> Get-Process | Out-Host 

--------Sorting Output # preferred sort order

# display the top 10 processes, ordered by CPU utilization
PS> Get-Process     # too muh
PS> Get-Process | Sort-Object -Property Name    # dont need to specify -Property parameter b/c its positional already
PS> Get-Process | Sort Name -Descending         # Sort is an easy alias for Sort-Object

# note your missing a lot so need to ALWAYS pipe to Get-Member to reveal all properties
PS> Get-Process | Get-Member -MemberType Properties                     <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# note AliasProperty
# also PS team converted bytes to kilobytes
# we can learn the columns we want by simply examining the properties of the given object.
# PS is not case sensitive, so you can use -CaseSensitive parameter to your expresssion.

----------------Sorting on Multiple Criteria 

PS> Get-Service | Sort-Object -Property status              # ascending order by Status and then matching Status values
PS> Get-Service | Sort-Object -Property status, name        # ascending order by Status, then Name

PS> Get-Service | Sort-Object -Property DisplayName         # ascending order by DisplayName

# no way apply ascending to first term then descending to second term

----------------Adding Grouping to the Mix 

PS> Set-Location c:\windows\system32
PS> Get-ChildItem                           # too much info
PS> Get-ChildItem | Get-Member              # yields two type of .NET object types:

                                TypeName: System.IO.DirectoryInfo   # represents folder objects
                                TypeName: System.IO.FileInfo        # represents file objects

PS> Get-ChildItem | Group-Object -Property extension
# this output is confusing b/c Count, Name, Group are given but values are all over the place
# ie not the cleanest output as PS appears to give a random order
# so lets add Sort-Object to the pipeline
PS> Get-ChildItem | Group-Object -Property extension | Sort-Object -Property count -Descending

# much cleaner view


--------Filtering Output
# close to SQL using SELECT, FROM, WHERE, ORDER BY
# PS uses
Select-Object
Where-Object
Sort-Object 

----------------Using Select-Object 
# PS users will use 
Select-Object    # aliases
?                # aliases
# dont use aliases in scripts. Use full cmdlets and parameter names to maximize readability and compatability

# lets returnt to examining Get-Process. PS Team thought this cmdlet was the most useful.
# now lets add Get-Member and Select-Object to return only properties WE want to see
Get-Process                                                             # one big jumble of results
# vs
Get-Service | Select-Object -Property ProcessName, Id, cpu, ws          # results seem to be ordered

--------------------------------Have you been using Tab Completetion? 
# use tab completion to educate yourself on the options available. Less likely to forget the command needed.
Get-Service -Name


Select-Object   # use -First and -Last parameteres with integer values
PS> Get-Process | Sort-Object -Property ws -Descending | Select-Object -First 5

# Select-Object behaves much the same way as SELECT
# in SELECT, we specify column names from one or more target tables
# in Select-Object, we specify properties from the current objects in the pipeline

----------------Using Where-Object 

# performs horizontal (row-level) filtering
# Select-Object allow you to customize the properties that are returned
# Where-Object allow you to control the output volume

# quick example that shows the power and elegance of Where-Object
PS> Get-Process | Select-Object -Property ProcessName, CPU, WS | Where-Object { $_.cpu -gt 50 } | Sort-Object -Property CPU -Descending

# explained
# 1) retrieve all process objects active in the current system
# 2) filter out all columns (properties) except ProcessName, CPU and WS
# 3) extract the rows that contain CPU values above 50, 
# 4) sort remaining pipeline objects (ie output) on CPU property, descending

#vs 
                  Where-Object                                   Select-Object
# note that not including CPU in the Select-Object expression would cause Where-Object to see nothing b/c there is no cpu data.
# by putting Where-Object before Select-Object, we would have filtered out the unneeded rows BEFORE we cut down the number o
# properties we see in the output.

# "Filter Left" Best Practice = reduces the number of objects that need to be processed further down the pipeline.
# note that some cmdlets include a -Filter parameter that lets you perform filtering at that point instead of
# having to connect to a Where-Object expression.

--------------------------------What is a "Working Set" Anyway?             WS 

# Get-Process output is cryptic.
# Working Set property defines the number of memory pages that were recently referenced by the process
# WS value is given in kilobytes (KB).
# thus higher values mean the process is more RAM-hungry that other processes.

# CPU property also gives us unexpected output. AUTHOR initial assumption that CPU property should give us a 
# cpu utiliziation counter range from 0 to 100, like Task Manager.
# Not correct.
# CPU property of Get-Process gives us the amount of time that the process has occupied on all system processors
# given in seconds.
# to see use this from above:
PS> Get-Process | Sort-Object -Property ws -Descending | Select-Object -First 5


----------------Comparision Operators in PS

-eq             # equal to
-ne             # not equal to
-gt             # greater than
-ge             # greater than or equal to
-lt             # less than
-le             # less than or equal to
-like           # wildcard comparision
-notlike        
-Match 
-NotMatch
-Replace 
                # all Booleans:
-in             # in operator an array
-notin          
-contains       # containment operator the specified valued
-notcontains 
-is             # type opertor
-isnot

-ceq            # case sensitive version, precede with "c"
-ieq            # explicitly case insentitive, precede with "i"

# look at syntax
PS> Get-Module -ListAvailable | Where-Object { $_.Name -notlike "Microsoft*" }      # Where-Object
PS> Get-Module -ListAvailable | ? { $_.Name -notlike "Microsoft*" }                 # ? 
PS> Get-Module -ListAvailable | where { $_.Name -notlike "Microsoft*" }             # where

PS> Get-Command | Where-Object { $_.CommandType -ne "cmdlet" }                      # add spaces to make more readable
                                                                                    # ie breathing room

PS> Get-Command | Where-Object { $_.CommandType -eq "cmdlet" }          

                        # retrieve a list of PS commands available on our system that are CommandType cmdlet
                        CommandType     Name                                               Version    Source
                        -----------     ----                                               -------    ------
                        Cmdlet          Add-AppxPackage                                    2.0.0.0    Appx
                        Cmdlet          Add-AppxProvisionedPackage                         3.0        Dism
                        Cmdlet          Add-AppxVolume                                     2.0.0.0    Appx
                        Cmdlet          Add-BitsFile                                       2.0.0.0    BitsTransfer
                        Cmdlet          Add-CertificateEnrollmentPolicyServer              1.0.0.0    PKI
                        Cmdlet          Add-Computer                                       3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Add-Content                                        3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Add-History                                        3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Add-JobTrigger                                     1.1.0.0    PSScheduledJob
                        Cmdlet          Add-KdsRootKey                                     1.0.0.0    Kds
                        Cmdlet          Add-LocalGroupMember                               1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          Add-Member                                         3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Add-PSSnapin                                       3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Add-Type                                           3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Add-WindowsCapability                              3.0        Dism
                        Cmdlet          Add-WindowsDriver                                  3.0        Dism
                        Cmdlet          Add-WindowsImage                                   3.0        Dism
                        Cmdlet          Add-WindowsPackage                                 3.0        Dism
                        Cmdlet          Checkpoint-Computer                                3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Clear-Content                                      3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Clear-EventLog                                     3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Clear-History                                      3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Clear-Item                                         3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Clear-ItemProperty                                 3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Clear-KdsCache                                     1.0.0.0    Kds
                        Cmdlet          Clear-RecycleBin                                   3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Clear-Tpm                                          2.0.0.0    TrustedPlatformModule
                        Cmdlet          Clear-Variable                                     3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Clear-WindowsCorruptMountPoint                     3.0        Dism
                        Cmdlet          Compare-Object                                     3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Complete-BitsTransfer                              2.0.0.0    BitsTransfer
                        Cmdlet          Complete-DtcDiagnosticTransaction                  1.0.0.0    MsDtc
                        Cmdlet          Complete-Transaction                               3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Confirm-SecureBootUEFI                             2.0.0.0    SecureBoot
                        Cmdlet          Connect-PSSession                                  3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Connect-WSMan                                      3.0.0.0    Microsoft.WSMan.Management
                        Cmdlet          ConvertFrom-Csv                                    3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          ConvertFrom-Json                                   3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          ConvertFrom-SecureString                           3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          ConvertFrom-String                                 3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          ConvertFrom-StringData                             3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Convert-Path                                       3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Convert-String                                     3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          ConvertTo-Csv                                      3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          ConvertTo-Html                                     3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          ConvertTo-Json                                     3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          ConvertTo-ProcessMitigationPolicy                  1.0.11     ProcessMitigations
                        Cmdlet          ConvertTo-SecureString                             3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          ConvertTo-TpmOwnerAuth                             2.0.0.0    TrustedPlatformModule
                        Cmdlet          ConvertTo-Xml                                      3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Copy-Item                                          3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Copy-ItemProperty                                  3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Debug-Job                                          3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Debug-Process                                      3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Debug-Runspace                                     3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Disable-AppBackgroundTaskDiagnosticLog             1.0.0.0    AppBackgroundTask
                        Cmdlet          Disable-ComputerRestore                            3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Disable-JobTrigger                                 1.1.0.0    PSScheduledJob
                        Cmdlet          Disable-LocalUser                                  1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          Disable-PSBreakpoint                               3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Disable-PSRemoting                                 3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Disable-PSSessionConfiguration                     3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Disable-RunspaceDebug                              3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Disable-ScheduledJob                               1.1.0.0    PSScheduledJob
                        Cmdlet          Disable-TlsCipherSuite                             2.0.0.0    TLS
                        Cmdlet          Disable-TlsEccCurve                                2.0.0.0    TLS
                        Cmdlet          Disable-TlsSessionTicketKey                        2.0.0.0    TLS
                        Cmdlet          Disable-TpmAutoProvisioning                        2.0.0.0    TrustedPlatformModule
                        Cmdlet          Disable-WindowsErrorReporting                      1.0        WindowsErrorReporting
                        Cmdlet          Disable-WindowsOptionalFeature                     3.0        Dism
                        Cmdlet          Disable-WSManCredSSP                               3.0.0.0    Microsoft.WSMan.Management
                        Cmdlet          Disconnect-PSSession                               3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Disconnect-WSMan                                   3.0.0.0    Microsoft.WSMan.Management
                        Cmdlet          Dismount-AppxVolume                                2.0.0.0    Appx
                        Cmdlet          Dismount-WindowsImage                              3.0        Dism
                        Cmdlet          Enable-AppBackgroundTaskDiagnosticLog              1.0.0.0    AppBackgroundTask
                        Cmdlet          Enable-ComputerRestore                             3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Enable-JobTrigger                                  1.1.0.0    PSScheduledJob
                        Cmdlet          Enable-LocalUser                                   1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          Enable-PSBreakpoint                                3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Enable-PSRemoting                                  3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Enable-PSSessionConfiguration                      3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Enable-RunspaceDebug                               3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Enable-ScheduledJob                                1.1.0.0    PSScheduledJob
                        Cmdlet          Enable-TlsCipherSuite                              2.0.0.0    TLS
                        Cmdlet          Enable-TlsEccCurve                                 2.0.0.0    TLS
                        Cmdlet          Enable-TlsSessionTicketKey                         2.0.0.0    TLS
                        Cmdlet          Enable-TpmAutoProvisioning                         2.0.0.0    TrustedPlatformModule
                        Cmdlet          Enable-WindowsErrorReporting                       1.0        WindowsErrorReporting
                        Cmdlet          Enable-WindowsOptionalFeature                      3.0        Dism
                        Cmdlet          Enable-WSManCredSSP                                3.0.0.0    Microsoft.WSMan.Management
                        Cmdlet          Enter-PSHostProcess                                3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Enter-PSSession                                    3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Exit-PSHostProcess                                 3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Exit-PSSession                                     3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Expand-WindowsCustomDataImage                      3.0        Dism
                        Cmdlet          Expand-WindowsImage                                3.0        Dism
                        Cmdlet          Export-Alias                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Export-BinaryMiLog                                 1.0.0.0    CimCmdlets
                        Cmdlet          Export-Certificate                                 1.0.0.0    PKI
                        Cmdlet          Export-Clixml                                      3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Export-Console                                     3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Export-Counter                                     3.0.0.0    Microsoft.PowerShell.Diagnostics
                        Cmdlet          Export-Csv                                         3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Export-FormatData                                  3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Export-ModuleMember                                3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Export-PfxCertificate                              1.0.0.0    PKI
                        Cmdlet          Export-ProvisioningPackage                         3.0        Provisioning
                        Cmdlet          Export-PSSession                                   3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Export-StartLayout                                 1.0.0.0    StartLayout
                        Cmdlet          Export-StartLayoutEdgeAssets                       1.0.0.0    StartLayout
                        Cmdlet          Export-TlsSessionTicketKey                         2.0.0.0    TLS
                        Cmdlet          Export-Trace                                       3.0        Provisioning
                        Cmdlet          Export-WindowsCapabilitySource                     3.0        Dism
                        Cmdlet          Export-WindowsDriver                               3.0        Dism
                        Cmdlet          Export-WindowsImage                                3.0        Dism
                        Cmdlet          Find-Package                                       1.0.0.1    PackageManagement
                        Cmdlet          Find-PackageProvider                               1.0.0.1    PackageManagement
                        Cmdlet          ForEach-Object                                     3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Format-Custom                                      3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Format-List                                        3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Format-SecureBootUEFI                              2.0.0.0    SecureBoot
                        Cmdlet          Format-Table                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Format-Wide                                        3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-Acl                                            3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          Get-Alias                                          3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-AppxDefaultVolume                              2.0.0.0    Appx
                        Cmdlet          Get-AppxPackage                                    2.0.0.0    Appx
                        Cmdlet          Get-AppxPackageManifest                            2.0.0.0    Appx
                        Cmdlet          Get-AppxProvisionedPackage                         3.0        Dism
                        Cmdlet          Get-AppxVolume                                     2.0.0.0    Appx
                        Cmdlet          Get-AuthenticodeSignature                          3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          Get-BitsTransfer                                   2.0.0.0    BitsTransfer
                        Cmdlet          Get-Certificate                                    1.0.0.0    PKI
                        Cmdlet          Get-CertificateAutoEnrollmentPolicy                1.0.0.0    PKI
                        Cmdlet          Get-CertificateEnrollmentPolicyServer              1.0.0.0    PKI
                        Cmdlet          Get-CertificateNotificationTask                    1.0.0.0    PKI
                        Cmdlet          Get-ChildItem                                      3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-CimAssociatedInstance                          1.0.0.0    CimCmdlets
                        Cmdlet          Get-CimClass                                       1.0.0.0    CimCmdlets
                        Cmdlet          Get-CimInstance                                    1.0.0.0    CimCmdlets
                        Cmdlet          Get-CimSession                                     1.0.0.0    CimCmdlets
                        Cmdlet          Get-Clipboard                                      3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-CmsMessage                                     3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          Get-Command                                        3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Get-ComputerInfo                                   3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-ComputerRestorePoint                           3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-Content                                        3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-ControlPanelItem                               3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-Counter                                        3.0.0.0    Microsoft.PowerShell.Diagnostics
                        Cmdlet          Get-Credential                                     3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          Get-Culture                                        3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-DAPolicyChange                                 2.0.0.0    NetSecurity
                        Cmdlet          Get-Date                                           3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-DeliveryOptimizationLog                        1.0.0.0    DeliveryOptimization
                        Cmdlet          Get-DeliveryOptimizationPerfSnap                   1.0.0.0    DeliveryOptimization
                        Cmdlet          Get-DeliveryOptimizationPerfSnapThisMonth          1.0.0.0    DeliveryOptimization
                        Cmdlet          Get-DeliveryOptimizationStatus                     1.0.0.0    DeliveryOptimization
                        Cmdlet          Get-DODownloadMode                                 1.0.0.0    DeliveryOptimization
                        Cmdlet          Get-DOPercentageMaxBackgroundBandwidth             1.0.0.0    DeliveryOptimization
                        Cmdlet          Get-DOPercentageMaxForegroundBandwidth             1.0.0.0    DeliveryOptimization
                        Cmdlet          Get-Event                                          3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-EventLog                                       3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-EventSubscriber                                3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-ExecutionPolicy                                3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          Get-FormatData                                     3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-Help                                           3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Get-History                                        3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Get-Host                                           3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-HotFix                                         3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-Item                                           3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-ItemProperty                                   3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-ItemPropertyValue                              3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-Job                                            3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Get-JobTrigger                                     1.1.0.0    PSScheduledJob
                        Cmdlet          Get-KdsConfiguration                               1.0.0.0    Kds
                        Cmdlet          Get-KdsRootKey                                     1.0.0.0    Kds
                        Cmdlet          Get-LocalGroup                                     1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          Get-LocalGroupMember                               1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          Get-LocalUser                                      1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          Get-Location                                       3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-Member                                         3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-Module                                         3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Get-Package                                        1.0.0.1    PackageManagement
                        Cmdlet          Get-PackageProvider                                1.0.0.1    PackageManagement
                        Cmdlet          Get-PackageSource                                  1.0.0.1    PackageManagement
                        Cmdlet          Get-PfxCertificate                                 3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          Get-PfxData                                        1.0.0.0    PKI
                        Cmdlet          Get-PmemDisk                                       1.0.0.0    PersistentMemory
                        Cmdlet          Get-PmemPhysicalDevice                             1.0.0.0    PersistentMemory
                        Cmdlet          Get-PmemUnusedRegion                               1.0.0.0    PersistentMemory
                        Cmdlet          Get-Process                                        3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-ProcessMitigation                              1.0.11     ProcessMitigations
                        Cmdlet          Get-ProvisioningPackage                            3.0        Provisioning
                        Cmdlet          Get-PSBreakpoint                                   3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-PSCallStack                                    3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-PSDrive                                        3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-PSHostProcessInfo                              3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Get-PSProvider                                     3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-PSReadlineKeyHandler                           1.2        PSReadline
                        Cmdlet          Get-PSReadlineOption                               1.2        PSReadline
                        Cmdlet          Get-PSSession                                      3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Get-PSSessionCapability                            3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Get-PSSessionConfiguration                         3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Get-PSSnapin                                       3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Get-Random                                         3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-Runspace                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-RunspaceDebug                                  3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-ScheduledJob                                   1.1.0.0    PSScheduledJob
                        Cmdlet          Get-ScheduledJobOption                             1.1.0.0    PSScheduledJob
                        Cmdlet          Get-SecureBootPolicy                               2.0.0.0    SecureBoot
                        Cmdlet          Get-SecureBootUEFI                                 2.0.0.0    SecureBoot
                        Cmdlet          Get-Service                                        3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-TimeZone                                       3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-TlsCipherSuite                                 2.0.0.0    TLS
                        Cmdlet          Get-TlsEccCurve                                    2.0.0.0    TLS
                        Cmdlet          Get-Tpm                                            2.0.0.0    TrustedPlatformModule
                        Cmdlet          Get-TpmEndorsementKeyInfo                          2.0.0.0    TrustedPlatformModule
                        Cmdlet          Get-TpmSupportedFeature                            2.0.0.0    TrustedPlatformModule
                        Cmdlet          Get-TraceSource                                    3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-Transaction                                    3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-TroubleshootingPack                            1.0.0.0    TroubleshootingPack
                        Cmdlet          Get-TrustedProvisioningCertificate                 3.0        Provisioning
                        Cmdlet          Get-TypeData                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-UICulture                                      3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-Unique                                         3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-Variable                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Get-WIMBootEntry                                   3.0        Dism
                        Cmdlet          Get-WinAcceptLanguageFromLanguageListOptOut        2.0.0.0    International
                        Cmdlet          Get-WinCultureFromLanguageListOptOut               2.0.0.0    International
                        Cmdlet          Get-WinDefaultInputMethodOverride                  2.0.0.0    International
                        Cmdlet          Get-WindowsCapability                              3.0        Dism
                        Cmdlet          Get-WindowsDeveloperLicense                        1.0.0.0    WindowsDeveloperLicense
                        Cmdlet          Get-WindowsDriver                                  3.0        Dism
                        Cmdlet          Get-WindowsEdition                                 3.0        Dism
                        Cmdlet          Get-WindowsErrorReporting                          1.0        WindowsErrorReporting
                        Cmdlet          Get-WindowsImage                                   3.0        Dism
                        Cmdlet          Get-WindowsImageContent                            3.0        Dism
                        Cmdlet          Get-WindowsOptionalFeature                         3.0        Dism
                        Cmdlet          Get-WindowsPackage                                 3.0        Dism
                        Cmdlet          Get-WindowsSearchSetting                           1.0.0.0    WindowsSearch
                        Cmdlet          Get-WinEvent                                       3.0.0.0    Microsoft.PowerShell.Diagnostics
                        Cmdlet          Get-WinHomeLocation                                2.0.0.0    International
                        Cmdlet          Get-WinLanguageBarOption                           2.0.0.0    International
                        Cmdlet          Get-WinSystemLocale                                2.0.0.0    International
                        Cmdlet          Get-WinUILanguageOverride                          2.0.0.0    International
                        Cmdlet          Get-WinUserLanguageList                            2.0.0.0    International
                        Cmdlet          Get-WmiObject                                      3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Get-WSManCredSSP                                   3.0.0.0    Microsoft.WSMan.Management
                        Cmdlet          Get-WSManInstance                                  3.0.0.0    Microsoft.WSMan.Management
                        Cmdlet          Group-Object                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Import-Alias                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Import-BinaryMiLog                                 1.0.0.0    CimCmdlets
                        Cmdlet          Import-Certificate                                 1.0.0.0    PKI
                        Cmdlet          Import-Clixml                                      3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Import-Counter                                     3.0.0.0    Microsoft.PowerShell.Diagnostics
                        Cmdlet          Import-Csv                                         3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Import-LocalizedData                               3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Import-Module                                      3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Import-PackageProvider                             1.0.0.1    PackageManagement
                        Cmdlet          Import-PfxCertificate                              1.0.0.0    PKI
                        Cmdlet          Import-PSSession                                   3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Import-StartLayout                                 1.0.0.0    StartLayout
                        Cmdlet          Import-TpmOwnerAuth                                2.0.0.0    TrustedPlatformModule
                        Cmdlet          Initialize-PmemPhysicalDevice                      1.0.0.0    PersistentMemory
                        Cmdlet          Initialize-Tpm                                     2.0.0.0    TrustedPlatformModule
                        Cmdlet          Install-Package                                    1.0.0.1    PackageManagement
                        Cmdlet          Install-PackageProvider                            1.0.0.1    PackageManagement
                        Cmdlet          Install-ProvisioningPackage                        3.0        Provisioning
                        Cmdlet          Install-TrustedProvisioningCertificate             3.0        Provisioning
                        Cmdlet          Invoke-CimMethod                                   1.0.0.0    CimCmdlets
                        Cmdlet          Invoke-Command                                     3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Invoke-CommandInDesktopPackage                     2.0.0.0    Appx
                        Cmdlet          Invoke-DscResource                                 1.1        PSDesiredStateConfiguration
                        Cmdlet          Invoke-Expression                                  3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Invoke-History                                     3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Invoke-Item                                        3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Invoke-RestMethod                                  3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Invoke-TroubleshootingPack                         1.0.0.0    TroubleshootingPack
                        Cmdlet          Invoke-WebRequest                                  3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Invoke-WmiMethod                                   3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Invoke-WSManAction                                 3.0.0.0    Microsoft.WSMan.Management
                        Cmdlet          Join-DtcDiagnosticResourceManager                  1.0.0.0    MsDtc
                        Cmdlet          Join-Path                                          3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Limit-EventLog                                     3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Measure-Command                                    3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Measure-Object                                     3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Mount-AppxVolume                                   2.0.0.0    Appx
                        Cmdlet          Mount-WindowsImage                                 3.0        Dism
                        Cmdlet          Move-AppxPackage                                   2.0.0.0    Appx
                        Cmdlet          Move-Item                                          3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Move-ItemProperty                                  3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          New-Alias                                          3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          New-CertificateNotificationTask                    1.0.0.0    PKI
                        Cmdlet          New-CimInstance                                    1.0.0.0    CimCmdlets
                        Cmdlet          New-CimSession                                     1.0.0.0    CimCmdlets
                        Cmdlet          New-CimSessionOption                               1.0.0.0    CimCmdlets
                        Cmdlet          New-DtcDiagnosticTransaction                       1.0.0.0    MsDtc
                        Cmdlet          New-Event                                          3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          New-EventLog                                       3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          New-FileCatalog                                    3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          New-Item                                           3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          New-ItemProperty                                   3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          New-JobTrigger                                     1.1.0.0    PSScheduledJob
                        Cmdlet          New-LocalGroup                                     1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          New-LocalUser                                      1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          New-Module                                         3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          New-ModuleManifest                                 3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          New-NetIPsecAuthProposal                           2.0.0.0    NetSecurity
                        Cmdlet          New-NetIPsecMainModeCryptoProposal                 2.0.0.0    NetSecurity
                        Cmdlet          New-NetIPsecQuickModeCryptoProposal                2.0.0.0    NetSecurity
                        Cmdlet          New-Object                                         3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          New-PmemDisk                                       1.0.0.0    PersistentMemory
                        Cmdlet          New-ProvisioningRepro                              3.0        Provisioning
                        Cmdlet          New-PSDrive                                        3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          New-PSRoleCapabilityFile                           3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          New-PSSession                                      3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          New-PSSessionConfigurationFile                     3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          New-PSSessionOption                                3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          New-PSTransportOption                              3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          New-PSWorkflowExecutionOption                      2.0.0.0    PSWorkflow
                        Cmdlet          New-ScheduledJobOption                             1.1.0.0    PSScheduledJob
                        Cmdlet          New-SelfSignedCertificate                          1.0.0.0    PKI
                        Cmdlet          New-Service                                        3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          New-TimeSpan                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          New-TlsSessionTicketKey                            2.0.0.0    TLS
                        Cmdlet          New-Variable                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          New-WebServiceProxy                                3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          New-WindowsCustomImage                             3.0        Dism
                        Cmdlet          New-WindowsImage                                   3.0        Dism
                        Cmdlet          New-WinEvent                                       3.0.0.0    Microsoft.PowerShell.Diagnostics
                        Cmdlet          New-WinUserLanguageList                            2.0.0.0    International
                        Cmdlet          New-WSManInstance                                  3.0.0.0    Microsoft.WSMan.Management
                        Cmdlet          New-WSManSessionOption                             3.0.0.0    Microsoft.WSMan.Management
                        Cmdlet          Optimize-AppxProvisionedPackages                   3.0        Dism
                        Cmdlet          Optimize-WindowsImage                              3.0        Dism
                        Cmdlet          Out-Default                                        3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Out-File                                           3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Out-GridView                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Out-Host                                           3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Out-Null                                           3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Out-Printer                                        3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Out-String                                         3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Pop-Location                                       3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Protect-CmsMessage                                 3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          Publish-DscConfiguration                           1.1        PSDesiredStateConfiguration
                        Cmdlet          Push-Location                                      3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Read-Host                                          3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Receive-DtcDiagnosticTransaction                   1.0.0.0    MsDtc
                        Cmdlet          Receive-Job                                        3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Receive-PSSession                                  3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Register-ArgumentCompleter                         3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Register-CimIndicationEvent                        1.0.0.0    CimCmdlets
                        Cmdlet          Register-EngineEvent                               3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Register-ObjectEvent                               3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Register-PackageSource                             1.0.0.1    PackageManagement
                        Cmdlet          Register-PSSessionConfiguration                    3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Register-ScheduledJob                              1.1.0.0    PSScheduledJob
                        Cmdlet          Register-WmiEvent                                  3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Remove-AppxPackage                                 2.0.0.0    Appx
                        Cmdlet          Remove-AppxProvisionedPackage                      3.0        Dism
                        Cmdlet          Remove-AppxVolume                                  2.0.0.0    Appx
                        Cmdlet          Remove-BitsTransfer                                2.0.0.0    BitsTransfer
                        Cmdlet          Remove-CertificateEnrollmentPolicyServer           1.0.0.0    PKI
                        Cmdlet          Remove-CertificateNotificationTask                 1.0.0.0    PKI
                        Cmdlet          Remove-CimInstance                                 1.0.0.0    CimCmdlets
                        Cmdlet          Remove-CimSession                                  1.0.0.0    CimCmdlets
                        Cmdlet          Remove-Computer                                    3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Remove-Event                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Remove-EventLog                                    3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Remove-Item                                        3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Remove-ItemProperty                                3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Remove-Job                                         3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Remove-JobTrigger                                  1.1.0.0    PSScheduledJob
                        Cmdlet          Remove-LocalGroup                                  1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          Remove-LocalGroupMember                            1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          Remove-LocalUser                                   1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          Remove-Module                                      3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Remove-PmemDisk                                    1.0.0.0    PersistentMemory
                        Cmdlet          Remove-PSBreakpoint                                3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Remove-PSDrive                                     3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Remove-PSReadlineKeyHandler                        1.2        PSReadline
                        Cmdlet          Remove-PSSession                                   3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Remove-PSSnapin                                    3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Remove-TypeData                                    3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Remove-Variable                                    3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Remove-WindowsCapability                           3.0        Dism
                        Cmdlet          Remove-WindowsDriver                               3.0        Dism
                        Cmdlet          Remove-WindowsImage                                3.0        Dism
                        Cmdlet          Remove-WindowsPackage                              3.0        Dism
                        Cmdlet          Remove-WmiObject                                   3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Remove-WSManInstance                               3.0.0.0    Microsoft.WSMan.Management
                        Cmdlet          Rename-Computer                                    3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Rename-Item                                        3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Rename-ItemProperty                                3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Rename-LocalGroup                                  1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          Rename-LocalUser                                   1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          Repair-WindowsImage                                3.0        Dism
                        Cmdlet          Reset-ComputerMachinePassword                      3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Resolve-DnsName                                    1.0.0.0    DnsClient
                        Cmdlet          Resolve-Path                                       3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Restart-Computer                                   3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Restart-Service                                    3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Restore-Computer                                   3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Resume-BitsTransfer                                2.0.0.0    BitsTransfer
                        Cmdlet          Resume-Job                                         3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Resume-ProvisioningSession                         3.0        Provisioning
                        Cmdlet          Resume-Service                                     3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Save-Help                                          3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Save-Package                                       1.0.0.1    PackageManagement
                        Cmdlet          Save-WindowsImage                                  3.0        Dism
                        Cmdlet          Select-Object                                      3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Select-String                                      3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Select-Xml                                         3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Send-DtcDiagnosticTransaction                      1.0.0.0    MsDtc
                        Cmdlet          Send-MailMessage                                   3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Set-Acl                                            3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          Set-Alias                                          3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Set-AppBackgroundTaskResourcePolicy                1.0.0.0    AppBackgroundTask
                        Cmdlet          Set-AppxDefaultVolume                              2.0.0.0    Appx
                        Cmdlet          Set-AppXProvisionedDataFile                        3.0        Dism
                        Cmdlet          Set-AuthenticodeSignature                          3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          Set-BitsTransfer                                   2.0.0.0    BitsTransfer
                        Cmdlet          Set-CertificateAutoEnrollmentPolicy                1.0.0.0    PKI
                        Cmdlet          Set-CimInstance                                    1.0.0.0    CimCmdlets
                        Cmdlet          Set-Clipboard                                      3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Set-Content                                        3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Set-Culture                                        2.0.0.0    International
                        Cmdlet          Set-Date                                           3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Set-DODownloadMode                                 1.0.0.0    DeliveryOptimization
                        Cmdlet          Set-DOPercentageMaxBackgroundBandwidth             1.0.0.0    DeliveryOptimization
                        Cmdlet          Set-DOPercentageMaxForegroundBandwidth             1.0.0.0    DeliveryOptimization
                        Cmdlet          Set-DscLocalConfigurationManager                   1.1        PSDesiredStateConfiguration
                        Cmdlet          Set-ExecutionPolicy                                3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          Set-Item                                           3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Set-ItemProperty                                   3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Set-JobTrigger                                     1.1.0.0    PSScheduledJob
                        Cmdlet          Set-KdsConfiguration                               1.0.0.0    Kds
                        Cmdlet          Set-LocalGroup                                     1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          Set-LocalUser                                      1.0.0.0    Microsoft.PowerShell.LocalAccount
                        Cmdlet          Set-Location                                       3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Set-PackageSource                                  1.0.0.1    PackageManagement
                        Cmdlet          Set-ProcessMitigation                              1.0.11     ProcessMitigations
                        Cmdlet          Set-PSBreakpoint                                   3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Set-PSDebug                                        3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Set-PSReadlineKeyHandler                           1.2        PSReadline
                        Cmdlet          Set-PSReadlineOption                               1.2        PSReadline
                        Cmdlet          Set-PSSessionConfiguration                         3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Set-ScheduledJob                                   1.1.0.0    PSScheduledJob
                        Cmdlet          Set-ScheduledJobOption                             1.1.0.0    PSScheduledJob
                        Cmdlet          Set-SecureBootUEFI                                 2.0.0.0    SecureBoot
                        Cmdlet          Set-Service                                        3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Set-StrictMode                                     3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Set-TimeZone                                       3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Set-TpmOwnerAuth                                   2.0.0.0    TrustedPlatformModule
                        Cmdlet          Set-TraceSource                                    3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Set-Variable                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Set-WinAcceptLanguageFromLanguageListOptOut        2.0.0.0    International
                        Cmdlet          Set-WinCultureFromLanguageListOptOut               2.0.0.0    International
                        Cmdlet          Set-WinDefaultInputMethodOverride                  2.0.0.0    International
                        Cmdlet          Set-WindowsEdition                                 3.0        Dism
                        Cmdlet          Set-WindowsProductKey                              3.0        Dism
                        Cmdlet          Set-WindowsSearchSetting                           1.0.0.0    WindowsSearch
                        Cmdlet          Set-WinHomeLocation                                2.0.0.0    International
                        Cmdlet          Set-WinLanguageBarOption                           2.0.0.0    International
                        Cmdlet          Set-WinSystemLocale                                2.0.0.0    International
                        Cmdlet          Set-WinUILanguageOverride                          2.0.0.0    International
                        Cmdlet          Set-WinUserLanguageList                            2.0.0.0    International
                        Cmdlet          Set-WmiInstance                                    3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Set-WSManInstance                                  3.0.0.0    Microsoft.WSMan.Management
                        Cmdlet          Set-WSManQuickConfig                               3.0.0.0    Microsoft.WSMan.Management
                        Cmdlet          Show-Command                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Show-ControlPanelItem                              3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Show-EventLog                                      3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Show-WindowsDeveloperLicenseRegistration           1.0.0.0    WindowsDeveloperLicense
                        Cmdlet          Sort-Object                                        3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Split-Path                                         3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Split-WindowsImage                                 3.0        Dism
                        Cmdlet          Start-BitsTransfer                                 2.0.0.0    BitsTransfer
                        Cmdlet          Start-DscConfiguration                             1.1        PSDesiredStateConfiguration
                        Cmdlet          Start-DtcDiagnosticResourceManager                 1.0.0.0    MsDtc
                        Cmdlet          Start-Job                                          3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Start-Process                                      3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Start-Service                                      3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Start-Sleep                                        3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Start-Transaction                                  3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Start-Transcript                                   3.0.0.0    Microsoft.PowerShell.Host
                        Cmdlet          Stop-Computer                                      3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Stop-DtcDiagnosticResourceManager                  1.0.0.0    MsDtc
                        Cmdlet          Stop-Job                                           3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Stop-Process                                       3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Stop-Service                                       3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Stop-Transcript                                    3.0.0.0    Microsoft.PowerShell.Host
                        Cmdlet          Suspend-BitsTransfer                               2.0.0.0    BitsTransfer
                        Cmdlet          Suspend-Job                                        3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Suspend-Service                                    3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Switch-Certificate                                 1.0.0.0    PKI
                        Cmdlet          Tee-Object                                         3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Test-Certificate                                   1.0.0.0    PKI
                        Cmdlet          Test-ComputerSecureChannel                         3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Test-Connection                                    3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Test-DscConfiguration                              1.1        PSDesiredStateConfiguration
                        Cmdlet          Test-FileCatalog                                   3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          Test-KdsRootKey                                    1.0.0.0    Kds
                        Cmdlet          Test-ModuleManifest                                3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Test-Path                                          3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Test-PSSessionConfigurationFile                    3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Test-WSMan                                         3.0.0.0    Microsoft.WSMan.Management
                        Cmdlet          Trace-Command                                      3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Unblock-File                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Unblock-Tpm                                        2.0.0.0    TrustedPlatformModule
                        Cmdlet          Undo-DtcDiagnosticTransaction                      1.0.0.0    MsDtc
                        Cmdlet          Undo-Transaction                                   3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Uninstall-Package                                  1.0.0.1    PackageManagement
                        Cmdlet          Uninstall-ProvisioningPackage                      3.0        Provisioning
                        Cmdlet          Uninstall-TrustedProvisioningCertificate           3.0        Provisioning
                        Cmdlet          Unprotect-CmsMessage                               3.0.0.0    Microsoft.PowerShell.Security
                        Cmdlet          Unregister-Event                                   3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Unregister-PackageSource                           1.0.0.1    PackageManagement
                        Cmdlet          Unregister-PSSessionConfiguration                  3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Unregister-ScheduledJob                            1.1.0.0    PSScheduledJob
                        Cmdlet          Unregister-WindowsDeveloperLicense                 1.0.0.0    WindowsDeveloperLicense
                        Cmdlet          Update-FormatData                                  3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Update-Help                                        3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Update-List                                        3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Update-TypeData                                    3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Update-WIMBootEntry                                3.0        Dism
                        Cmdlet          Use-Transaction                                    3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Use-WindowsUnattend                                3.0        Dism
                        Cmdlet          Wait-Debugger                                      3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Wait-Event                                         3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Wait-Job                                           3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Wait-Process                                       3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Where-Object                                       3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Write-Debug                                        3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Write-Error                                        3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Write-EventLog                                     3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Write-Host                                         3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Write-Information                                  3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Write-Output                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Write-Progress                                     3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Write-Verbose                                      3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Write-Warning                                      3.1.0.0    Microsoft.PowerShell.Utility


# retrieve any PS command that includes the string "clear" in its name
PS> Get-Command | Where-Object {$_.name -like "*clear*"}

                        CommandType     Name                                               Version    Source
                        -----------     ----                                               -------    ------
                        Function        Clear-BitLockerAutoUnlock                          1.0.0.0    BitLocker
                        Function        Clear-Disk                                         2.0.0.0    Storage
                        Function        Clear-DnsClientCache                               1.0.0.0    DnsClient
                        Function        Clear-FileStorageTier                              2.0.0.0    Storage
                        Function        Clear-Host
                        Function        Clear-PcsvDeviceLog                                1.0.0.0    PcsvDevice
                        Function        Clear-StorageDiagnosticInfo                        2.0.0.0    Storage
                        Cmdlet          Clear-Content                                      3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Clear-EventLog                                     3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Clear-History                                      3.0.0.0    Microsoft.PowerShell.Core
                        Cmdlet          Clear-Item                                         3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Clear-ItemProperty                                 3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Clear-KdsCache                                     1.0.0.0    Kds
                        Cmdlet          Clear-RecycleBin                                   3.1.0.0    Microsoft.PowerShell.Management
                        Cmdlet          Clear-Tpm                                          2.0.0.0    TrustedPlatformModule
                        Cmdlet          Clear-Variable                                     3.1.0.0    Microsoft.PowerShell.Utility
                        Cmdlet          Clear-WindowsCorruptMountPoint                     3.0        Dism

PS> Get-Command | Where-Object {$_.name -like "*Trusted*"}      # search Name for "Trusted"

                        CommandType     Name                                               Version    Source
                        -----------     ----                                               -------    ------
                        Alias           Add-TrustedProvisioningCertificate                 3.0        Provisioning
                        Alias           Remove-TrustedProvisioningCertificate              3.0        Provisioning
                        Function        Add-VpnConnectionTriggerTrustedNetwork             2.0.0.0    VpnClient
                        Function        Remove-VpnConnectionTriggerTrustedNetwork          2.0.0.0    VpnClient
                        Function        Set-VpnConnectionTriggerTrustedNetwork             2.0.0.0    VpnClient
                        Cmdlet          Get-TrustedProvisioningCertificate                 3.0        Provisioning
                        Cmdlet          Install-TrustedProvisioningCertificate             3.0        Provisioning
                        Cmdlet          Uninstall-TrustedProvisioningCertificate           3.0        Provisioning


PS> Get-Command | Where-Object {$_.source -like "*Trusted*"}    # search Sources for "Trusted"

                        CommandType     Name                                               Version    Source
                        -----------     ----                                               -------    ------
                        Cmdlet          Clear-Tpm                                          2.0.0.0    TrustedPlatformModule
                        Cmdlet          ConvertTo-TpmOwnerAuth                             2.0.0.0    TrustedPlatformModule
                        Cmdlet          Disable-TpmAutoProvisioning                        2.0.0.0    TrustedPlatformModule
                        Cmdlet          Enable-TpmAutoProvisioning                         2.0.0.0    TrustedPlatformModule
                        Cmdlet          Get-Tpm                                            2.0.0.0    TrustedPlatformModule
                        Cmdlet          Get-TpmEndorsementKeyInfo                          2.0.0.0    TrustedPlatformModule
                        Cmdlet          Get-TpmSupportedFeature                            2.0.0.0    TrustedPlatformModule
                        Cmdlet          Import-TpmOwnerAuth                                2.0.0.0    TrustedPlatformModule
                        Cmdlet          Initialize-Tpm                                     2.0.0.0    TrustedPlatformModule
                        Cmdlet          Set-TpmOwnerAuth                                   2.0.0.0    TrustedPlatformModule
                        Cmdlet          Unblock-Tpm                                        2.0.0.0    TrustedPlatformModule


# AUTHOR TIP 
# "Filter left, Format right" = put filter commands to the far left as possible in the pipeline
# then save the filtering, exporting, converting commands for the end 
# ie to limit amount data in the beginning of the search

--------Measuring Objects       # Measure-Object

# excel like functionality
PS> Get-ChildItem -Path "C:\Windows\System32" | Measure-Object 
    
            Count       : 4635
            Average     :
            Sum         :
            Maximum     :
            Minimum     :
            Property    :

----------------Delving Deeper into Measure-Object 

# create csv file with studentgrades.csv

            Lastname,grade
            Abbott,81
            Barclay,77
            Miller,92
            Night,66
            Potter,80
            Singleton,96
            Williams,54
            Zion,90

# build the pipeline
PS> Import-Csv -Path C:\Users\Atul\Desktop\studentgrades.csv | Measure-Object -Property grade -Average -Maximum -Minimum -Sum 

            Count       : 8
            Average     : 79.5
            Sum         : 636
            Maximum     : 96
            Minimum     : 54
            Property    : grade

# to understand how this works --> see help file
PS> Get-Help Measure-Object -Parameter Property 

        -Property <String[]>
            Specifies one or more numeric properties to measure. The default is the Count property of the object.

            Required?                    false
            Position?                    0
            Default value                None
            Accept pipeline input?       False
            Accept wildcard characters?  false

        # note: accept a string value; defaults to performing a count; positional.

# now lets see the data comes out of the Import-Csv part of the pipeline

            PS C:\WINDOWS\system32> Import-Csv -Path C:\Users\Atul\Desktop\studentgrades.csv | Get-Member

               TypeName: System.Management.Automation.PSCustomObject

            Name        MemberType   Definition
            ----        ----------   ----------
            Equals      Method       bool Equals(System.Object obj)
            GetHashCode Method       int GetHashCode()
            GetType     Method       type GetType()
            ToString    Method       string ToString()
            grade       NoteProperty string grade=81
            Lastname    NoteProperty string Lastname=Abbott

# so what is happening? PS dynamically creates a NoteProperty for each column header in the CSV file.

            # create csv file with studentgrades.csv
                        Lastname,grade
                        Abbott,81

# also the data type is string which is compatable with the incoming data that Measure-Object expects


----------------What Measure-Object Is and What It Is Not 

# to list the top 3 grades

            PS C:\WINDOWS\system32> $scv = Import-Csv -Path C:\Users\Atul\Desktop\studentgrades.csv

            PS C:\WINDOWS\system32> $csv = Import-Csv -Path C:\Users\Atul\Desktop\studentgrades.csv
            PS C:\WINDOWS\system32> $csv | Sort-Object -Property score -desc | Select-Object -First 3
            PS C:\WINDOWS\system32> $csv

            Lastname  grade
            --------  -----
            Abbott    81
            Barclay   77
            Miller    92
            Night     66
            Potter    80
            Singleton 96
            Williams  54
            Zion      90


            PS C:\WINDOWS\system32> $csv | Sort-Object -Property score -desc | Select-Object -First 3

            Lastname  grade
            --------  -----
            Singleton 96
            Potter    80        # Error - should me Miller 92
            Zion      90


# can use the Measure-Object command to calculate text file statistics.
# lipsum.com for dummy data
https://lipsum.com

# created boilerplateLipsum.txt with 2 paragraphs
# create pipeline and filter text for summary statistics
PS> Get-Content -Path C:\Users\Atul\Desktop\boilerplateLipsum.txt | Measure-Object -Word -Line -Character

--------Summary Q&A Workshop

# PS support If-Then conditional logic? yes.

# created Notepad Untitled2.ps1 file script
# PS natived pwd to Desktop
# echo Untitled2.ps1        # to verify file existence
# cat Untitled2.ps1         # to verify code

        $srvservice = Get-Service -Name Server                          # define variable to hold object in memory
        $srvservice                                                     # echo back contents for reference
        if ($srvservice.Status -eq "Stopped")                           # use () for if expression. All expressions evaluate to Boolean.
            { Write-Host "Server service is stopped. Check it out!" }   # action logic in {} curly braces
        else                                                            # Write-Host cmdlet writes general output to screen
            {Write-Host "Server service is running or in unknown state."}

# Book notes
# can use line 5 --> else or else if

# opened from Terminal Command line Notepad and file. F5.

                        PS> C:\Users\Atul\Desktop\Untitled2.ps1

                        Status   Name               DisplayName                           
                        ------   ----               -----------                           
                        Running  LanmanServer       Server                                
                        Server service is running or in unknown state.

# to Descend 1st column and Ascend 2nd col 
# to Ascend 1st column and Descend 2nd col
PS> Get-Service | Sort-Object -Property @{Expression = "Status"; Descending = $True}, @{Expression = "DisplayName"; Descending = $False}

# what does ? command mean? use Help or Get-Alias
# all of these work:

PS> Get-Alias       # list all alias
PS> Get-Help "?"    # list "?" alias as well
PS> Help Comparision 
PS> Help about_Comparison
PS> Help about_comparison
PS> Help about_comparison_opertor
PS> Help about_comparison_opertors
PS> Help about_comparison_opertors -full


# explore hotfix

PS> Help hotfix 
PS> Help hotfixes 
PS> Help hotfix -Online 
PS> Get-Help hotfix -Online 


----------------Quiz

PS> $events1 = Get-Eventlog -LogName System -Newest 1000
PS> $events1 | Group-Object -Property source -noelement | Sort-Object -Property count -Descending 

PS> $events2 = Get-Eventlog -LogName System -Newest 1000
PS> $events2 | Sort-Object -Property count -Descending | Group-Object -Property source -noelement

# order of opertions matter
# $events1 is 1st grouping, 2nd sorting 
# $events2 is 1st sorting, 2nd grouping

#  purpose of multiplication inside statement --> convert output from bytes to KB
PS> Get-Process | Where-Object { $_.WorkingSet -gt 25000*1024 } 
# WorkingSet property is given in bytes. Windows admin folks tend to think in KB, MB, GB.
# so here convert from bytes to KB by x1024

# uses -First and/or -Last parameters to capture head/tail of PS output
PS> Select-Object -First  10
PS> Select-Object -Last 10
# Where-Object and Sort-Object do not use those as parameters
PS> Get-Process | Sort-Object -Property WorkingSet -Descending | Select-Object -First 3
PS> Get-Process | Sort-Object -Property WorkingSet -Descending | Select-Object -First 10
PS> Get-Process | Sort-Object -Property WorkingSet -Descending | Select-Object -Last 10


===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Part 3 Extending the Reach of Windows PowerShell

===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 8 Managing Windows PowerShell Providers

# accessing common data stores on the computer --> the file system, certificate store, Registry
# and others all by using PS only.

--------What Are Providers?
# PSDrives allow us access to Providers
# Providers = is an adapter that gives us access to a particular data store, similar to a USB giving access to files.

                PS> Get-PSProvider

                Name                 Capabilities                                      Drives
                ----                 ------------                                      ------
                Registry             ShouldProcess, Transactions                       {HKLM, HKCU}             #1
                Alias                ShouldProcess                                     {Alias}                  #2
                Environment          ShouldProcess                                     {Env}                    #3 
                FileSystem           Filter, ShouldProcess, Credentials                {C, D}                   #4
                Function             ShouldProcess                                     {Function}               #5
                Variable             ShouldProcess                                     {Variable}               #6

                WSMan                                                                  {WSMan}                  #7
                SqlServer            Credentials                                       {SQLSERVER}              #8
                ActiveDirectory      Include, Exclude, Filter, Should...               {AD}                     #9


                # ShouldProcess supports -Confirm and -WhatIf parameters
                # Credentials supports the use alternate credentials are runtime
                # Transactions supports atomic transactions, where one or more PS statements succeed or fail together
                # Filter, Include, Exclude enables you to granularly manipulate the provider's content
                # Active Directory Domain Services (ADDS) server features
                # SQL Server relational database management system (RDBMS)
                             R          D   B    M          S       RDBMS


                PS> Get-PSProvider | Select-Object -Property name, drives       # why use Select-Object here?

                Name        Drives
                ----        ------
                Registry    {HKLM, HKCU} 
                Alias       {Alias}         # Alias provider stores all the aliases that are defined on the local system
                Environment {Env}           # encompasses all environment variables
                FileSystem  {C, D}          # opens up the File system to us, etc
                Function    {Function}      
                Variable    {Variable}      

                # why use Select-Object here? the output has only 3 properties, so why bother?
                # AUTHOR wanted to show/expose properties that DIRECTLY relate to what we are learning
                # so shown two properties instead of three. This shows how to take advantage of filtering
                # whenever its possible/available.

----------------Functions Provided by a Provider
# PSProvider makes a particular data store available to you, the user as if they are filesystems.
# PSProvider = entry point
# each PSProvider has its own capability --> -File and -Directory parameters that may NOT be supported by the Function provider.
# so work with each over time to uderstand which particular parameters are available to which Providers.
# PSDrive = actual data store

--------Introduction to Default PSDrives

# Drives = entry point into the particular data store

# Learn to navigate among different providers
PS> Set-Location Variable:                  # this moves pwd to Variable directory
PSVariable> dir
PS> Set-Location C:                         # takes us back to C:\Windows\system32
                                            sl -> Set-Location
PS> sl C:
PS> 


PS> Get-PSDrive         # notice FileSystem and Registry are listed more than once

                Name           Used (GB)     Free (GB) Provider      Root                                               CurrentLocation
                ----           ---------     --------- --------      ----                                               ---------------
                Alias                                  Alias
                C                 189.76        266.67 FileSystem    C:\                                               WINDOWS\system32
                Cert                                   Certificate   \
                D                                      FileSystem    D:\
                Env                                    Environment
                Function                               Function
                HKCU                                   Registry      HKEY_CURRENT_USER
                HKLM                                   Registry      HKEY_LOCAL_MACHINE
                Variable                               Variable
                WSMan                                  WSMan


----------------A Familiar Navigation System

# use a : when changing "context" (ie pwd) to a PSDrive

dir # is an alias for Get-ChildItem. 
Get-ChildItem
ls  # also works

PS> ls alias        # error
PS> ls alias:       # valid, works


PS> ls alias:

                    CommandType     Name                                               Version    Source
                    -----------     ----                                               -------    ------
                    Alias           % -> ForEach-Object
                    Alias           ? -> Where-Object
                    Alias           ac -> Add-Content
                    Alias           asnp -> Add-PSSnapin
                    Alias           cat -> Get-Content
                    Alias           cd -> Set-Location
                    Alias           CFS -> ConvertFrom-String                          3.1.0.0    Microsoft.PowerShell.Utility
                    Alias           chdir -> Set-Location
                    Alias           clc -> Clear-Content
                    Alias           clear -> Clear-Host
                    Alias           clhy -> Clear-History
                    Alias           cli -> Clear-Item
                    Alias           clp -> Clear-ItemProperty
                    Alias           cls -> Clear-Host
                    Alias           clv -> Clear-Variable
                    Alias           cnsn -> Connect-PSSession
                    Alias           compare -> Compare-Object
                    Alias           copy -> Copy-Item
                    Alias           cp -> Copy-Item
                    Alias           cpi -> Copy-Item
                    Alias           cpp -> Copy-ItemProperty
                    Alias           curl -> Invoke-WebRequest
                    Alias           cvpa -> Convert-Path
                    Alias           dbp -> Disable-PSBreakpoint
                    Alias           del -> Remove-Item
                    Alias           diff -> Compare-Object
                    Alias           dir -> Get-ChildItem
                    Alias           dnsn -> Disconnect-PSSession
                    Alias           ebp -> Enable-PSBreakpoint
                    Alias           echo -> Write-Output
                    Alias           epal -> Export-Alias
                    Alias           epcsv -> Export-Csv
                    Alias           epsn -> Export-PSSession
                    Alias           erase -> Remove-Item
                    Alias           etsn -> Enter-PSSession
                    Alias           exsn -> Exit-PSSession
                    Alias           fc -> Format-Custom
                    Alias           fhx -> Format-Hex                                  3.1.0.0    Microsoft.PowerShell.Utility
                    Alias           fl -> Format-List
                    Alias           foreach -> ForEach-Object
                    Alias           ft -> Format-Table
                    Alias           fw -> Format-Wide
                    Alias           gal -> Get-Alias
                    Alias           gbp -> Get-PSBreakpoint
                    Alias           gc -> Get-Content
                    Alias           gcb -> Get-Clipboard                               3.1.0.0    Microsoft.PowerShell.Management
                    Alias           gci -> Get-ChildItem
                    Alias           gcm -> Get-Command
                    Alias           gcs -> Get-PSCallStack
                    Alias           gdr -> Get-PSDrive
                    Alias           ghy -> Get-History
                    Alias           gi -> Get-Item
                    Alias           gin -> Get-ComputerInfo                            3.1.0.0    Microsoft.PowerShell.Management
                    Alias           gjb -> Get-Job
                    Alias           gl -> Get-Location
                    Alias           gm -> Get-Member
                    Alias           gmo -> Get-Module
                    Alias           gp -> Get-ItemProperty
                    Alias           gps -> Get-Process
                    Alias           gpv -> Get-ItemPropertyValue
                    Alias           group -> Group-Object
                    Alias           gsn -> Get-PSSession
                    Alias           gsnp -> Get-PSSnapin
                    Alias           gsv -> Get-Service
                    Alias           gtz -> Get-TimeZone                                3.1.0.0    Microsoft.PowerShell.Management
                    Alias           gu -> Get-Unique
                    Alias           gv -> Get-Variable
                    Alias           gwmi -> Get-WmiObject
                    Alias           h -> Get-History
                    Alias           history -> Get-History
                    Alias           icm -> Invoke-Command
                    Alias           iex -> Invoke-Expression
                    Alias           ihy -> Invoke-History
                    Alias           ii -> Invoke-Item
                    Alias           ipal -> Import-Alias
                    Alias           ipcsv -> Import-Csv
                    Alias           ipmo -> Import-Module
                    Alias           ipsn -> Import-PSSession
                    Alias           irm -> Invoke-RestMethod
                    Alias           ise -> powershell_ise.exe
                    Alias           iwmi -> Invoke-WmiMethod
                    Alias           iwr -> Invoke-WebRequest
                    Alias           kill -> Stop-Process
                    Alias           lp -> Out-Printer
                    Alias           ls -> Get-ChildItem
                    Alias           man -> help
                    Alias           md -> mkdir
                    Alias           measure -> Measure-Object
                    Alias           mi -> Move-Item
                    Alias           mount -> New-PSDrive
                    Alias           move -> Move-Item
                    Alias           mp -> Move-ItemProperty
                    Alias           mv -> Move-Item
                    Alias           nal -> New-Alias
                    Alias           ndr -> New-PSDrive
                    Alias           ni -> New-Item
                    Alias           nmo -> New-Module
                    Alias           npssc -> New-PSSessionConfigurationFile
                    Alias           nsn -> New-PSSession
                    Alias           nv -> New-Variable
                    Alias           ogv -> Out-GridView
                    Alias           oh -> Out-Host
                    Alias           popd -> Pop-Location
                    Alias           ps -> Get-Process
                    Alias           pushd -> Push-Location
                    Alias           pwd -> Get-Location
                    Alias           r -> Invoke-History
                    Alias           rbp -> Remove-PSBreakpoint
                    Alias           rcjb -> Receive-Job
                    Alias           rcsn -> Receive-PSSession
                    Alias           rd -> Remove-Item
                    Alias           rdr -> Remove-PSDrive
                    Alias           ren -> Rename-Item
                    Alias           ri -> Remove-Item
                    Alias           rjb -> Remove-Job
                    Alias           rm -> Remove-Item
                    Alias           rmdir -> Remove-Item
                    Alias           rmo -> Remove-Module
                    Alias           rni -> Rename-Item
                    Alias           rnp -> Rename-ItemProperty
                    Alias           rp -> Remove-ItemProperty
                    Alias           rsn -> Remove-PSSession
                    Alias           rsnp -> Remove-PSSnapin
                    Alias           rujb -> Resume-Job
                    Alias           rv -> Remove-Variable
                    Alias           rvpa -> Resolve-Path
                    Alias           rwmi -> Remove-WmiObject
                    Alias           sajb -> Start-Job
                    Alias           sal -> Set-Alias
                    Alias           saps -> Start-Process
                    Alias           sasv -> Start-Service
                    Alias           sbp -> Set-PSBreakpoint
                    Alias           sc -> Set-Content
                    Alias           scb -> Set-Clipboard                               3.1.0.0    Microsoft.PowerShell.Management
                    Alias           select -> Select-Object
                    Alias           set -> Set-Variable
                    Alias           shcm -> Show-Command
                    Alias           si -> Set-Item
                    Alias           sl -> Set-Location
                    Alias           sleep -> Start-Sleep
                    Alias           sls -> Select-String
                    Alias           sort -> Sort-Object
                    Alias           sp -> Set-ItemProperty
                    Alias           spjb -> Stop-Job
                    Alias           spps -> Stop-Process
                    Alias           spsv -> Stop-Service
                    Alias           start -> Start-Process
                    Alias           stz -> Set-TimeZone                                3.1.0.0    Microsoft.PowerShell.Management
                    Alias           sujb -> Suspend-Job
                    Alias           sv -> Set-Variable
                    Alias           swmi -> Set-WmiInstance
                    Alias           tee -> Tee-Object
                    Alias           trcm -> Trace-Command
                    Alias           type -> Get-Content
                    Alias           wget -> Invoke-WebRequest
                    Alias           where -> Where-Object
                    Alias           wjb -> Wait-Job
                    Alias           write -> Write-Output


----------------What is an Item

# everything is an item (ie a variable, directory, file, or a Registry value)

PS> Get-Command -Noun *item*

                    CommandType     Name                                               Version    Source
                    -----------     ----                                               -------    ------
                    Function        Get-DAEntryPointTableItem                          1.0.0.0    DirectAccessClientComponents
                    Function        Get-TestDriveItem                                  3.4.0      Pester
                    Function        New-DAEntryPointTableItem                          1.0.0.0    DirectAccessClientComponents
                    Function        Remove-DAEntryPointTableItem                       1.0.0.0    DirectAccessClientComponents
                    Function        Rename-DAEntryPointTableItem                       1.0.0.0    DirectAccessClientComponents
                    Function        Reset-DAEntryPointTableItem                        1.0.0.0    DirectAccessClientComponents
                    Function        Set-DAEntryPointTableItem                          1.0.0.0    DirectAccessClientComponents
                    Cmdlet          Clear-Item                                         3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Clear-ItemProperty                                 3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Copy-Item                                          3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Copy-ItemProperty                                  3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Get-ChildItem                                      3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Get-ControlPanelItem                               3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Get-Item                                           3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Get-ItemProperty                                   3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Get-ItemPropertyValue                              3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Invoke-Item                                        3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Move-Item                                          3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Move-ItemProperty                                  3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          New-Item                                           3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          New-ItemProperty                                   3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Remove-Item                                        3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Remove-ItemProperty                                3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Rename-Item                                        3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Rename-ItemProperty                                3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Set-Item                                           3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Set-ItemProperty                                   3.1.0.0    Microsoft.PowerShell.Management
                    Cmdlet          Show-ControlPanelItem                              3.1.0.0    Microsoft.PowerShell.Management


PS> Get-Command -Noun *item* | Where-Object { $_.CommandType -eq "cmdlet" }
# returns only the Cmdlet results


--------Using the FileSystem Provider

# used to see actual drives on your system
PS> Get-PSDrive -PSProvider FileSystem 
# under the hood, these are called "mount points" C: and D: which actually correspond to functions.


PS C:\WINDOWS\system32> Set-Location Function:
PS> Set-Location Function:          # both lines are the same and gives the following result
PS Function:>

                        PS Function:> Get-ChildItem
                        PS Function:> Get-ChildItem -Path Function # both work and give same results
                                                                   # "to recast the previous example"

                        CommandType     Name                                               Version    Source
                        -----------     ----                                               -------    ------
                        Function        A:
                        Function        B:
                        Function        C:
                        Function        cd..
                        Function        cd\
                        Function        Clear-Host
                        Function        ConvertFrom-SddlString                             3.1.0.0    Microsoft.PowerShell.Utility
                        Function        D:
                        Function        E:
                        Function        F:
                        Function        Format-Hex                                         3.1.0.0    Microsoft.PowerShell.Utility
                        Function        G:
                        Function        Get-FileHash                                       3.1.0.0    Microsoft.PowerShell.Utility
                        Function        Get-Verb
                        Function        H:
                        Function        help
                        Function        I:
                        Function        Import-PowerShellDataFile                          3.1.0.0    Microsoft.PowerShell.Utility
                        Function        ImportSystemModules
                        Function        J:
                        Function        K:
                        Function        L:
                        Function        M:
                        Function        mkdir
                        Function        more
                        Function        N:
                        Function        New-Guid                                           3.1.0.0    Microsoft.PowerShell.Utility
                        Function        New-TemporaryFile                                  3.1.0.0    Microsoft.PowerShell.Utility
                        Function        O:
                        Function        oss
                        Function        P:
                        Function        Pause
                        Function        prompt
                        Function        PSConsoleHostReadline                              1.2        PSReadline
                        Function        Q:
                        Function        R:
                        Function        S:
                        Function        T:
                        Function        TabExpansion2
                        Function        U:
                        Function        V:
                        Function        W:
                        Function        X:
                        Function        Y:
                        Function        Z:


----------------Working with Get-ChildItem

#started at Home location
PS> Set-Location C:
PS C:Windows\system32> Set-Location C:
# does not work
PS C:Windows\system32> Set-Location Function:
PS Function:> Set-Location C:
PS C:Windows\system32> Set-Location C:
PS C:Windows\system32> cd ..
PS C:Windows> cd ..
PS C:> Get-ChildItem

                        PS C:\> Get-ChildItem

                            Directory: C:\

                        Mode                LastWriteTime         Length Name
                        ----                -------------         ------ ----
                        d-----        1/22/2014   7:57 PM                Apps
                        d-----        2/24/2019  12:53 PM                Aptana
                        d-----        4/15/2015   7:29 AM                dell
                        d-----        1/22/2014   6:34 PM                Drivers
                        d-----         9/9/2018   3:11 PM                HP Universal Print D
                        d-----        9/17/2015   5:09 PM                Intel
                        d-----        9/10/2015   1:39 AM                Logs
                        d-----        4/11/2018   7:38 PM                PerfLogs
                        d-r---        1/26/2019   9:18 PM                Program Files
                        d-r---        1/26/2019   9:16 PM                Program Files (x86)
                        d-----        5/15/2018  10:54 PM                Python34
                        d-----        5/14/2014  11:35 PM                Ruby193
                        d-----        1/27/2016  10:14 AM                spark
                        d-----        1/22/2014   7:56 PM                Temp
                        d-r---       12/13/2018   5:46 PM                Users
                        d-----         2/8/2019   8:16 PM                Windows
                        -a----         2/9/2019   2:28 PM          10522 events.txt
                        -a----         2/9/2019   2:30 PM          10522 events20090209.txt
                        -a----        11/2/2015   5:28 AM            383 ftconfig.ini
                        -a----        5/14/2014  12:20 AM              0 Recovery.txt


# to examine the object's properties and methods
PS C:> Get-ChildItem | Get-Member    # returns two objects = DirectoryInfo and FileInfo

                           TypeName: System.IO.DirectoryInfo
                           TypeName: System.IO.FileInfo

# to retrieve all objects that have the same Name prog in them
PS C:> Get-ChildItem *prog*
# this is exactly what Cmd.exe does. But here we are dealing with positional parameters
# so look at the Help file
PS C:> Get-Help Get-ChildItem -Full 
# notice that -Path is the first parameter, and is technically optional.

            NAME
                Get-ChildItem

            SYNOPSIS
                Gets the files and folders in a file system drive.

            SYNTAX
                Get-ChildItem [[-Filter] <String>] [-Attributes {ReadOnly | Hidden | System | Directory | Archive | Device |
                Normal | Temporary | SparseFile | ReparsePoint | Compressed | Offline | NotContentIndexed | Encrypted |
                IntegrityStream | NoScrubData}] [-Depth <UInt32>] [-Directory] [-Exclude <String[]>] [-File] [-Force] [-Hidden]
                [-Include <String[]>] -LiteralPath <String[]> [-Name] [-ReadOnly] [-Recurse] [-System] [-UseTransaction]
                [<CommonParameters>]

                Get-ChildItem [[-Path] <String[]>] [[-Filter] <String>] [-Attributes {ReadOnly | Hidden | System | Directory |
                Archive | Device | Normal | Temporary | SparseFile | ReparsePoint | Compressed | Offline | NotContentIndexed |
                Encrypted | IntegrityStream | NoScrubData}] [-Depth <UInt32>] [-Directory] [-Exclude <String[]>] [-File] [-Force]
                [-Hidden] [-Include <String[]>] [-Name] [-ReadOnly] [-Recurse] [-System] [-UseTransaction] [<CommonParameters>]

                Get-ChildItem [-Attributes <FileAttributes]>] [-Directory] [-File] [-Force] [-Hidden] [-ReadOnly] [-System]
                [-UseTransaction] [<CommonParameters>]

            DESCRIPTION
                The Get-ChildItem cmdlet gets the items in one or more specified locations. If the item is a container, it gets
                the items inside the container, known as child items. You can use the Recurse parameter to get items in all child



            -Path <String[]>
                 Specifies a path to one or more locations. Wildcards are permitted. The default location is the current
                 directory (.).

                 Required?                    false
                 Position?                    0
                 Default value                Current directory
                 Accept pipeline input?       True (ByPropertyName, ByValue)
                 Accept wildcard characters?  false


# so by default, Get-ChildItem returns a listing of objects within the current working directory (pwd).
# so lets pass a path to the command

PS C:> Get-Help Get-ChildItem -Full
# returns the -Filter parameter and -Filter accepts wildcards? true.

# so we could have gotten these results this way as well
PS C:> Get-ChildItem | Where-Object { $_.Name -like "*prog*" }
# gives same output as before

                Directory: C:\

            Mode                LastWriteTime         Length Name
            ----                -------------         ------ ----
            d-r---        1/26/2019   9:18 PM                Program Files
            d-r---        1/26/2019   9:16 PM                Program Files (x86)


----------------Try It Yourself

# NOTE - ATUL used / instead of \ to avoid PINK HIGHLIGHTS
# use FileSystem to create and modify directoris and files

# Practice file system heirarachy 
    
    practice
    | --------------- alpha.txt 
    
    | --- folder1
            | ------- beta.txt 
    
    | --- folder2 
            | ------- gamma.txt 
    
# 1) set pwd to root of drive C
PSC:/Windows/system32> Set-Location C:      

# 2) all file system objects are items, use New-Item to build out our directories
PSC:> New-Item -Name "practice" -Type Directory 

# use -Path parameter to create other folders without changing our pwd
PSC:> New-Item -Path "C:/practice" -Name "folder1" -Type Directory 
PSC:> New-Item -Path "C:/practice" -Name "folder2" -Type Directory 

# 3) use PS> dir * to fetch listing of directories only but in PS this does not work

PSC:> dir                                                # or
PSC:> ls                                                 # or
PSC:> Get-ChildItem | Where-Object {$_.psiscontainer}    #same

# set location back to C
PSC:> cd ..  #or
PSC:> Set-Location C:/practice 

# 4) create new empty files
PSC/practice> New-Item -Name "alpha.txt" -Type File 
PSC:> cd ..
PSC:> New-Item -Path C:/practice/folder1 -Name "beta.txt" -Type File 
PSC:> New-Item -Path C:/practice/folder2 -Name "gamma.txt" -Type File 

# now lets add content to the text files
# ATUL added content on my own to beta.txt file
PSC:/practice/folder1> Notepad beta.txt
# added text "testing this file". Then saved
PSC:/practice/folder1> cat beta.txt 

            testing this file # output works

# 5) 
PSC:/practice> Add-Content "alpha.txt" -Value "This is some sample data and text."
PSC:/practice> cat alpha.txt                # valid and works
# or try this
PSC:/practice> Get-Content "alpha.txt"      # valid and works

# 6) from main folder practice, take text from text file in folder1 and add it into text file inside folder2
PSC:/practice> Add-Content "C:/practice/folder2/gamma.txt" -Value (Get-Content "C:/practice/folder1/beta.txt")

# now from parent folder, reach into folder 2 and verify it exists
PSC:/practice> cd ..
PSC:> Get-Content -Path "C:/practice/folder2/gamma.txt"     # output works
PSC:> Get-Content -Path "C:/practice/folder1/beta.txt"      # output works

# 7) add more data to each text file while sitting in parent folder
PSC:> Add-Content "alpha.txt" -Value "Here is some new data. Needham town." | Notepad alpha.txt 

# 8) clean up your environment
PSC:> Remove-Item -Path "C:/practice/folder1/beta.txt" -Force

# to delete directories
#       Set-Location to root C
#       delete entire practice folder and file hierarchy but be careful
#       -Recurse parameter is helpful b/c it moves thru all subdirectories in the current path
PSC:> Remove-Item -Path "C:/practice" -Recurse 

# Additional --> Order of Arithmetic Operations using ()
# place () around expression that we want to process first

# example
# have a text file containing a list of server hostnames. Want to obtain a listing from them all by using -ComputerName parameter
# so use PS to retrieve the server name list before passing the data as values to -ComputerName
Get-Service -ComputerName (Get-Content "D:/servernames.txt")
                2nd function                1st function 


--------Using the Alias Provider

# using PS commands that are devoted to aliases
PS> Get-Command -Noun -alias            # gives long list


----------------Using Alias PSDrive


PS> Set-Location Alias:             # gives output list all aliases
PS Alias>

# Note run Update-Help -Force       # to ensure you have all the MOST recent updates
# see these for this hour
PS> Help about_Aliases
PS> Help about_Functions
PS> Help about_Providers
PS> Help about_Variables 


--------Using the Registry Provider

# Windows registry = configuration database for Windows.
# PS splits the PSDrives along into two = HKEY_LOCAL_MACHINE and HKEY_CURRENT_USER

PS> Get-PSDrive -PSProvider Registry | Select-Object -Property name, root

            Name Root
            ---- ----
            HKCU HKEY_CURRENT_USER
            HKLM HKEY_LOCAL_MACHINE

# hypo = retrieving registrey values.

----------------Retrieving Registry Values 

# hypo continued --> need to view the value and associated properties for 
DiasablePreviewDesktop DWORD Registry value # that is present in Windows 8.1. This value
# disables the Aero Peek GUI feature when set to 1, exists in the following path:
# HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced

# so 1st shift location to the proper key within the HKCU hive:
PS> Set-Location HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced

# now watch out, some Providers behave differently than others.
# run Get-ChildItem and see what happens

PS HKCU...> Get-ChildItem      # returns Name with two listings People and Xaml
# try this
PS HKCU...> Get-Item           # returns error, use Control C
# thy this
PS HKCU...> Get-Item .         # works
# why works? we needed to specify a positional parameter for -Path 
# how to specify this? either by position or by value
# so use a . character to denote the current directory
# and then it works

             Hive: HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\

            Name                           Property
            ----                           --------
            Advanced                       Start_SearchFiles               : 2
                                           ServerAdminUI                   : 0
                                           Hidden                          : 1
                                           ShowCompColor                   : 1
                                           HideFileExt                     : 0
                                           DontPrettyPath                  : 0
                                           ShowInfoTip                     : 1
                                           HideIcons                       : 0
                                           MapNetDrvBtn                    : 0
                                           WebView                         : 1
                                           ...

# use the Get-ItemProperty cmdlet to retrieve Registry key or value properties
# PS HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced> Get-ItemProperty -Path . -Name DisablePreviewDeskt

            PS HKCU...> Get-ItemProperty -Path . -Name DisablePreviewDesktop 

            DisablePreviewDesktop : 1       # Disabled is on = 1
            PSPath                : Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
            PSParentPath          : Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer
            PSChildName           : Advanced
            PSDrive               : HKCU
            PSProvider            : Microsoft.PowerShell.Core\Registry


----------------Editing Registry Values 

# Aero Peek value is 1 for Disabled.
PS HKCU...> Get-ItemProperty -Path . -Name DisablePreviewDesktop
# now enable that value to 0
PS HKCU...> Set-ItemProperty -Path . -Name DisablePreviewDesktop -Value 0
# now verify that the change took
PS HKCU...> Get-ItemProperty -Path . -Name DisablePreviewDesktop
# yes it worked


            PS HKCU...> Get-ItemProperty -Path . -Name DisablePreviewDesktop

            DisablePreviewDesktop : 1
            PSPath                : Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion
                                    \Explorer\Advanced
            PSParentPath          : Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion
                                    \Explorer
            PSChildName           : Advanced
            PSDrive               : HKCU
            PSProvider            : Microsoft.PowerShell.Core\Registry


            PS HKCU...> Set-ItemProperty -Path . -Name DisablePreviewDesktop -Value 0
            PS HKCU...> Get-ItemProperty -Path . -Name DisablePreviewDesktop


            DisablePreviewDesktop : 0
            PSPath                : Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion
                                    \Explorer\Advanced
            PSParentPath          : Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion
                                    \Explorer
            PSChildName           : Advanced
            PSDrive               : HKCU
            PSProvider            : Microsoft.PowerShell.Core\Registry


--------Using Extended Providers

# run PS> Get-PSProvider to see the following properties Name, Capabilities, Drives.

----------------Active Directory Provider 

# when you promote a Windows Server computer to be an AD DS domain controller, you will have 
# access to the AD PSDrive. To make the provider available, you will need to load the
# ActiveDirectory PowerShell module;
# ASSUMES YOU HAVE A SERVER

PS> Import-Module -Name ActiveDirectory
# this does NOT WORK on my computer.

# when you promote a Windows Server computer to be an "AD DS domain controller", you then get access
# to the AD PSDrive.
# To make the provider available, you need to load the ActiveDirectory PowerShell module:
PS> Import-Module -Name ActiveDirectory

# PS allows for autoloading whenever you invoke a command contained within a locally available module.

# as an experienced AD administrator, Active Directory is divided into the domain, scheme, and configuration partitions.
# By using Item commands, we can view and edit the underlying Active Directory objects and properties.

----------------SQL Server Provider 

# in SQL Server 2012, the main PowerShell module is called SQLPS
Import-Module -Name sqlps 

# using Set-Location, we can dive into a SQL Server instance and potentially interact with database
# objects 

PS SQLSERVER:\SQL\dc2013\default\Databases\SWW_Logging\Views> dir

Schema                      Name                            Created 
-------                     -------                         -------
dbo                         AccessServicesMonitoring        10/14/2014  9:40am
dbo                         AccessServicesResourceConsumpt  10/14/2014  9:40am
dbo                         AccessServicesResponseTimes     10/14/2014  9:40am
dbo                         AppStatistics                   10/14/2014  9:40am
dbo                         AppUsage                        10/14/2014  9:40am
dbo                         BandwidthUsage                  10/14/2014  9:40am
dbo                         ClientServiceActionUsage        10/14/2014  9:40am
dbo                         ClientServiceRequestUsage       10/14/2014  9:40am
dbo                         EDU_OperationsStatsUsage        10/14/2014  9:40am
dbo                         ExportUsage                     10/14/2014  9:40am


--------Summary Q&A Workshop

----------------Summary
# you know that the provider system is what undergrids the PowerShell runtime environment.
# you always work in the context of a provider, whether you know it or not.

----------------Q&A

Set-Location        # sets the pwd
Push-Location       # can push the pwd to an in-memory stack
Pop-Location        # can then return to our original location by invoking Pop-Location

alias Push-Location     pushd       # used in scripting a lot 
alias Pop-Location      popd        # used in scripting a lot

#example
PS C:/> Push-Location windows 
PS C:/windows> cd system32
PS C:/windows/system32> Pop-Location 
PS C:/>

# Authoring PowerShell artifacts requires .NET language such as C# or VB (Visual Basic)

----------------Quiz

# whic is valid?
PS> Get-PSProvider -PSDrive FileSystem      # error
PS> Get-PSDrive -PSProvider FileSystem      # valid 
PS> Get-Item -Path FileSystem               # error

PS> Get-PSDrive -PSProvider FileSystem      # valid

            PS C:\WINDOWS\system32> Get-PSDrive -PSProvider FileSystem

            Name           Used (GB)     Free (GB) Provider      Root                    CurrentLocation
            ----           ---------     --------- --------      ----                    ---------------
            C                 191.00        265.44 FileSystem    C:\                     WINDOWS\system32
            D                                      FileSystem    D:\


# Alias PSProvider allows you to view, create, edit or delete alias definitions
# how? by manipulating data in the Alias PSDrive.
# Author however, recommends that you instead employ the dedicated alias cmdlets to perform these actions.

# Which of the following PSProviders stores the value for $host   ?
# --> Variable
# Note
# all PS variables start with $
# $host is a variable that stores the value of the current PS host application. So this variable and its
# associated data are located with the Variable: drive

===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 9 Formatting, Exporting, and Converting Windows PowerShell Output

rules
"filter left, format right"
# you are always in a pipeline, whether you know it or not.
# you waste more system and network resources than you need when you push more than needed objects through a pipeline
# PS formatting commands "de-serialize" output which renders data useless unless ita at the end of the pipeline.
    # "PS formatting subsystem" decides this stuff

--------How the PowerShell Formatting Subsystem Works

PS> Get-Command -Verb out*

            CommandType     Name                                               Version    Source
            -----------     ----                                               -------    ------
            Cmdlet          Out-Default                                        3.0.0.0    Microsoft.PowerShell.Core    <<<<<<<<<<<<<<<<
            Cmdlet          Out-File                                           3.1.0.0    Microsoft.PowerShell.Utility
            Cmdlet          Out-GridView                                       3.1.0.0    Microsoft.PowerShell.Utility
            Cmdlet          Out-Host                                           3.0.0.0    Microsoft.PowerShell.Core    <<<<<<<<<<<<<<<<
            Cmdlet          Out-Null                                           3.0.0.0    Microsoft.PowerShell.Core
            Cmdlet          Out-Printer                                        3.1.0.0    Microsoft.PowerShell.Utility
            Cmdlet          Out-String                                         3.1.0.0    Microsoft.PowerShell.Utility

# cmdlet Out-Default
# cmdlet Out-Host 
# the content we see in the PS host application is the result of PS code being "handed off" to 
# the internal formatting system via Out-Default and then Out-Host
# lets begin by seeing Get-Service

PS> Get-Service

            Status   Name               DisplayName
            ------   ----               -----------
            Running  AdobeARMservice    Adobe Acrobat Update Service
            Stopped  AJRouter           AllJoyn Router Service
            Stopped  ALG                Application Layer Gateway Service
            Stopped  AppIDSvc           Application Identity
            Running  Appinfo            Application Information
            Running  Apple Mobile De... Apple Mobile Device Service
            Stopped  AppReadiness       App Readiness
            ...
# PS displays only Status, Name, DisplayName by default. Output viewed as table view (not list view).

# output is identical. These represent the END of the pipeline.
PS> Get-Service
PS> Get-Service | Out-Default 
PS> Get-Service | Format-Table
PS> Get-Service | Fprmat-Table | Out-Host
PS> Get-Service | Out-Host 
# so here, END of the pipeline = cmdlet accepts PSObjects as input but cmdlet has NO output.s

                  Out-Default
                  # this cmdlet sends output to the default formatter and the default output cmdlet
                  # thus Out-Default cmdlet has NO effect on formattig or output of Windows PS commands.
                  # It is simply a PLACEHOLDER that lets you write your own Out-Default function or cmdlet.

----------------Digging Deeper 
# so everything you put into PS pipelines runs through Out-Default unless you override by specifying
# another Out- option.
# PS uses an interal formatting subsystem to determine which view to present your output, which properties to display, etc.

# SECRET SAUCE to PS formatting is the Type property = ie the object type.
# under the hood, PS has many predefined layouts depending upon the data type coming through the pipeline:

# default Out-Host prints only 3 properties
# but wildcard prints all properties

PS> Get-Service | Out-Host

                Status   Name               DisplayName
                ------   ----               -----------
                ...
                Running  AdobeARMservice    Adobe Acrobat Update Service
                Stopped  XboxNetApiSvc      Xbox Live Networking Service


PS> Get-Service | Select-Object -Property *             # choose last one printed as list too long

                Name                : XboxNetApiSvc
                RequiredServices    : {KeyIso, IKEEXT, mpssvc, BFE}
                CanPauseAndContinue : False
                CanShutdown         : False
                CanStop             : False
                DisplayName         : Xbox Live Networking Service
                DependentServices   : {}
                MachineName         : .
                ServiceName         : XboxNetApiSvc
                ServicesDependedOn  : {KeyIso, IKEEXT, mpssvc, BFE}
                ServiceHandle       : SafeServiceHandle
                Status              : Stopped
                ServiceType         : Win32ShareProcess
                StartType           : Manual
                Site                :
                Container           :


# what is happening?
# PS uses interal formatting rules associated with ServiceController objects.
PS> Get-Help ServiceController      # works. Gives list:

                Name                              Category  Module                    Synopsis
                ----                              --------  ------                    --------
                Get-Member                        Cmdlet    Microsoft.PowerShell.U... Gets the properties and methods of objects.
                Sort-Object                       Cmdlet    Microsoft.PowerShell.U... Sorts objects by property values.
                Get-Service                       Cmdlet    Microsoft.PowerShell.M... Gets the services on a local or remote computer.
                Restart-Service                   Cmdlet    Microsoft.PowerShell.M... Stops and then starts one or more services.
                Resume-Service                    Cmdlet    Microsoft.PowerShell.M... Resumes one or more suspended (paused) services.
                Set-Service                       Cmdlet    Microsoft.PowerShell.M... Starts, stops, and suspends a service, and cha...
                Start-Service                     Cmdlet    Microsoft.PowerShell.M... Starts one or more stopped services.
                Stop-Service                      Cmdlet    Microsoft.PowerShell.M... Stops one or more running services.
                Suspend-Service                   Cmdlet    Microsoft.PowerShell.M... Suspends (pauses) one or more running services.
                about_Pipelines                   HelpFile                            Combining commands into pipelines in the Windo...
                about_Types.ps1xml                HelpFile                            Explains how to use Types.ps1xml files to exte...

# under hood, if you ask for too many columns, PS automatically switches to 4 or 5 columns for readability

------------------------Where Does PS Formatting Subsystem Live?

# rules for PS automatic formatting are found in Windows PowerShell installation directory
# to visit this type
cd $PSHome

                PS C:\WINDOWS\system32> cd $PSHome
                PS C:\Windows\System32\WindowsPowerShell\v1.0> dir


                    Directory: C:\Windows\System32\WindowsPowerShell\v1.0


                Mode                LastWriteTime         Length Name
                ----                -------------         ------ ----
                d-----        4/12/2018   5:15 AM                en
                d-----         2/9/2019   8:40 PM                en-US
                d-----        4/11/2018   7:38 PM                Examples
                d-----        5/27/2018  12:03 AM                Modules
                d-----        4/11/2018   7:38 PM                Schemas
                d-----        4/11/2018   7:38 PM                SessionConfig
                -a----        4/11/2018   7:35 PM          12825 Certificate.format.ps1xml
                -a----        4/11/2018   7:35 PM           5074 Diagnostics.Format.ps1xml
                -a----        4/11/2018   7:35 PM         138223 DotNetTypes.format.ps1xml
                -a----        4/11/2018   7:35 PM          10144 Event.Format.ps1xml
                -a----        4/11/2018   7:35 PM          25526 FileSystem.format.ps1xml
                -a----        4/11/2018   7:35 PM           9164 getevent.types.ps1xml
                -a----        4/11/2018   7:35 PM          91655 Help.format.ps1xml
                -a----        4/11/2018   7:35 PM         138625 HelpV3.format.ps1xml
                -a----         2/9/2019   8:40 PM            391 Microsoft.PowerShell.Core_00000000-0000-0000-0000-000000000000_HelpInfo.xml
                -a----         2/9/2019   8:38 PM            391 Microsoft.PowerShell.Diagnostics_ca046f10-ca64-4740-8ff9-2565dba61a4f_HelpInfo.xml
                -a----         2/9/2019   8:39 PM            391 Microsoft.PowerShell.Host_56d66100-99a0-4ffc-a12d-eee9a6718aef_HelpInfo.xml
                -a----         2/9/2019   8:39 PM            391 Microsoft.PowerShell.Management_eefcb906-b326-4e99-9f54-8b4bb6ef3c6d_HelpInfo.xml
                -a----         2/9/2019   8:39 PM            391 Microsoft.PowerShell.Security_a94c8c7e-9810-47c0-b8af-65089c13a35a_HelpInfo.xml
                -a----         2/9/2019   8:38 PM            391 Microsoft.PowerShell.Utility_1da87e53-152b-403e-98dc-74d7b4d63d59_HelpInfo.xml
                -a----         2/9/2019   8:39 PM            391 Microsoft.WSMan.Management_766204a6-330e-4263-a7ab-46c87afc366c_HelpInfo.xml
                -a----        4/11/2018   7:35 PM         447488 powershell.exe
                -a----        4/11/2018   7:35 PM            266 powershell.exe.config
                -a----        4/11/2018   7:35 PM         206468 PowerShellCore.format.ps1xml
                -a----        4/11/2018   7:35 PM           4097 PowerShellTrace.format.ps1xml
                -a----        5/20/2018   7:59 AM         212992 powershell_ise.exe
                -a----        4/11/2018   7:35 PM            363 powershell_ise.exe.config
                -a----        4/11/2018   7:35 PM          55808 PSEvents.dll
                -a----        4/11/2018   7:33 PM         174592 pspluginwkr.dll
                -a----        4/11/2018   7:35 PM           2560 pwrshmsg.dll
                -a----        4/11/2018   7:35 PM          29184 pwrshsip.dll
                -a----        4/11/2018   7:35 PM           8458 Registry.format.ps1xml
                -a----        4/11/2018   7:35 PM         210376 types.ps1xml
                -a----        4/11/2018   7:35 PM          12282 typesv3.ps1xml
                -a----        4/11/2018   7:35 PM          16598 WSMan.Format.ps1xml


# to filter this for xml info
PS C:\Windows\System32\WindowsPowerShell\v1.0> dir
PS> dir *.format.ps1xml
PS> dir *.format.PS1xml  # same
# so notice that this is a filtering option to view xml only

                PS C:\Windows\System32\WindowsPowerShell\v1.0> dir *.format.ps1xml

                    Directory: C:\Windows\System32\WindowsPowerShell\v1.0

                Mode                LastWriteTime         Length Name
                ----                -------------         ------ ----
                -a----        4/11/2018   7:35 PM          12825 Certificate.format.ps1xml
                -a----        4/11/2018   7:35 PM           5074 Diagnostics.Format.ps1xml
                -a----        4/11/2018   7:35 PM         138223 DotNetTypes.format.ps1xml
                -a----        4/11/2018   7:35 PM          10144 Event.Format.ps1xml
                -a----        4/11/2018   7:35 PM          25526 FileSystem.format.ps1xml
                -a----        4/11/2018   7:35 PM          91655 Help.format.ps1xml
                -a----        4/11/2018   7:35 PM         138625 HelpV3.format.ps1xml
                -a----        4/11/2018   7:35 PM         206468 PowerShellCore.format.ps1xml
                -a----        4/11/2018   7:35 PM           4097 PowerShellTrace.format.ps1xml
                -a----        4/11/2018   7:35 PM           8458 Registry.format.ps1xml
                -a----        4/11/2018   7:35 PM          16598 WSMan.Format.ps1xml



----------------Out-GridView 

PS> Get-Service | Out-GridView      # popup window, searchable, filter offered

PS> Get-Help Out-GridView 
PS> Get-Help Out-GridView -Online   
PS> Get-Help Out-GridView -Full     # largest help info

# GridView cmdlet accepts PSObjects and does not return any output to pipeline
# able to perform quick sort by usiing column headers and quick filtering by clicking Add Criteria

PS> Get-Process | Out-GridView      # popup
                                    # Add Criteria for ProcessName contains svc --> searchable popup interactive display

PS> Get-Process | Select-Object -Property Name, WorkingSet, PeakWorkingSet | Sort-Object -Property WorkingSet -Descending | Out-GridView

# so here we
# 1) retrieve all processes,                                    Get-Process                     Get
# 2) filter out properties we dont need in the output,          Select-Object                   Select
# 3) sort the result set,                                       Sort-Object                     Sort 
# 4) display the massaged output in an interactive table        Out-GridView                    Out

# note Out-GridView assumes Windows has PS-ISE installed.

--------Formatting PowerShell Output

# now replace default with our own
# PS has 3 options to choose from:
    Format-Table        aliased ft  
    Format-List         aliased fl
    Format-Wide         aliased fw 

----------------Format-Table 
PS> Get-PSSnapin 
# if the PS default formating engine gives a table by default, then you dont need to do anything
# when the result comes back as a list, and you need a table, then use this.
# but Format-Table has additional parameters that are NOT default.

-Wrap 
PS> Get-PSSnapin | Format-Table
PS> Get-PSSnapin | Format-Table -Wrap       # works

-AutoSize
PS> Get-Process -Name powershell | Format-Table -Property Path,Name,Id,Company -AutoSize

# Author suggests using Select-Object before running AutoSize b/c Autosize will show full column width 
# for at least the first couple properties then may get cut off, SO YOU SHOULD FIRST use Select-Object 
# to narrow the objects choosen, the AutoSize them.

# Author tends to use -Wrap and not -AutoSize.

-Property 
# use -Property parameter to specify the columns and their order in output.
# note that -Property does not filter out any data, instead it suppresses the columns we
# dont see, while presenting the columns we want to see.
PS> Get-Service | Format-Table -Property Name, DependentServices -Wrap

-GroupBy
# organize the table output to group their services
PS> Get-Process | Sort-Object -Property BasePriority | Format-Table -GroupBy BasePriority -Wrap 

----------------Format-List 

# used when the tabular view does NOT give us clear details
# formats the pipeline output as each property shows up on a new line
PS> Get-Service | Format-List 
PS> Get-Process | Select-Object -Property * | Format-List 
# this supports -property paramter
# it allows us to specify the object parameters in the output and the order in which they are listed
PS> Get-Process | Format-List -Property Name, BasePriority, PriorityClass 

# Author tip - run all the PS commands in the Help file as you come across them.
# try this
Help <cmdlet-name> -Example                             <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

----------------Format-Wide 

# very similar to MSDOS 
C:> dir /w 

# if you try the dir /w (or even Get-ChildItem -w) this will not work
# We use Format-Wide when we want to see single item data in a multicolumn display

# example
# we want to see all the process names currently running on our system
PS> Get-Process | Format-Wide
# to invoke the classic use of wide output in the file system, try this
PS> Get-ChildItem | Format-Wide -Column 3

-column #pararmeter allows us to specify how many columms to see in output
-Autosize #parameter does the same thing with Format-Table
# try both to see:
PS> Get-Process | Select-Object -First 15 | Format-Wide -AutoSize 
PS> Get-Process | Select-Object -First 15 | Format-Wide


# so now we have seen how to change output display of our pipeline data. 
# Next we look at exporting output for nonhost display

--------Exporting PowerShell Output

# everything to now assumes you work insid the ISE or console host.
# what happens when you need to parse data inside a text editor.
# these will help
Out-File 
Out-Printer 
Export-Csv
Export-Clixml

# we are skipping 
Out-GridView # b/c was discussed earlier and Gridview has NO capacity for printing or exporting to other formats.

# we are looking for ways to get PS output into a flexible file type.
----------------Out-File 
# in Linux and Cmd.exe, you can use the redirection operator > to export output to a text file.
# PS also uses > for redirection

# default for Out-File:
# generates a Unicode-encoded text file. you can encode in ASCII by specifying -Encoding parameter
PS> Get-Service | Out-File service.txt 
# output truncatation occurs
# to overcome output truncation, use -Width parameter
PS> Get-Service | Out-File -FilePath "C:\servicelist.txt" -Width 120 | Notepad "c:\servicelist.txt"
# but still truncated. How to fix?
# use Format-Table -AutoSize in the pipeline BEFORE we create the text file.
# if we dont do this, then the Name column arrives at Out-File with Name property ALREADY truncated.

----------------Out-Printer 
# added in PS v4.
# sends pipeline output to your default printer.
PS> Get-Help about_Redirection | Out-Printer    # help file printout to our default printer

# if you want to print to printer down the hall?
# specify the UNC (Universal Naming Convention) network path using -Name parameter
PS> Get-Help about_Format.ps1xml | Out-Printer -Name "\\printserver01\HPLaserL2-Hallway"

----------------Export-CSV 

# when we need to do more than just print output
# advantage of CSV ist hat we can manipulate the data in ay CSV aware application

PS> Get-Service | Export-Csv "newhires2.csv"
PS> start excel "newhires2.csv"

PS> Notepad studentgrades1.txt      # works
PS> Start Excel "newhires2.csv"     # works
PS> Start excel "newhires2.csv"     # works
PS> Start Excel newhires2.csv       # works
PS> Start excel newhires2.csv       # works

# Ingestion examples
PS> Get-Service | Export-csv -Path "C:\services.csv"    # author example
PS> start excel "C:\services.csv"                       # author example
PS> Start excel "C:\services.csv"                       # works
PS> START excel "C:\services.csv"                       # works
PS> STart excel "C:\services.csv"                       # works


PS> Get-Help about_Export-Csv       # error
PS> Get-Help Export-Csv             # works
PS> Get-Help Export-Csv -Online     # works

PS> Get-Process         # lists all process running on your machine
PS> Get-Process wmi* 
PS> Get-Process W*
PS> Get-Process -Name Wmi* | Select-Object -Property BasePriority, Id, SessionId, WorkingSet 

                PS> Get-Process -Name Wmi* | Select-Object -Property BasePriority, Id, SessionId, WorkingSet

                BasePriority    Id SessionId WorkingSet
                ------------    -- --------- ----------
                           8  3348         0   11370496
                           8 49140         0   41017344

# can use Tab Delimiter "`t"

# lets get run of all CSV file support commands:
PS> Get-Command -Noun *csv*

                PS> Get-Command -Noun *csv*

                CommandType     Name                                               Version    Source
                -----------     ----                                               -------    ------
                Function        Clear-PcsvDeviceLog                                1.0.0.0    PcsvDevice
                Function        Get-PcsvDevice                                     1.0.0.0    PcsvDevice
                Function        Get-PcsvDeviceLog                                  1.0.0.0    PcsvDevice
                Function        Restart-PcsvDevice                                 1.0.0.0    PcsvDevice
                Function        Set-PcsvDeviceBootConfiguration                    1.0.0.0    PcsvDevice
                Function        Set-PcsvDeviceNetworkConfiguration                 1.0.0.0    PcsvDevice
                Function        Set-PcsvDeviceUserPassword                         1.0.0.0    PcsvDevice
                Function        Start-PcsvDevice                                   1.0.0.0    PcsvDevice
                Function        Stop-PcsvDevice                                    1.0.0.0    PcsvDevice
                Cmdlet          ConvertFrom-Csv                                    3.1.0.0    Microsoft.PowerShell.Utility
                Cmdlet          ConvertTo-Csv                                      3.1.0.0    Microsoft.PowerShell.Utility
                Cmdlet          Export-Csv                                         3.1.0.0    Microsoft.PowerShell.Utility
                Cmdlet          Import-Csv                                         3.1.0.0    Microsoft.PowerShell.Utility


# we look at Convert cmdlets in next section of book
# use Import-Csv to ingest incoming CSV file

# to see listing of all running services
PS> Get-Service
# throw into excel
PS> Get-Service | Export-Csv -path "C:/users/atul/desktop/2016_CODING_NOTES/services2.csv"

# Import-Csv ingests simple string data as input, but outputs objects.
PS> Get-Help Get-Service
PS> Get-Help Get-Service -Online 
PS> Import-Csv -path "C:/users/atul/desktop/2016_CODING_NOTES/services2.csv" | Get-Member       # valid
PS> Import-Csv -path C:/users/atul/desktop/2016_CODING_NOTES/services2.csv | Get-Member         # valid (dont need quotes)

                PS C:\WINDOWS\system32> Import-Csv -path C:\users\atul\desktop\2016_CODING_NOTES\services2.csv | Get-Member

                   TypeName: CSV:System.ServiceProcess.ServiceController

                Name                MemberType   Definition
                ----                ----------   ----------
                Equals              Method       bool Equals(System.Object obj)
                GetHashCode         Method       int GetHashCode()
                GetType             Method       type GetType()
                ToString            Method       string ToString()
                CanPauseAndContinue NoteProperty string CanPauseAndContinue=False
                CanShutdown         NoteProperty string CanShutdown=False
                CanStop             NoteProperty string CanStop=True
                Container           NoteProperty string Container=
                DependentServices   NoteProperty string DependentServices=System.ServiceProcess.ServiceController[]
                DisplayName         NoteProperty string DisplayName=Adobe Acrobat Update Service
                MachineName         NoteProperty string MachineName=.
                Name                NoteProperty string Name=AdobeARMservice
                RequiredServices    NoteProperty string RequiredServices=System.ServiceProcess.ServiceController[]
                ServiceHandle       NoteProperty string ServiceHandle=SafeServiceHandle
                ServiceName         NoteProperty string ServiceName=AdobeARMservice
                ServicesDependedOn  NoteProperty string ServicesDependedOn=System.ServiceProcess.ServiceController[]
                ServiceType         NoteProperty string ServiceType=Win32OwnProcess
                Site                NoteProperty string Site=
                StartType           NoteProperty string StartType=Automatic
                Status              NoteProperty string Status=Running


----------------Export-Clixml 

# XML vs CSV vs HTML

# XML           # data markup language using HTML/CSS tags
ConvertTo-Xml   # convert PS output to xml      
Export-Clixml   # export PS pipeline data in format that PS recognizes internally 

###################
#           used?                   focus?
# XML       used to carry data      on what data is
#           carry with HTML tags
#           XML tags not predefined like HTML tags
#           XML author defines BOTH tags and document structure
#           XML simplifies data sharing, data transport, platform changes, data availability


# purpose of XML totally different from HTML                                    CSV                     XML
# XML has MORE in common with CSV                                               simple tabular data     data wrapped inside HTML tags
# XML = data description markup language                                        large dataset           data over the internet    
# HTML describes HOW data should be presented
# XML seeks to define the meaning of your data
# XML and CSV can be import by almost any business application
###################

# example Export-Clixml 
# need to analyze a process list from computerA onto your admin workstation named computerB.
# 1) generate PS XML file
PS> Get-Process | Export-Clixml -Path computerAproc.xml 
# note that XML preserves all aspects of the pipeline data (ie ATUL all the names, properties, and metadata)
# 2) then ingest on computerB using Import-Clixml cmdlet
PS> Import-Clixml -Path .\process.xml | Get-Member
# so Import-Clixml will ingest string data and returns "deserialized" "process objects".
# NOTE - important to remember that this snapshop from computerA is a point-in-time snapshot and not the current running processes

# Export-Clixml is not formatted well b/c its not traditional XML. Why? Export-Clixml is used to save PS output as objects that
# can be fully deserialized back into PS. For "standards-bsed XML" files, we use ConvertTo-Xml cmdlet.

# next how to convert PS output to other file types

--------Converting PowerShell Output

$export = Get-Process | Export-Csv -Path export.csv 
$convert = Get-Process | ConvertTo-Csv 
$export | Get-Member 
$convert | Get-Member

# this code gives the following:
# Export-Csv dumps you OUT of the pipeline, all you get is a CSV file
# ConvertTo-Csv returns a list of string objects and keeps you IN the pipeline.

# so use Export-Csv if you actually need a CSV text file right then
# use ConvertTo-Csv is you have additional work to do on the converted data

"""             PS> $export = Get-Process | Export-Csv -Path export.csv
                PS> $convert = Get-Process | ConvertTo-Csv
                PS> $export | Get-Member
                        Get-Member : You must specify an object for the Get-Member cmdlet.
                        At line:1 char:11
                        + $export | Get-Member
                        +           ~~~~~~~~~~
                            + CategoryInfo          : CloseError: (:) [Get-Member], InvalidOperationException
                            + FullyQualifiedErrorId : NoObjectInGetMember,Microsoft.PowerShell.Commands.GetMemberCommand

                PS> $convert | Get-Member


                   TypeName: System.String

                Name             MemberType            Definition
                ----             ----------            ----------
                Clone            Method                System.Object Clone(), System.Object ICloneable.Clone()
                CompareTo        Method                int CompareTo(System.Object value), int CompareTo(string strB), int IComparab...
                Contains         Method                bool Contains(string value)
                CopyTo           Method                void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int co...
                EndsWith         Method                bool EndsWith(string value), bool EndsWith(string value, System.StringCompari...
                Equals           Method                bool Equals(System.Object obj), bool Equals(string value), bool Equals(string...
                GetEnumerator    Method                System.CharEnumerator GetEnumerator(), System.Collections.IEnumerator IEnumer...
                GetHashCode      Method                int GetHashCode()
                GetType          Method                type GetType()
                GetTypeCode      Method                System.TypeCode GetTypeCode(), System.TypeCode IConvertible.GetTypeCode()
                IndexOf          Method                int IndexOf(char value), int IndexOf(char value, int startIndex), int IndexOf...
                IndexOfAny       Method                int IndexOfAny(char[] anyOf), int IndexOfAny(char[] anyOf, int startIndex), i...
                Insert           Method                string Insert(int startIndex, string value)
                IsNormalized     Method                bool IsNormalized(), bool IsNormalized(System.Text.NormalizationForm normaliz...
                LastIndexOf      Method                int LastIndexOf(char value), int LastIndexOf(char value, int startIndex), int...
                LastIndexOfAny   Method                int LastIndexOfAny(char[] anyOf), int LastIndexOfAny(char[] anyOf, int startI...
                Normalize        Method                string Normalize(), string Normalize(System.Text.NormalizationForm normalizat...
                PadLeft          Method                string PadLeft(int totalWidth), string PadLeft(int totalWidth, char paddingChar)
                PadRight         Method                string PadRight(int totalWidth), string PadRight(int totalWidth, char padding...
                Remove           Method                string Remove(int startIndex, int count), string Remove(int startIndex)
                Replace          Method                string Replace(char oldChar, char newChar), string Replace(string oldValue, s...
                Split            Method                string[] Split(Params char[] separator), string[] Split(char[] separator, int...
                StartsWith       Method                bool StartsWith(string value), bool StartsWith(string value, System.StringCom...
                Substring        Method                string Substring(int startIndex), string Substring(int startIndex, int length)
                ToBoolean        Method                bool IConvertible.ToBoolean(System.IFormatProvider provider)
                ToByte           Method                byte IConvertible.ToByte(System.IFormatProvider provider)
                ToChar           Method                char IConvertible.ToChar(System.IFormatProvider provider)
                ToCharArray      Method                char[] ToCharArray(), char[] ToCharArray(int startIndex, int length)
                ToDateTime       Method                datetime IConvertible.ToDateTime(System.IFormatProvider provider)
                ToDecimal        Method                decimal IConvertible.ToDecimal(System.IFormatProvider provider)
                ToDouble         Method                double IConvertible.ToDouble(System.IFormatProvider provider)
                ToInt16          Method                int16 IConvertible.ToInt16(System.IFormatProvider provider)
                ToInt32          Method                int IConvertible.ToInt32(System.IFormatProvider provider)
                ToInt64          Method                long IConvertible.ToInt64(System.IFormatProvider provider)
                ToLower          Method                string ToLower(), string ToLower(cultureinfo culture)
                ToLowerInvariant Method                string ToLowerInvariant()
                ToSByte          Method                sbyte IConvertible.ToSByte(System.IFormatProvider provider)
                ToSingle         Method                float IConvertible.ToSingle(System.IFormatProvider provider)
                ToString         Method                string ToString(), string ToString(System.IFormatProvider provider), string I...
                ToType           Method                System.Object IConvertible.ToType(type conversionType, System.IFormatProvider...
                ToUInt16         Method                uint16 IConvertible.ToUInt16(System.IFormatProvider provider)
                ToUInt32         Method                uint32 IConvertible.ToUInt32(System.IFormatProvider provider)
                ToUInt64         Method                uint64 IConvertible.ToUInt64(System.IFormatProvider provider)
                ToUpper          Method                string ToUpper(), string ToUpper(cultureinfo culture)
                ToUpperInvariant Method                string ToUpperInvariant()
                Trim             Method                string Trim(Params char[] trimChars), string Trim()
                TrimEnd          Method                string TrimEnd(Params char[] trimChars)
                TrimStart        Method                string TrimStart(Params char[] trimChars)
                Chars            ParameterizedProperty char Chars(int index) {get;}
                Length           Property              int Length {get;}
"""

----------------ConvertTo Options 

PS> Get-Command -Verb ConvertTo*

                CommandType     Name                                               Version    Source
                -----------     ----                                               -------    ------
                Cmdlet          ConvertTo-Csv                                      3.1.0.0    Microsoft.PowerShell.Utility
                Cmdlet          ConvertTo-Html                                     3.1.0.0    Microsoft.PowerShell.Utility
                Cmdlet          ConvertTo-Json                                     3.1.0.0    Microsoft.PowerShell.Utility
                Cmdlet          ConvertTo-ProcessMitigationPolicy                  1.0.11     ProcessMitigations
                Cmdlet          ConvertTo-SecureString                             3.0.0.0    Microsoft.PowerShell.Security
                Cmdlet          ConvertTo-TpmOwnerAuth                             2.0.0.0    TrustedPlatformModule
                Cmdlet          ConvertTo-Xml                                      3.1.0.0    Microsoft.PowerShell.Utility

# XML is a universal data description language format
  use Export-Clixml # when we want to export and import XML from within PS or between PS and other applications

  use ConvertTo-Xml # when we need to keep XML data in the pipeline for further processing, but its usage can be confusing:

# example of confusion:
# we want to save the contents of C:\Windows|System32 as an XML so do this:
PS> Get-ChildItem "C:\windows\system32" | ConvertTo-Xml 
# help file for this says that we need to leverage the Save() method to get this done. We did NOT do this yet.
# Recall that a method refers to a predefined action that a PS object can perform.

# so do this:
$xml = Get-ChildItem "C:\windows\system32" | ConvertTo-Xml 
$xml.Save("C:\contents.xml")
notepad "C:\contents.xml"
# works as Notepad is opened with the contents.

# now, how to generate HTML report for web display?
# just add another element to the pipeline to get the HTML file.
# does not work so build up stepwise

PS> Get-Service
PS> Get-Service | Where-Object {$_.Status -eq "Running"} | Select-Object        # valid
PS> Get-Service | Where-Object {$_.Status -eq "Running"} | Select-Object -Property DisplayName, DependentServices # valid 
# but ATUL - what options are available? explore now
# try Get-Member to see is that works?
PS> Get-Service | Where-Object {$_.Status -eq "Running"} | Select-Object | Get-Member       # valid


                PS C:\WINDOWS\system32> Get-Service | Where-Object {$_.Status -eq "Running"} | Select-Object | Get-Member

                   TypeName: System.ServiceProcess.ServiceController

                Name                      MemberType    Definition
                ----                      ----------    ----------
                Name                      AliasProperty Name = ServiceName
                RequiredServices          AliasProperty RequiredServices = ServicesDependedOn
                Disposed                  Event         System.EventHandler Disposed(System.Object, System.EventArgs)
                Close                     Method        void Close()
                Continue                  Method        void Continue()
                CreateObjRef              Method        System.Runtime.Remoting.ObjRef CreateObjRef(type requestedType)
                Dispose                   Method        void Dispose(), void IDisposable.Dispose()
                Equals                    Method        bool Equals(System.Object obj)
                ExecuteCommand            Method        void ExecuteCommand(int command)
                GetHashCode               Method        int GetHashCode()
                GetLifetimeService        Method        System.Object GetLifetimeService()
                GetType                   Method        type GetType()
                InitializeLifetimeService Method        System.Object InitializeLifetimeService()
                Pause                     Method        void Pause()
                Refresh                   Method        void Refresh()
                Start                     Method        void Start(), void Start(string[] args)
                Stop                      Method        void Stop()
                WaitForStatus             Method        void WaitForStatus(System.ServiceProcess.ServiceControllerStatus desiredStatus), void WaitForStatus(System.ServiceProcess.ServiceControllerStatus desiredStatus, timespan timeout)
                CanPauseAndContinue       Property      bool CanPauseAndContinue {get;}
                CanShutdown               Property      bool CanShutdown {get;}
                CanStop                   Property      bool CanStop {get;}
                Container                 Property      System.ComponentModel.IContainer Container {get;}
                DependentServices         Property      System.ServiceProcess.ServiceController[] DependentServices {get;}
                DisplayName               Property      string DisplayName {get;set;}
                MachineName               Property      string MachineName {get;set;}
                ServiceHandle             Property      System.Runtime.InteropServices.SafeHandle ServiceHandle {get;}
                ServiceName               Property      string ServiceName {get;set;}
                ServicesDependedOn        Property      System.ServiceProcess.ServiceController[] ServicesDependedOn {get;}
                ServiceType               Property      System.ServiceProcess.ServiceType ServiceType {get;}
                Site                      Property      System.ComponentModel.ISite Site {get;set;}
                StartType                 Property      System.ServiceProcess.ServiceStartMode StartType {get;}
                Status                    Property      System.ServiceProcess.ServiceControllerStatus Status {get;}
                ToString                  ScriptMethod  System.Object ToString();

# repeated from above
PS> Get-Service | Where-Object {$_.Status -eq "Running"} | Select-Object -Property DisplayName, DependentServices # valid 

# add ConvertTo-Html
PS> Get-Service | Where-Object {$_.Status -eq "Running"} | Select-Object -Property DisplayName, DependentServices | ConvertTo-Html  #valid

# add Out-File services.html
PS> Get-Service | Where-Object {$_.Status -eq "Running"} | Select-Object -Property DisplayName, DependentServices | ConvertTo-Html | Out-File services.html
# valid, yes baby
PS> start chrome services.html

# try gibberish.html
PS> Get-Service | Where-Object {$_.Status -eq "Running"} | Select-Object -Property DisplayName, DependentServices | ConvertTo-Html | Out-File tempgibberish.html
PS> start chrome tempgibberish.html 
# works, yes baby
# need to give the right path
PS/c:/users/atul/projects> Get-Service | Where-Object {$_.Status -eq "Running"} | Select-Object -Property DisplayName, DependentServices | ConvertTo-Html | Out-File services.html
# is valid now
# using correct path
PS/c:/users/atul/projects> start iexplore "c:\users\atul\projects\services.html"        # works with valid searchable fields
PS/c:/users/atul/projects> start chrome "c:\users\atul\projects\services.html"        # works but NOT valid for searchable fields


                PS C:\WINDOWS\system32> Get-Service | Where-Object {$_.Status -eq "Running"} | Select-Object -Property DisplayName, DependentServices | ConvertTo-Html
                <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
                <html xmlns="http://www.w3.org/1999/xhtml">
                <head>
                <title>HTML TABLE</title>
                </head><body>
                <table>
                <colgroup><col/><col/></colgroup>
                <tr><th>DisplayName</th><th>DependentServices</th></tr>
                <tr><td>Adobe Acrobat Update Service</td><td>System.ServiceProcess.ServiceController[]</td></tr>
                <tr><td>Application Information</td><td>System.ServiceProcess.ServiceController[]</td></tr>
                <tr><td>Apple Mobile Device Service</td><td>System.ServiceProcess.ServiceController[]</td></tr>
                <tr><td>Windows Audio Endpoint Builder</td><td>System.ServiceProcess.ServiceController[]</td></tr>
                <tr><td>Windows Audio</td><td>System.ServiceProcess.ServiceController[]</td></tr>
                <tr><td>Base Filtering Engine</td><td>System.ServiceProcess.ServiceController[]</td></tr>
                <tr><td>Background Intelligent Transfer Service</td><td>System.ServiceProcess.ServiceController[]</td></tr>
                <tr><td>Bonjour Service</td><td>System.ServiceProcess.ServiceController[]</td></tr>
                <tr><td>Background Tasks Infrastructure Service</td><td>System.ServiceProcess.ServiceController[]</td></tr>
                <tr><td>Computer Browser</td><td>System.ServiceProcess.ServiceController[]</td></tr>
                <tr><td>Bluetooth Audio Gateway Service</td><td>System.ServiceProcess.ServiceController[]</td></tr>
                <tr><td>AVCTP service</td><td>System.ServiceProcess.ServiceController[]</td></tr>
                <tr><td>Bluetooth Support Service</td><td>System.ServiceProcess.ServiceController[]</td></tr>
                <tr><td>Capability Access Manager Service</td><td>System.ServiceProcess.ServiceController[]</td></tr>


----------------How to Make HTML Output Prettier 

# add CSS style sheets
PS/c:/users/atul/projects> Get-Service | Where-Object {$_.Status -eq "Running"} | Select-Object -Property DisplayName, DependentServices | ConvertTo-Html -CssUri "styels.css" | Out-File services.html

# exact code is
| ConvertTo-Html -CssUri "styels.css" |
# what happens? Windows automatically adds a <link> tag in the <head> portion of the HTML document that reference the external stylesheet


----------------Your Final Exam - Try It Yourself

# example explore the processes that are configured to start automaticaly every time your computer boots
# create Practice folder
in this scenario, you will be asked to enumerate the processes configured to start automatically every time
the computer boots. You will limit your Registry investigations to the HKEY_LOCAL_MACHINE hive.
# lauch Admin PS


# PS C:\WINDOWS\system32>
# go to C:>
# PS C:\>
# PS C:\> Get-Provider

                PS C:\WINDOWS\system32> cd ..
                PS C:\WINDOWS> cd ..
                PS C:\> Get-PSProvider

                Name                 Capabilities                                      Drives
                ----                 ------------                                      ------
                Registry             ShouldProcess, Transactions                       {HKLM, HKCU}  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                Alias                ShouldProcess                                     {Alias}
                Environment          ShouldProcess                                     {Env}
                FileSystem           Filter, ShouldProcess, Credentials                {C, D}
                Function             ShouldProcess                                     {Function}
                Variable             ShouldProcess                                     {Variable}

# 1) start by switching to the Registry PSDrive and browse the Registry key that stores autostart processes
"""     cd HKLM:
        cd \Software\Microsoft\Windows\CurrentVersion\Run                       """

                # ATUL - need to figure out how to jump to cd HKLM:

                PS HKLM:\> Get-PSDrive

                Name           Used (GB)     Free (GB) Provider      Root                       CurrentLocation
                ----           ---------     --------- --------      ----                       ---------------
                Alias                                  Alias
                C                 199.53        256.90 FileSystem    C:\                        WINDOWS\system32
                Cert                                   Certificate   \
                D                                      FileSystem    D:\
                Env                                    Environment
                Function                               Function
                HKCU                                   Registry      HKEY_CURRENT_USER
                HKLM                                   Registry      HKEY_LOCAL_MACHINE
                Variable                               Variable
                WSMan                                  WSMan

# how? 
# PS C:\WINDOWS\system32>                                           start here
# PS C:\WINDOWS\system32> cd HKLM:                                  type this
# PS HKLM> \Software\Microsoft\Windows\CurrentVersion\Run           type this

# 2) run a directory listing

# PS HKLM:\Software\Microsoft\Windows\CurrentVersion\Run>           now run a directory listing
    # note Get-ChildItem does not work with Registry provider.
    #       so try the default option offered by PS
    #       Get-ItemProperty -Path 
# PS HKLM:\Software\Microsoft\Windows\CurrentVersion\Run> Get-ItemProperty -Path        error
# PS HKLM:\Software\Microsoft\Windows\CurrentVersion\Run> Get-ItemProperty -Path .      works!!!!
    # note this should be the Format-List view by default. NEED TO VERIFY THIS.


                PS HKLM:\Software\Microsoft\Windows\CurrentVersion\Run> Get-ItemProperty -Path .

                SecurityHealth     : C:\Program Files\Windows Defender\MSASCuiL.exe
                RTHDVCPL           : "C:\Program Files\Realtek\Audio\HDA\RtkNGUI64.exe" -s
                RtHDVBg            : "C:\Program Files\Realtek\Audio\HDA\RAVBg64.exe" /MAXX4P1
                RtHDVBg_PushButton : "C:\Program Files\Realtek\Audio\HDA\RAVBg64.exe" /IM
                QuickSet           : c:\Program Files\Dell\QuickSet\QuickSet.exe
                IAStorIcon         : "C:\Program Files\Intel\Intel(R) Rapid Storage Technology\IAStorIconLaunch.exe" "C:\Program
                                     Files\Intel\Intel(R) Rapid Storage Technology\IAStorIcon.exe" 60
                iTunesHelper       : "C:\Program Files\iTunes\iTunesHelper.exe"
                PSPath             : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\R
                                     un
                PSParentPath       : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion
                PSChildName        : Run
                PSDrive            : HKLM
                PSProvider         : Microsoft.PowerShell.Core\Registry                     


# 3) Look at same output but in different format
# PS HKLM:\Software\Microsoft\Windows\CurrentVersion\Run> Get-ItemProperty -Path .                  # original code    
# PS HKLM:\Software\Microsoft\Windows\CurrentVersion\Run> Get-ItemProperty -Path . | Format-List    # above list
# PS HKLM:\Software\Microsoft\Windows\CurrentVersion\Run> Get-ItemProperty -Path . | Format-Table   # below list in a Table format (worst)

                PS HKLM:\Software\Microsoft\Windows\CurrentVersion\Run> Get-ItemProperty -Path . | Format-List


                SecurityHealth     : C:\Program Files\Windows Defender\MSASCuiL.exe
                RTHDVCPL           : "C:\Program Files\Realtek\Audio\HDA\RtkNGUI64.exe" -s
                RtHDVBg            : "C:\Program Files\Realtek\Audio\HDA\RAVBg64.exe" /MAXX4P1
                RtHDVBg_PushButton : "C:\Program Files\Realtek\Audio\HDA\RAVBg64.exe" /IM
                QuickSet           : c:\Program Files\Dell\QuickSet\QuickSet.exe
                IAStorIcon         : "C:\Program Files\Intel\Intel(R) Rapid Storage Technology\IAStorIconLaunch.exe" "C:\Program Files\Intel\Intel(R) Rapid Storage Technology\IAStorIcon.exe" 60
                iTunesHelper       : "C:\Program Files\iTunes\iTunesHelper.exe"
                PSPath             : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run
                PSParentPath       : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion
                PSChildName        : Run
                PSDrive            : HKLM
                PSProvider         : Microsoft.PowerShell.Core\Registry


                PS HKLM:\Software\Microsoft\Windows\CurrentVersion\Run> Get-ItemProperty -Path . | Format-Table

                SecurityHealth                                 RTHDVCPL                                              RtHDVBg                                                   RtHDVBg_PushButton                                   QuickSet                                    IAStorIcon
                --------------                                 --------                                              -------                                                   ------------------                                   --------                                    ----------
                C:\Program Files\Windows Defender\MSASCuiL.exe "C:\Program Files\Realtek\Audio\HDA\RtkNGUI64.exe" -s "C:\Program Files\Realtek\Audio\HDA\RAVBg64.exe" /MAXX4P1 "C:\Program Files\Realtek\Audio\HDA\RAVBg64.exe" /IM c:\Program Files\Dell\QuickSet\QuickSet.exe "C:\Program...


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# note that Format-Table is not a good view as the text all gets truncated
# so note that PS automatically chooses the most appropriate view

# 4) notice that lots of metadata exists in the output. Filter them out by naming only the startup items that exist 
#    in the key and storing those items in a variable.
#    PS HKLM:\Software\Microsoft\Windows\CurrentVersion\Run> 
#             $startup = Get-ItemProperty -Path . | Select-Object HotKeyCmds, IgfxTray, "LogMeInGUI", Persistence

#    PS HKLM:\Software\Microsoft\Windows\CurrentVersion\Run> 
#             $startup | Format-List
#
#    ATUL - not sure what this is:
#    HotKeyCmds     : "C:\Windows\system32\hkcmd.exe" 
#    IgfxTray       : "C:\Windows\system32\ifgxtray.exe"
#    LogMeIn GUI    : "C:\Program File (x86)\LogMeInSystray.exe"
#    Persistence    : "C:\Windows\system32\igfxpers.exe"

# 5) We finish by exporting the output as a CSV for later analysis in another application:
#    $startup | Export-Csv -Path "c:\practice\startupitems.csv"
# Note make sure that you open up the CSV and verify its contents match your expectations.


--------Summary Q&A Workshop

# now you can build a PS pipeline that returns exactly what you need plus you can
# format it, export it, and convert it as needed.
# use aliases ft and fl


--------Q&A 
# note that CSV and XML each have their own cmdlets = Export, Import, ConvertTo, and ConvertFrom cm
# why? duplicate them? actually they are NOT duplicated b/c
# Export and Import cmdlets generate files (ie data) on disk
# Export-CSV and Import-CSV apply to CSV data
# Export-Clixml apply to XML data
# If need to represent the data inside the pipeline as CSV or XML then use ConvertTo
# Also can pipe ConvertTo output to Out-File to generate a file on disk

# ConvertTo-Json
# ConvertFrom-Json
# JSON = lightwieght alternative to XML and can be used to pass data over network and between systems

# Generate PDf from pipeline?
Get-Service | Out-Printer -Name "Adobe PDF" # requires Adobe Acrobat Professional installed on your computer


--------Workshop

# generate an HTML report with all columns (no truncation) and meets the following specs:
# 1) display first 50 entries from System event log, sort by time descending order
# 2) output includes these properties in this order: EntryType, Time, Source, Message
# 3) output shoud be grouped by EntryType
<<<<<<<<<<<<<<< TO DO <<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<< TO DO <<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<< TO DO <<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<< TO DO <<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<< TO DO <<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<< TO DO <<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<< TO DO <<<<<<<<<<<<<<<<<<<<<<<<<<


--------Quiz 

# 1) does this run?
PS> Get-EventLog -LogName System | Out-GridView | Sort-Object -Property Time -Desc 
# does NOT work b/c Out-GridView ends the pipeline
# so need to swap Out-GridView with Sort-Object 
PS> Get-EventLog -LogName System | Sort-Object -Property Time -Desc | Out-GridView

<<<<<<<<<<<<<<< TO DO <<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<< TO DO <<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<< TO DO <<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<< TO DO <<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<< TO DO <<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<< TO DO <<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<< TO DO <<<<<<<<<<<<<<<<<<<<<<<<<<

# 2) does this run?
PS C:> Get-EventLog -LogName System | Sort-Object -Property Time | ConvertTo-HTML | Out-File -FilePath "c:\system-events.html"
# yes, this runs as ConvertTo-HTML will return objects to the pipeline thus enabling Out-File to generate the HTML file

# 3) How to quickly determine the inputs and outputs of a given PS command?
# Pipe to Get-Member 
# Pipe to Select-Object
# Consult the help file <<<<<<<<<<<<<<<<<<<<<<<< gives concise answer
# Add the -WhatIf parameter 


===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Part 4 Managing Computers Remotely with Windows PowerShell

===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 10 Implementing One-to-One Windows PowerShell Remoting

# Classic Windows system admin, using RDP (Remote Desktop Protocol), you can establish full fidelity Windows
# Desktop sessions with all your servers to acomplish any admin task needed.
# But RDP involves lots of network overhead resources. So try Remote PS session?
# start with One-to-One (ie single host) then later One-to-Many (ie fan out) remoting scenarios.

--------Understanding Classic Windows PowerShell Remote Access

PS> Get-Command -CommandType Cmdlet -ParameterName ComputerName | Select-Object -Property Name

# -ComputerName parameter was programmed by the Windows PS team separately for each computer that supports it. 
# So NO shell-wide universal remoting architecture exists (yet).
# Other challenges with -ComputerName
# 1) -ComputerName parameter uses proprietary, legacy network protocols such as DCOM (Distributed Component Object Model) and
# and RPC (Remote Procedure Calls). 
# 2) These legacy protocols connect on random TCP and UDP ports, thus making this type of remote access problematic on firewalled networks.
# 3) remote commands you send to multiple computers are processed serially, thus one host at a time, not parallel like modern PS remoting.

                PS C:\WINDOWS\system32> Get-Command -CommandType Cmdlet -ParameterName ComputerName | Select-Object -Property Name

                Name
                ----
                Add-Computer
                Clear-EventLog
                Connect-PSSession
                Enter-PSSession
                Get-EventLog
                Get-HotFix
                Get-Process
                Get-PSSession
                Get-Service
                Get-WmiObject
                Invoke-Command
                Invoke-WmiMethod
                Limit-EventLog
                New-EventLog
                New-PSSession
                Receive-Job
                Receive-PSSession
                Register-WmiEvent
                Remove-Computer
                Remove-EventLog
                Remove-PSSession
                Remove-WmiObject
                Rename-Computer
                Restart-Computer
                Send-MailMessage
                Set-Service
                Set-WmiInstance
                Show-EventLog
                Stop-Computer
                Test-Connection
                Write-EventLog

# given legacy issues above, it still may be useful to use -ComputerName parameter
# when one-to-one remoting, and needing a list of services on my the remote server named server01:
Get-Service -ComputerName server01

--------Introducing "True" PowerShell Remoting

# Windows PS v2 offers true remote management capabilties. Now instead of custom code, per-cmdlet basis, we now have a
# single unified remote access method that works across the entire shell.

# Modern industry standard = WS-Man (Web Services-Management) protocol which communicates over HTTP(s) and uses 
# only 1-2 communication ports.


# How it works:
# -1 any commands you send form your computer are executed on the remote hosts
# -2 data transmitted across your network consists of deserialized XML content
# -3 output that is returned from the remote systems is reconstituted back into full-fidelity object data
# -4 remote output represents a point-in-time snapshot of the remote systems.

            ----commands processed on remote hosts---->                ///////////////////////////////////////////////
Local Computer                                                         /            Remote Computer                  /
            =========                                         =======> /                                             /
            =========WS-Man (HTTP [port 5985] or HTTPS [5986]) ======> / HTTP(s)   ---> WinRM   --> PowerShell       /
            =========                                         =======> / Listener       Service     Host Application /
                                                                       /                                 |           /
                                                                       ///////////////////////////////////////////////
                                                                                                         |
                <-----------------------------------------------------------------------------------------
                            data is passed over the network in deserialized XML format 


# Point 4 more detail - if you send a Get-Process to another computer on your network. That process list you see is a snap-shot
# in time of that remote host. Its not real time, but close.s

# only two communication ports are required for remoting to work:
# TCP port 5985 for unencrypted HTTP and 
# TCP port 5986 for encrypted HTTPS

# WinRM (Windows Remote Management) is the underlying Windows service that controls the behavior of WS-Man protocol.
# Therefore enabling PS remote management involves a few key tasks:
# - start WinRM service
# - configure WinRm service to autostart at boot
# - create an HTTP or HTTPS listener
# - enable the appropriate Windows Firewall exceptions

# NOTE a single Windows PS cmdlet will do all this in one step.
CLI> Winrm 
# this is old

--------Enabling Windows PowerShell Remoting

# Modern use is
Enable-PSRemoting
# why?
# 1) it invokes Set-WSManQuickConfig
# 2) it makes configuration adjustments in order to tightly bind Windows PS to WS-Man and WinRM
# thus no need to use WinRM.exe command line tool b/x Enable-PSRemoting cmdlet performs all the actions that WinRM -quickconfig does, 
# plus also makes some Windows PS system tweaks.

----------------Method 1: Enabling Remoting with Windows PowerShell

# Enable-PSRemoting cmdlet was introduced in Windows PS v4. Remoting is enabled by default in Windows Server 2012 R2, but you will
# need to enable remoting on all Windows client systems and servers running previous versions of Windows server.
PS> Enable-PSRemoting       # works but then errors show up

                PS C:\WINDOWS\system32> Enable-PSRemoting
                WinRM has been updated to receive requests.
                WinRM service type changed successfully.
                WinRM service started.  

                \Set-WSManQuickConfig : <f:WSManFault xmlns:f="http://schemas.microsoft.com/wbem/wsman/1/wsmanfault" Code="21
                \Machine="localhost"><f:Message><f:ProviderFault provider="Config provider"
                \path="%systemroot%\system32\WsmSvc.dll"><f:WSManFault xmlns:f="http://schemas.microsoft.com/wbem/wsman/1/wsm
                \Code="2150859113" Machine="Study_Laptop"><f:Message>WinRM firewall exception will not work since one of the
                \connection types on this machine is set to Public. Change the network connection type to either Domain or Pr
                \try again. </f:Message></f:WSManFault></f:ProviderFault></f:Message></f:WSManFault>
                \At line:116 char:17
                \+                 Set-WSManQuickConfig -force
                \+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                \   + CategoryInfo          : InvalidOperation: (:) [Set-WSManQuickConfig], InvalidOperationException
                \   + FullyQualifiedErrorId : WsManError,Microsoft.WSMan.Management.SetWSManQuickConfigCommand

# Nice AUTHOR anticipated this.
# First couple of lines show what the problem is.
# PSEnabling will fail if one or more of your network adaptors is associated with "Public" location profile. This is a problem
# you will only see on Windows client operating systems.
# This error is by design. You dont want someone on your hotel's WIFI network attempting PS remote connections on your corporate
# laptop.
# Solution to the Public network adaptor problem involves a choice: one option involves you forcing the enablement of PSRemoting
# by adding the -SkipNetworkProfileCheck parameter.
PS> Enable-PSRemoting -SkipNetworkProfileCheck
page 207 Figure 10.3 box
type it here?

# Alternative solution = in addition to or instead of -SkipNetworkProfileCheck, you can use -Force to automatically
# confirm all the prompts that you see in Figure 10.3
PS> Enable-PSRemoting -Force


----------------Method 2: Enabling Remoting with Group Policy

# if you have only a few Windows computers on which you need to manage with PS remoting, then Enable-PSRemoting cmdlet is
# all you will need. However, for IT pros who need to enable racks full of server machines, running one-off cmdlets is too limiting.

# so use Group Policy in Active Directory Domain Services (AD DS) environments to enable PSRemoting.

# if you are a domain administrator, fire up the Group Policy Management Console (GPMC), and create or edit a 
# Group Policy Object (GPO), enabling the following policies:
# 1) allow remote service management through WinRM, located in the Group Policy path
#    Computer Configuration\Administrative Templates\Windows Components\Windows Remote Management (WinRM)\WinRM service
#    then set the filter to *; this enables the WinRM service.
# 2) WinRM service, located in the path Computer Configuration\Preferences\Control Panel Settings\Services
#    Configure the service to autostart.
# 3) Windows Firewall, located in the path 
#    Computer Configuration\Policies\Adminsitrative Templets\Network\Network Connctions\Windows Firewall\Domain Profile
#    Define an inbound port exception for TCP 5985 or 5986, depending on whether you are using HTTP or HTTPS.
#    To do this, you will modify the Windows Firewall: Allow Local Port Exceptions and 
#    Windows Firewall: Define Inbound Port Exceptions policies.

# ATHOR - its kind of a bummer that you need to separately configure WinRM and Windows Firewall separately like this,
# but its all we have at the moment for enterprise enablement of Windows PS remoting.

# Sadly, with the GPO method, we are still missing the session configuration tweaks made by Enable-PSRemoting
# For more info about troubleshooting, see help file about_Remote_Troubleshooting

----
# so far we have covered Method 1 and Method 2 which are both about remoting enabled on at least one host, now we look at
# actually making a remote connection. There are at least two ways:


----------------Method 3: Enabling Remoting in a Workgroup
# In an Active Directory forest, internal trust relationships and the mutual authentication used by the Kerberos authentication
# protocol means that we dont have to worry about swapping digital certificates or its equivalent to enable PS remoting.
# However, in a workgroup environment, where every system is a proverbial island unto itself, trust is a real issue.
# Unless you solve this problem, you will not be able to do PS remoting in a workgroup.

# NOTE in this book, we do not go into the route of creating and exchanging digital certificates. If you need to
# then see Ramblings on Windows Development blog:
# http://is.gd/lclbZv

# Instead, we will assume that in a workgroup environment, we are concerned more with makgin the technology work rather
# than ensuring top security.

# Thus we need to populate the TrustedHosts lists in our source computer with the computer of any remote hosts to which we
# want to connect. So yes, we configure trusted hosts on the connecting side, not the connected side. (ie on the left side, not the right)

# We can view the current status of our workgroup computer's TrustedHosts list by accessing the WS-Man PSDrive:
PS> Get-Item WSMan:\localhost\Client\TrustedHosts

                PS C:\WINDOWS\system32> Get-Item WSMan:\localhost\Client\TrustedHosts

                   WSManConfig: Microsoft.WSMan.Management\WSMan::localhost\Client

                Type            Name                           SourceOfValue   Value
                ----            ----                           -------------   -----
                System.String   TrustedHosts

# this list should be empty! (by default) 
# We can add a computer name to which want to connect by using Set-Item
PS> Set-Item WSMan:\localhost\Client\TrustedHosts -Value client3

# we have lots of flexibility in how we populate the TrustedHosts list
# we could have added
# 1) comma-separated list of computer names (client3, client4, client5)
# 2) wildcard match on a domain name (*.contoso.local)
# 3) NOT good idea but works: global wildcard (*) to add all remote hosts that are enabled for Windows PowerShell remoting

# AUTHOR - adding new computers to the TrustedHosts list is wonky. There seems to be no way as of Windows PowerShell v5 to 
# add multiple individual computer names to the TrustedHost list. When you add a second entry individually, it overwrites
# the entry that is currently stored.

# AUTHOR - the work around he suggests is to use -Force and -Concatenate switches to append a new computer name
# to the list:
# for example

PS> Set-Item WSMan:\localhost\Client\TrustedHosts Client3 -Force -Concatenate 
PS> Set-Item WSMan:\localhost\Client\TrustedHosts Client2 -Force -Concatenate 
PS> Get-Item WSMan:\localhost\Client\TrustedHosts Client3

                   WSManConfig: Microsoft.WSMan.Management\WSMan::localhost\Client

                Type            Name                           SourceOfValue   Value
                ----            ----                           -------------   -----
                System.String   TrustedHosts                                   client3, client2                 HYPO HERE

# Now that you have your target remote computer in your local machine's TrustedHosts list, you
# can use Enter-PSSession as usual to make a remote Windows PowerShell console session.
# BUT NOTE THAT we have NOT YET covered HOW TO ACTUALLY do this. See next section.

--------Creating a Windows PowerShell Remote Session

# use Enter-PSSession and Exit-PSSession cmdlets to establish a remote interactive session with a trusted host.
# HYPO example here
# 1) retrieve local computer's hostname --> mem1
# 2) enterted PS Remoting Session with dc1 under my current credentials
# 3) retrieved hostname as self-check to verify remote connection and obtained newest 3 entries from that system's System Event log
# 4) disconnected Remoting Session

                PS> hostname                                            # 1) retrieve local computer's hostname --> mem1
                mem1
                PS> Enter-PSSession -ComputerName dc1
                [dc1]: PS C:/Users/Administrator/Documents> hostname 
                dc1
                [dc1]: PS C:/Users/Administrator/Documents> get-eventlog -LogName System -Newest 3

                Index           Time                EntryType       Source               ....
                ----            ----                -------------   -----
                3619            Oct 30 09:20        Information     Service Control   
                3618            Oct 30 09:20        Information     Service Control  
                3617            Oct 30 09:20        Information     Service Control  

                [dc1]: PS C:/Users/Administrator/Documents> Exit-PSSession
                PS>

# note, no need to do step 3) self-check b/c hostname is automatically included inside remote system command prompt.
# note, step 4 to exit can use alias "exit". But if you happen to close the window, then PS will automatically closes the connection for you.
# so remember, you are "present" in that remote system.

PS> Get-Module -ListAvailable       # returns LONG list...


                PS C:\WINDOWS\system32> Get-Module -ListAvailable


                    Directory: C:\Program Files\WindowsPowerShell\Modules


                ModuleType Version    Name                                ExportedCommands
                ---------- -------    ----                                ----------------
                Script     1.0.1      Microsoft.PowerShell.Operation.V... {Get-OperationValidation, Invoke-OperationValidation}
                Binary     1.0.0.1    PackageManagement                   {Find-Package, Get-Package, Get-PackageProvider, Get-PackageSource...}
                Binary     1.0.0.0    PackageManagement                   {Find-Package, Get-Package, Get-PackageProvider, Get-PackageSource...}
                Script     3.4.0      Pester                              {Describe, Context, It, Should...}
                Script     1.0.0.1    PowerShellGet                       {Install-Module, Find-Module, Save-Module, Update-Module...}
                Script     1.2        PSReadline                          {Get-PSReadlineKeyHandler, Set-PSReadlineKeyHandler, Remove-PSReadlineKeyHandler, Get-PSReadlineOption...}


                    Directory: C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules


                ModuleType Version    Name                                ExportedCommands
                ---------- -------    ----                                ----------------
                Manifest   1.0.0.0    AppBackgroundTask                   {Disable-AppBackgroundTaskDiagnosticLog, Enable-AppBackgroundTaskDiagnosticLog, Set-AppBackgroundTaskResourcePolicy, Unregister-AppBackgroundTask...}
                Manifest   2.0.0.0    Appx                                {Add-AppxPackage, Get-AppxPackage, Get-AppxPackageManifest, Remove-AppxPackage...}
                Manifest   1.0.0.0    BitLocker                           {Unlock-BitLocker, Suspend-BitLocker, Resume-BitLocker, Remove-BitLockerKeyProtector...}
                Manifest   2.0.0.0    BitsTransfer                        {Add-BitsFile, Complete-BitsTransfer, Get-BitsTransfer, Remove-BitsTransfer...}
                Manifest   1.0.0.0    CimCmdlets                          {Get-CimAssociatedInstance, Get-CimClass, Get-CimInstance, Get-CimSession...}
                Manifest   1.0        Defender                            {Get-MpPreference, Set-MpPreference, Add-MpPreference, Remove-MpPreference...}
                Manifest   1.0.0.0    DeliveryOptimization                {Get-DeliveryOptimizationStatus, Get-DeliveryOptimizationPerfSnap, Get-DeliveryOptimizationLog, Get-DODownloadMode...}
                Manifest   1.0.0.0    DirectAccessClientComponents        {Disable-DAManualEntryPointSelection, Enable-DAManualEntryPointSelection, Get-DAClientExperienceConfiguration, Get-DAEntryPointTableItem...}
                Script     3.0        Dism                                {Add-AppxProvisionedPackage, Add-WindowsDriver, Add-WindowsCapability, Add-WindowsImage...}
                Manifest   1.0.0.0    DnsClient                           {Resolve-DnsName, Clear-DnsClientCache, Get-DnsClient, Get-DnsClientCache...}
                Manifest   1.0.0.0    EventTracingManagement              {Start-EtwTraceSession, New-EtwTraceSession, Get-EtwTraceSession, Update-EtwTraceSession...}
                Manifest   2.0.0.0    International                       {Get-WinDefaultInputMethodOverride, Set-WinDefaultInputMethodOverride, Get-WinHomeLocation, Set-WinHomeLocation...}
                Manifest   1.0.0.0    iSCSI                               {Get-IscsiTargetPortal, New-IscsiTargetPortal, Remove-IscsiTargetPortal, Update-IscsiTargetPortal...}
                Script     1.0.0.0    ISE                                 {New-IseSnippet, Import-IseSnippet, Get-IseSnippet}
                Manifest   1.0.0.0    Kds                                 {Add-KdsRootKey, Get-KdsRootKey, Test-KdsRootKey, Set-KdsConfiguration...}
                Manifest   1.0.1.0    Microsoft.PowerShell.Archive        {Compress-Archive, Expand-Archive}
                Manifest   3.0.0.0    Microsoft.PowerShell.Diagnostics    {Get-WinEvent, Get-Counter, Import-Counter, Export-Counter...}
                Manifest   3.0.0.0    Microsoft.PowerShell.Host           {Start-Transcript, Stop-Transcript}
                Manifest   1.0.0.0    Microsoft.PowerShell.LocalAccounts  {Add-LocalGroupMember, Disable-LocalUser, Enable-LocalUser, Get-LocalGroup...}
                Manifest   3.1.0.0    Microsoft.PowerShell.Management     {Add-Content, Clear-Content, Clear-ItemProperty, Join-Path...}
                Script     1.0        Microsoft.PowerShell.ODataUtils     Export-ODataEndpointProxy
                Manifest   3.0.0.0    Microsoft.PowerShell.Security       {Get-Acl, Set-Acl, Get-PfxCertificate, Get-Credential...}
                Manifest   3.1.0.0    Microsoft.PowerShell.Utility        {Format-List, Format-Custom, Format-Table, Format-Wide...}
                Manifest   3.0.0.0    Microsoft.WSMan.Management          {Disable-WSManCredSSP, Enable-WSManCredSSP, Get-WSManCredSSP, Set-WSManQuickConfig...}
                Manifest   1.0        MMAgent                             {Disable-MMAgent, Enable-MMAgent, Set-MMAgent, Get-MMAgent...}
                Manifest   1.0.0.0    MsDtc                               {New-DtcDiagnosticTransaction, Complete-DtcDiagnosticTransaction, Join-DtcDiagnosticResourceManager, Receive-DtcDiagnosticTransaction...}
                Manifest   2.0.0.0    NetAdapter                          {Disable-NetAdapter, Disable-NetAdapterBinding, Disable-NetAdapterChecksumOffload, Disable-NetAdapterEncapsulatedPacketTaskOffload...}
                Manifest   1.0.0.0    NetConnection                       {Get-NetConnectionProfile, Set-NetConnectionProfile}
                Manifest   1.0.0.0    NetEventPacketCapture               {New-NetEventSession, Remove-NetEventSession, Get-NetEventSession, Set-NetEventSession...}
                Manifest   2.0.0.0    NetLbfo                             {Add-NetLbfoTeamMember, Add-NetLbfoTeamNic, Get-NetLbfoTeam, Get-NetLbfoTeamMember...}
                Manifest   1.0.0.0    NetNat                              {Get-NetNat, Get-NetNatExternalAddress, Get-NetNatStaticMapping, Get-NetNatSession...}
                Manifest   2.0.0.0    NetQos                              {Get-NetQosPolicy, Set-NetQosPolicy, Remove-NetQosPolicy, New-NetQosPolicy}
                Manifest   2.0.0.0    NetSecurity                         {Get-DAPolicyChange, New-NetIPsecAuthProposal, New-NetIPsecMainModeCryptoProposal, New-NetIPsecQuickModeCryptoProposal...}
                Manifest   1.0.0.0    NetSwitchTeam                       {New-NetSwitchTeam, Remove-NetSwitchTeam, Get-NetSwitchTeam, Rename-NetSwitchTeam...}
                Manifest   1.0.0.0    NetTCPIP                            {Get-NetIPAddress, Get-NetIPInterface, Get-NetIPv4Protocol, Get-NetIPv6Protocol...}
                Manifest   1.0.0.0    NetworkConnectivityStatus           {Get-DAConnectionStatus, Get-NCSIPolicyConfiguration, Reset-NCSIPolicyConfiguration, Set-NCSIPolicyConfiguration}
                Manifest   1.0.0.0    NetworkSwitchManager                {Disable-NetworkSwitchEthernetPort, Enable-NetworkSwitchEthernetPort, Get-NetworkSwitchEthernetPort, Remove-NetworkSwitchEthernetPortIPAddress...}
                Manifest   1.0.0.0    NetworkTransition                   {Add-NetIPHttpsCertBinding, Disable-NetDnsTransitionConfiguration, Disable-NetIPHttpsProfile, Disable-NetNatTransitionConfiguration...}
                Manifest   1.0.0.0    PcsvDevice                          {Get-PcsvDevice, Start-PcsvDevice, Stop-PcsvDevice, Restart-PcsvDevice...}
                Binary     1.0.0.0    PersistentMemory                    {Get-PmemDisk, Get-PmemPhysicalDevice, Get-PmemUnusedRegion, New-PmemDisk...}
                Manifest   1.0.0.0    PKI                                 {Add-CertificateEnrollmentPolicyServer, Export-Certificate, Export-PfxCertificate, Get-CertificateAutoEnrollmentPolicy...}
                Manifest   1.0.0.0    PnpDevice                           {Get-PnpDevice, Get-PnpDeviceProperty, Enable-PnpDevice, Disable-PnpDevice}
                Manifest   1.1        PrintManagement                     {Add-Printer, Add-PrinterDriver, Add-PrinterPort, Get-PrintConfiguration...}
                Binary     1.0.11     ProcessMitigations                  {Get-ProcessMitigation, Set-ProcessMitigation, ConvertTo-ProcessMitigationPolicy}
                Script     3.0        Provisioning                        {Install-ProvisioningPackage, Export-ProvisioningPackage, Install-TrustedProvisioningCertificate, Export-Trace...}
                Manifest   1.1        PSDesiredStateConfiguration         {Set-DscLocalConfigurationManager, Start-DscConfiguration, Test-DscConfiguration, Publish-DscConfiguration...}
                Script     1.0.0.0    PSDiagnostics                       {Disable-PSTrace, Disable-PSWSManCombinedTrace, Disable-WSManTrace, Enable-PSTrace...}
                Binary     1.1.0.0    PSScheduledJob                      {New-JobTrigger, Add-JobTrigger, Remove-JobTrigger, Get-JobTrigger...}
                Manifest   2.0.0.0    PSWorkflow                          {New-PSWorkflowExecutionOption, New-PSWorkflowSession, nwsn}
                Manifest   1.0.0.0    PSWorkflowUtility                   Invoke-AsWorkflow
                Manifest   1.0.0.0    ScheduledTasks                      {Get-ScheduledTask, Set-ScheduledTask, Register-ScheduledTask, Unregister-ScheduledTask...}
                Manifest   2.0.0.0    SecureBoot                          {Confirm-SecureBootUEFI, Set-SecureBootUEFI, Get-SecureBootUEFI, Format-SecureBootUEFI...}
                Manifest   2.0.0.0    SmbShare                            {Get-SmbShare, Remove-SmbShare, Set-SmbShare, Block-SmbShareAccess...}
                Manifest   2.0.0.0    SmbWitness                          {Get-SmbWitnessClient, Move-SmbWitnessClient, gsmbw, msmbw...}
                Manifest   1.0.0.0    StartLayout                         {Export-StartLayout, Import-StartLayout, Export-StartLayoutEdgeAssets, Get-StartApps}
                Manifest   2.0.0.0    Storage                             {Add-InitiatorIdToMaskingSet, Add-PartitionAccessPath, Add-PhysicalDisk, Add-StorageFaultDomain...}
                Manifest   2.0.0.0    TLS                                 {New-TlsSessionTicketKey, Enable-TlsSessionTicketKey, Disable-TlsSessionTicketKey, Export-TlsSessionTicketKey...}
                Manifest   1.0.0.0    TroubleshootingPack                 {Get-TroubleshootingPack, Invoke-TroubleshootingPack}
                Manifest   2.0.0.0    TrustedPlatformModule               {Get-Tpm, Initialize-Tpm, Clear-Tpm, Unblock-Tpm...}
                Manifest   2.0.0.0    VpnClient                           {Add-VpnConnection, Set-VpnConnection, Remove-VpnConnection, Get-VpnConnection...}
                Manifest   1.0.0.0    Wdac                                {Get-OdbcDriver, Set-OdbcDriver, Get-OdbcDsn, Add-OdbcDsn...}
                Manifest   1.0.0.0    WindowsDeveloperLicense             {Get-WindowsDeveloperLicense, Unregister-WindowsDeveloperLicense, Show-WindowsDeveloperLicenseRegistration}
                Script     1.0        WindowsErrorReporting               {Enable-WindowsErrorReporting, Disable-WindowsErrorReporting, Get-WindowsErrorReporting}
                Manifest   1.0.0.0    WindowsSearch                       {Get-WindowsSearchSetting, Set-WindowsSearchSetting}
                Manifest   1.0.0.0    WindowsUpdate                       Get-WindowsUpdateLog
                Manifest   1.0.0.2    WindowsUpdateProvider               {Get-WUAVersion, Get-WULastInstallationDate, Get-WULastScanSuccessDate, Get-WUIsPendingReboot...}


                PS C:\WINDOWS\system32>


------------------------Tweaking PowerShell Session Parameters
# do not leave remote sessions open.
# as of PS v3, you can disconnect a remote session and let it still run. How? use Disconnect-PSSession instead of Exit-PSSession

# ATUL
# Spend time learning here
# browse WSMan: PSDrive to what PS session configuration parameters are available
# you will find that you can customize stuff like the maximum number of remote sessions allows, session timeout values, etc.
# Group Policy in Windows Server 2012 R2 allows you to set these same session parameters 
# at potentially a domain or forest Active Directory scope.

<<<<<<<<<<<<<<<< ATUL
# try CLI on terminal

> Winrn             # this is the windows resource manager list. See just above. Long list.

<<<<<<<<<<<<<<<<

----------------Taking Control of Remote Sessions 

New-PSSession           # to create persistent remoting session
Get-PSSession           # to retrieve session metadata

# note gives an Id Session value
                Id      Name        ComputerName        State       ConfigurationName       Availability
                ---     ----        ------------        ------      -----------------       ------------
                3       Session3    dc1                 Opened      Microsoft.PowerShell    Availabile
    
Enter-PSSession -Name "Session3"    # then connect to that session now:

Exit-PSSession          # exit the session
Get-PSSession           # verify that the session is gone

Remove-PSSession -Name "Session3"       # session are more persistent, so force close it (ie nuke it)


----------------Using Variables and Alternative Credentials 

# you can store Windows PowerShell remote sessions in a variable for easier access:

$dc1 = New-PSSession -ComputerName dc1 -Credential domain\administrator

# note the specified alternate credentials -Credential parameter and your username in either format
#       domain\username    or    computer\username

# AUTHOR suggets parsing his new session output b/c parsing it proves that the entire remote session with dc1 has
# been captured in the variable $dc1

PS> $dc1
PS> $dc1 | Get-Member 

# note gives an Id Session value
                Id      Name        ComputerName        State       ConfigurationName       Availability
                ---     ----        ------------        ------      -----------------       ------------
                5       Session3    dc1                 Opened      Microsoft.PowerShell    Available


# note the object nature of the captured system means that we can use dot notation:
# try these commands on your system:

$dc1.id
$dc1.Name 
$dc1.ExpiresOn

# NO method to disconnect
# YES, use pipeline to disconnect
$dc1 | Remove-PSSession

# here dc$ is a vartiable, Remove-PSSession is an object, and the -Session paramater is a required positional parameter
# and that "required positional parameter" accept the PSSession object.

# Next - how to send Windows PS commands to a remote host WITHOTU the overhard of a persistent connection session.


--------Sending Scripts over the Network

# If you need to send a single PS statement to a remote host, best to use -ComputerName parameter.
PS> Get-Process -Name svchost -ComputerName parameter dc1

# however is have MORE THAN single PS statement to send such as an entire .ps1 script file, then use Invoke-Command
Invoke-Command 
# this leverages the "WS-Man/WinRM-based remoting" and can target one or more remote hosts simultaneously.
# use these two parameters here -ComputerName and -ScriptBlock
Invoke-Command -ComputerName dc1 -ScriptBlock { {} }
Invoke-Command -ComputerName dc1 -ScriptBlock {Get-WMIObject -Classs Win32_process | Where-Object {} }
Invoke-Command -ComputerName dc1 -ScriptBlock {Get-WMIObject -Classs Win32_process | Where-Object {$_.threadcount -gt 8} }
# here we are asking our remote host to return a list of all processes with a CPU thread count that is greater than 8.
# we will address WMI later in the book (Chapter 15)


# we can also combine persistent remote sessions with Invoke-Command
$dcone = New-PSSession -ComputerName dc1
Invoke-Command -ScriptBlock {Get-Module -ListAvailable} -Session $dcone

----------------Using Invoke-Command with Windows PowerShell Scripts 

# to make script works --> you need to temporarily modify the script exection policy on the remote machine before you 
# can send over a script for remote execution

PS> Enter-PSSession -ComputerName dc1 
[dc1]: PS> Set-ExecutionPolicy -ExecutionPolicy Unrestricted
[dc1]: PS> Exit-PSSession
PS> Invoke-Command -ComputerName dc1 -FilePath "C:\myscript.ps1"

# AUTHOR explains this
# 1st establish an interactive remote session with dc1 to relax the script execution policy
# 2nd disconnect and run Invoke-Command, specifying the fully qualified path to my .ps1 script file by
#     using the -FilePath parameter


----------------Try It Yourself
# assume you have two computers that are joined to an Active Directory domain and enabled for Windows PowerShell remoting.
# This exercise assumes you are working from a Windows Server 2012 R2 member server named MEM1 and that you want
# to perform remote operations on a Windows Server 2012 R2 domain controller named DC1.
# You should substitute our hostname values with your own computers' hostnames. Lets begin:

# 1) begin by verifying that DC1, our remote host, is open for business. Instead of ping, we can leverage
#    the Test-Connection cmdlet
Test-Connection dc1 

# 2) lets obtain the BIOS version from our remote host. Are we using WS-Man remoting here? How to tell?
Get-WMIObject -ComputerName dc1 -Class Win32_BIOS

# 3) next we look at the error messages from the remote system's System log, formatted as a list for easier reading
Invoke-Command -ComputerName dc1 -ScriptBook {Get-EventLog -LogName System | Where-Object {$_EntryType -eq "Error"} | Format-List}

# 4) If we are going to be working with DC1 for a while, why not store the remote session persistently in a variable?
$remote = New-PSSession -ComputerName dc1
#    make sure to verify the remote session is active
$remote 

# 5) Now its time to enter that session and execute a remote command directly from the context of the remote computer
Enter-PSSession -Session $remote 
Get-Process | Where-Object {$_Status -eq "Running"} | Export-Csv -Path \\mem1\c$\dc1-runningservices.csv
#    did you see what happened? we captured the running services on DC1, created a CSV report, and placed it on our local
#    computer's C: drive. Great!

# 6) We can now verify that the file exists and scan its contents:
Exit-PSSession 
Notepad "c:\dc1-runningservices.csv"

# 7) lets imagine that you need to disconnect the remote session from your local computer and you plan to resume
#    the session from yet another computer. First make note of the session name:
Get-PSSession
#    second, we will disconnect
Get-PSSession -Name "SessionName" | Disconnect-PSSession
# note
Disconnect-PSSession    # want to detach from remote connection and re-connect at later time
Remove-PSSession        # to destroy persistent remoting connections

# 8) then from the same or another computer in the same domain, we can actually pcik up the session again. Run Get-PSSession
#    to get the session name for the disconnected session, and then pick up where you left off
Enter-PSSession -Name "SessionName"


# 9) When you are finished with the session, destroy the remote session entirely
Get-PSSession -Name "SessionName" | Remove-PSSession

--------Summary Q&A Workshop


--------Summary
# you should be comfortable 
# 1) using -ComputerName parameter
# 2) interacting directly on remote system with PSSession cmdlets
# 3) sending PS commands or entire script to a remote system

--------Q&A 
# Way to tell in advance if a particular remote system is enabled for Windows PS remoting? no, but a script exists for this.
# you could try to enter an Enter-PSSession and then determine if you got in, but there are many reasons why the connection
# may fail. Lee Holmes blog addresses this. See blog.

# Possible to chain remoting sessions? Yes, but considered bad practice due to increased complexity and network overhead.
# There is one possiblity: you might not be able to connect to a particular marchine directly due to network policy. So you
# could establish a session from your computerA and enter computerB and then enter computerC.
# ie establish a session that connects to the target machine, and then nest the second remoting session inside the first machine.

# Access other PSProviders on a remote computer by using session-based remoting?
# yes, b/c when you enter a remote PSSession with another host, you are effectively sitting at the local keyboard.

--------Workshop

# create a PS script called lastbootup.ps1
# should contain the following code

Get-WMIObject -Class Win32_OperatingSystem -ComputerName localhost | 
Select-Object -Property CSName,@{n="Last Booted"; e={ [Management.ManagementDateTimeConverter]::ToDateTime($_.LastBootUpTime) }}

# note AUTHOR make sure to break the first line at the pipe and
# make sure that the Select-Object statement runs on a single line

# This script runs a query on the local host's WMI repository to fetch the last boot time.
# We need to do some datetime conversions by makind a direct call to the .NET Framework b/c the default WMI datetime format is unreadable.

# Next, send the script to a remote host on your network.
# That remote host will need to be in the same Active Directory domain as you are, or in the same workgroup with remoting enabled.

--------Quiz
# command retrieves list of cmdlets directly related to persistent sessions
gcm -noun *pssession*
Get-Comamnd alias = gcm
# valid wildcard parameter = 
-noun *pssession*

# Disconnect-PSSession vs Remove-PSSession/
Disconnect-PSSession    # want to detach from remote connection and re-connect at later time
Remove-PSSession        # to destroy persistent remoting connections

#will this run? this uses the alias for Get-ChildItem
Invoke-Command -ComputerName dc1 -Command { "c:\windows" | gci }    

# from above for comparison
Invoke-Command -ComputerName dc1 -Scriptblock {Get-EventLog -LogName System | Where-Object {$_EntryType -eq "Error"} | Format-List}
# note that you can use -Command instead of -Scriptblock
# use space padding to enhance readibility



===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 11 Implementing One-to-Many Windows PowerShell Remoting

# hypo - verify the status of all operating system hotfix status of all 25 servers in your organization
# use PS to hit all 25 servers at once, gathering the hotfix data, sending the results back to your admin workstation and
# then aggregating the results into a CSV or HTML report.

--------One-to-Many Remote Access in the Classic Scenario
# remember that -ComputerName parameter is coded separately for each command. Thus you need to read the help file for a given
# command to see whether -ComputerName accepts only a single computer name or a comma-separated array.
Get-Help Get-WmiObject -Parameter ComputerName
# note we can specify any kind of string object, include csv list:
Get-WMIObject -ComputerName mem1, mem2, -Class Win32_BIOS
# or we can take a file containing a one column listing of any number of computer names, extract its contents
# and feed the string as an array to the -ComputerName parameter
Get-WmiObject -ComputerName (Get-Content "c:\servernames.txt") -Class Win32_BIOS


# Here we run the statement to retrieve the commands that have the -ComputerName parameter but do NOT have -Session parameter
Get-Command | Where-Object { $_.Parameters.Keys -contains "ComputerName" -and $_.Parameters.Keys -NotContains "Session" }

----------------Weakness with the Classic One-to-Many Model
# classic Windows PowerShell relies on DCOM and RPC thus you will NOT have the efficiency available from contemporary PS remoting.
# when contacting many hosts, each host is contacted one at a time, not in parallel.

# AUTHOR hypo script
$comp = "dc1", "mem1", "mem2"
$data = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $comp 
$data | select @{Name="Host"; Expression={$_.PSComputerName}}, Caption, Version, BuildNumber | Format-Table -AutoSize
# note PSComputerName property is an alias to the _SERVER property
# note that WS-Man remoting nor PSComputerName are available in PS v2.
# code above does this:
# 1st list, define a variable $comp that contains array of server hostnames
# 2nd line, create $data that uses classic remote access to retrieve operating system metadata for all 3 computers using WMI.
# TIP - author also created a hash table to create a custom column name using @
# hash table = key/value pairs that are the Swiss Army knife that is useful when you more complex data that you need to
#              store in a single object.
# 3rd line, we construct a display pipeline that selects only four output columns and then each column will 
#           display ALL the data (which avoids data truncation).

# note, if doing this for 5 machines then takes seconds, if doing for 300 machines, will take 1 hour (?).


--------One-to-Many Remoting with Persistent Sessions (true remoting session)

# focus on persistent remote session objects

# hypo - need to check the contents of Run Registry key on two of your Windows Server 2012 member servers:
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run

# begin by
# 1) creating a variable to hold our two remote servers and verifying object was successfully created:
$s = New-PSSession -ComputerName mem1, mem2 
PS> $s 

                Id  Name        ComputerName        State       ConfigurationName       Availability
                --  -----       ------------        -----       -----------------       ----------------
                2   Session2    mem2                Opened      Microsoft.PowerShell    Available
                1   Session1    mem1                Opened      Microsoft.PowerShell    Available

# 2) use Invoke command to enumerate the contents of the Run Registry key
#    note: we can NOT use Get-ChildItem to retrieve values from Registry PSProviders, so use Get-ItemProperty instead
Invoke-Command -Session $s -ScriptBlock {}
Invoke-Command -Session $s -ScriptBlock {Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"}

# note that PS remoting session output includes PSComputerName property by default so its easy to see where output came from


----------------Watch Out for Line Continuation 
# PS will understand line breaks as | or `
# anything else will cause an error

----------------Working with Disconnected Sessions 

# hypo - suppose that you created a persistent remote session to three servers named DC1, DC2, DC3

# note -Name parameter used here to give our task a friendly name
$s = New-PSSession -ComputerName dc1,dc2,dc3 -Name ITTask -Credential domain\tech
Enter-PSSession -Session $s 
# then you get strange errors from DC1 and your not sure. Your boss instructs you to dissconnect the session so she can
# log in from her workstation:
Exit-PSSession 
Get-PSSession -Name ITTask | Disconnect -PSSession
# Now our boss can run Get-PSSession to view the dissconnected session metadata and then connect to it:
Get-PSSession -ComputerName dc1,dc2,dc3 -Name ITTask
$admin = Connect-PSSession -ComputerName DC1 -Name ITTask -Credential domain\administrator
Enter-PSSession -Session $admin 

# note Connect-PSSession is used to resume a dissconnected session


--------Managing Session Configurations

# can send PS commands or script files to up to 32 remote computers simultaneously by default.
# this is parallel processing

# If you have a beefy administrative workstation and need to bump up the maximum number of remote targets
# you can add -ThrottleLimit parameter to your Invoke-Command

# hypo
# suppose you have a text file with 75 computers that you need to feed into the pipeline.
# you need to send the PS script config.ps1 to each of the 75 remote boxes:
$fanout = New-PSSession -ComputerName (Get-Content "C:\scripts\computers.txt")
Invoke-Command -Session $fanout -FilePath "c:\scripts\config.ps1" -ThrottleLimit 75
# if there were 100, then more computers (those additional 25) would be added as each one completed their work

----------------Importance of Unhiding Extensions 
# you may use Windows Explorer to create a new PS script file named muscript.ps1 but only to 
# discover that Windows PS does NOT recognize the file as a PS script
# why?
# Windows hides extensions for known file types by default. But as PS scripters, we need to see those extensions all the time.
# Done already by ATUL in 2010.


----------------Creating a Constrained Endpoint
# when creating a PS Remote Session: you enable the following:
# WinRM server
# defining Windows Firewall exceptions
# create HTTP or HTTPS listener
# and, create a connection endpoint

# You can define custom configuration endpoints to constrain or limit the stuff that particular remote users can do.
# can also use a custom session configuration file to set up the environment to your liking (ie loading custom Windows 
# PS modules)
# note this is a big deal b/c traditional profile setups do not run Windows PS remote sessions.

# hypo
# we want to create a custom session configuration to allow our help desk staff to run Get commands on our domain controller
# but no other Windows PS commands

# 1) create a new PS session configuration file, using the cmdlet for this:
New-PSSessionConfigurationFile -Path "c:\scripts\GetCommandsOnly.pssc" -VisibleCmdlets Get-*

# 2) then register the new session configuration with the local system. You will be prompted for confirmation
#    and informed that the action restarts the WinRM service
Register-PSSessionConfiguration -Name GetOnly -Path "c:\scripts\GetCommandsOnly.pssc"

# 3) add a startup script to your custom session configuration
Set-PSSessionConfiguration -Name GetOnly -StartupScript "c:\scripts\get-startup.ps1"

# 4) remote users need Execute permission on the session configuration in order for it to work.
#    Fortunately, we can use the -ShowSecurityDescriptorUI switch to accomplish that goal:
Set-PSSessionConfiguration -Name GetOnly -ShowSecurityDescriptorUI 

# 5) to retrieve a list of the built-in session configurations along with any that you created, run this:
Get-PSSessionConfiguration | Format-List -Property Name, Permission 

# note the trick to constained endpoints is taking pains to ensure that our help desk staff conntect to the target computer
# with the correct session configuration.
$s = New-PSSession -ComputerName DC1 -ConfigurationName GetOnly 


--------One-to-Many Remoting with the Windows PowerShell ISE

PS> ise             # launch PS ISE

----------------Creating a Remote Session Tab 
# start new remoting session in 3 different ways
New Remote PowerShell Tab button            # 1) button 
File>New Remote PowerShell Tab fom menu     # 2) menu
Ctrl-Shift-R                                # 3) keyboard

# then give hostname of the computer you want to remotely connect. Then specify alternative credentials.

----------------TRY One-to-Many Remoting with the Windows PS ISE 
# hypo Run Windows ISE on my DC1 server and making remote connections to two member servers, MEM1 and MEM2.
# or you can try this a three VMs (virtual machines)

# 1) launch ISE with administrative credentials (title bar says Administrator: Windows PowerShell ISE).
# 2) close the Commands add-on display if opened by default
# 3) File>New Remote PowerShell Tab and establish an admin session on another computer in your environment.
# 4) Once you see the shaded remote tab, click the Show Script Pane Top button to place a blank .ps1 script pane
#    above the "live" console session below.
# 5) Goal of the script we are about to create is to generage a text-based report that lists the Windows roles and features
#    that are currently installyed on the local system.
#    5a) create a folder named scripts in the root of your local server's C: drive. We will use this folder as a central
#        repository for reports generated on remote machines.s 
#    5b) Add the following lines to your new script file, verify your doing this in the remote tab
         Import-Module -Name ServerManager 
         Get-WindowsFeature | Where-Object {$_.Installed -eq "True"}
#        note - if your running PS v3 or later, then you dont need the Import-Module statement.
# 6) Now lets modify the Get-WindowsFeature pipeline to generate a concise list of installed roles and features
#    on the remote computer.
     Get-WindowsFeature | Where-Object {$_.Installed -eq "True"}| Format-List -Property Name, DisplayName, Subfeatures -Expand Both
#    note - author used -Expand Both parameter and value to ensure that the subfeature hash table displayed all of its contents
#           instead of truncating like it normally does.
# 7) Script almost done. Lets make pipeline even longer by making the output filename pickup the hostname of the local computer
#    and copying the file to the scripts folder on our dc1 server. Complete script is here:
     Import-Module -Name ServerManager 
     $hostname = Hostname 
     Get-WindowsFeature | Where-Object {$_.Installed -eq "True"} | Sort-Object -Property Name |
     Format-List -Property Name, DisplayName, Subfeatures -Expand Both | Out-File "c:\$hostname.txt"
     Copy-Item -Path "c:\$hostname.txt" -Destination "\\dc1\c$\scripts"

# TIP if you recieve an "Access is denied" error when performing the file copy, you may need to adjust any NTFS or shared
# folder permissions as needed and retry. You might need to close and reopen the remote session to refresh 
# the security account token associated with the session as well.

# 8) Before you close the remote tab, click File>Save As to save your new script. Put it in your local system's
#    scripts folder (you should see the report from the remote machine in here as well), and name it 
     remote-features.ps1
# 9) Close the remote tab. Remember that you should be at your source computer (ie dc1 box).
# 10)From the local session, either in the ISE or from a PS console session, use one-to-many reporting to 
#    blast the script at any other remoting-enabled hosts in your network:
     $computers = New-PSSession -ComputerName dc1, mem2 
     Invoke-Command -Session $computers -FilePath "c:\scripts\remote-features.ps1"
#    if you receive errors, closely scrutinize the first few lines of the error message and debug accordingly.
#    Welcome to the wild world of administrative scripting.

--------Passing Input to Remote Commands 

# Core principle of any automation or scripting language is to modularize your code as much as possible by
# parameterizing yoru function calls. What this means is:
# Hypo - need to craft a PS script that gathers the most recent entries from a particular Event log.
# Some days we pull from the Application log, and other days we pull from the Security log.
# We also want to perform this action on multiple computers simultaneously using PS scripting.
# How?
# launch ISE, save your script file,.
# 1) define two variables to hold an Event log name and values for the number of newest entries 
$log = "Application"
$newest = 5
#    these are default values.
# 2) use Invoke-Command with param() function and the -ArgumentList parameter
Invoke-Command -ComputerName dc1,mem1,mem2 -ScriptBlock { param() } -ArgumentList $log,$newest 
Invoke-Command -ComputerName dc1,mem1,mem2 -ScriptBlock { param() Get-Eventlog -LogName $xxx -Newest $yyy } -ArgumentList $log,$newest 

# complete command
Invoke-Command -ComputerName dc1,mem1,mem2 -ScriptBlock { param($logname,$entries) Get-Eventlog -LogName $logname 
-Newest $entries } -ArgumentList $log,$newest 
#    Goal is to modularize two Get-EventLog parameters -LogName and -Newest
#    to do this, we prepend the param() function to our scriptblock.
#    So here $logname corresponds to -LogName parameter value and $entries corresponds to -Newest parameter value
#    To actually pass arguments into the script block, we call -ArgumentList and specify the two variables
#    Order in which this works is the ordering of the variables listed.
#    B/c $logname occurs first in the param() function, $logname therefore receives as input the value of $log
#    Likewise, $entries recieves as input the value of $newest
#    Note, in Windows PowerShell, the PSComputerName property is alwasy returned in the output so when dealing with multiple 
#          remote computers, you will know which output belongs to which remote computer.
#    So, going forward, we can simply change the value for $log and $newest in the code and re-run the Invoke-Command to get 
#    entries of differnet lengths from different logs.

----------------A Bit on "Implicit Remoting"

# allows you to load modules on the local computer that are not available locally.
# Hypo: you could load up the Active Directory module on a member server or adminstrative workstation.
# RSAT = Remote Server Administrative Tools to exist as well. (not explained here)

----------------Importing a Module from a Remote Computer 

# requires you to have an open session with the target system. Easy to do:
$s = New-PSSession -ComputerName dc1 
# next, instruct PowerShell to load the Active Directory module into our current remote session:
Invoke-Command -Session $s -ScriptBlock { Import-Module -Name ActiveDirectory }

# now Active-Directory module is in memory on the remote system, we have NOT YET made those cmdlets
# available on your local box.
PS> Import-PSSession -Session $s -Module ActiveDirectory -Prefix ACD 
# this will import all commands form the remote Active-Directory module and prepends them with the prefix ACD
# AUTHOR just made up the ACD prefix off the top of his head, your goal is to think up a prefix that is
# 1) easy to remember and (2) not likely to conflict with any other prefixes in use on your local system.
# Now, essentially, you have access to the imported commands, which you can use in a local PowerShell session.
# Under the hood, those commands actually execute on the remote system.
# example you can retrieve a list of the local/remote commands
Get-Command -Noun ACD*
# this technique is called implicit remoting b/c you essentially execute locally imported cmdlets and use them as such
# when in fact those commands are done locally but executed remotely.

# also, need to destroy the remote session (and any imported modules) when you are finished
$s | Remove-PSSession

# ATUL (done on my own, learning)
Get-Alias   # lists all aliases available on the machine


--------Summary Q&A Workshop

--------Summary 
# now you know how to remotely execute a Windows PowerShell
# can also do this from your smartphone or tablet! --> If you have at least one Windows Server 2012 R2 computer in your network
# you can stand up a PowerShell Web Access gateway and securely perform PowerShell remoting from potentially any device.

--------Q&A 

# (1) deserarlized vs serialized vs full fidelity 

# why can I only see properties and not methods of output returned by remote computers?
# the data you receive from remote computers with PowerShell is deserialized XML.
# therefore, you are essentially seeing a read-only snapshot of that data, and will have only properties
# available to you (note that technically there are a few methods, but those methods are NOT useful in most cases)
# example of this:
PS>Invoke-Command -ComputerName dc1 -ScriptBlock {} | Get-Member
# actual command
PS>Invoke-Command -ComputerName dc1 -ScriptBlock { Get-WmiObject -Class Win32_Process | Select-Object -Property Name, { $_.GetOwner().User } } | Get-Member
# this returns a "deserialized object data type"
            TypeName: Deserialized.Selected.System.Management.ManagementObject

# to avoid this, you can be more selective in the data you pull from the remote system and do your selections and other operations locally:
PS>Invoke-Command -ComputerName dc1 -ScriptBlock { Get-WmiObject -Class Win32_Process } | Select Name, { $_.GetOwner().User } | Get-Member
# This returns a 
            TypeName: Selected.System.Management.Automation.PSCustomObject

# AUTHOR "of course, if you need the remote data to have 'full fidelity' then you should NOT serialize or deserialize anything, but
#        but instead establish an interactive session with the remote computer and operate directly on that system".

# (2) if you need to do workgroup-based PowerShell remoting, but am uncomfortable with the lack of security offered by the
#     TrustedHosts list. Then how tough is it to set up HTTPS authentication?
#     Its a fair amount of work and potentially expensive, especially if you need to purchase a 
#     Secure Sockets Layer (SSL) ditigal certificate from a public certificate authority (CA).
#     Actually setting up the HTTPS listener involves, surprisingly, no PowerShell, but a lot of Winrm.exe and 
#     work in the Certificates Microsoft Management Console (MMC) snap-in.
#     For HTTPS authentication for Windows PowerShell remoting in a nondomain environment, see
#     Don Jones' free eBook Secrets of Windows PowerShell Remoting at http://is.gd/7u8gWo.  Is exhaustive for detail.

# (3) is session data passed over a remote Windows PowerShell connection encrypted?
#     In an Active Directory domain environment, Kerberos provides for mutual authentication and never transmits the user's
#     passwords in any form. The session (payload) data is also encrypted by using HTTP-Kerberos.
#     In nondomain environment, we are NOT using Kerberos, so unless you have installed SSL certificates or use
#     using Internet Protocol Security (IPsec), your session data will traverse the network connection in plain text.

--------Workshop

# Use Windows PowerShell remoting to obtain a list of the top 10 processes on each of your other systems, sorted
# by CPU utilization in descending order. Figure out how to combine all the remote data into an HTML report.

# Download the MakeCert.exe command line tool from the Windows Software Development Kit (SDK, located at http://is.gd/XDaH3s)
# Figure out how to create self-signed digital certificates and bind them to the listeners on two non-domain-joined computers. 
# Next, configure remoting between the two computers to use SSL encryption.

--------Quiz

# 1) in an Active Directory domain environment, the following Windows PS statement will run as expected
Invoke-Command -ComputerName 192.168.1.2, 192.168.1.23 -ScriptBlock { Get-Process - Select-Object -First 10 }
#    Note this will NOT work, as in a domain environment, Kerberos is the default authentication protocol. As it happens,
#    Kerberos does not accept IP addresses, but only DNS hostnames. Remember this, as you embark on Windows PS remoting sessions.

# 2) You can use WSMan PSDrive to view and edit Windows PS session configuration properties.
#    Windows PS session configuation data is intimately tied to the WSMan-based endpoint crated when you ran Enable-PSRemoting
#    So we can probe the WSMan PSDrive to get to those values.

# 3) Which of the commands completely destroys a stored Windows PS remoting session?
     Exit-PSSession
     Remove-PSSession
     Disconnect-PSSession
     Destroy-PSSession

#    Remove-PSSession  --> correct

#    These dont work:        
#    Exiting a remote PS session leaves the persistent session open.

#    Diconnecting a remote PS session "hangs up" the connection but allows it to be resumed later on the local computer
#    or even a remote machine.

#    We use Remove-PSSession to completely destroy a remoting session.


===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 12 Deploying Windows PowerShell Web Access

# intro Windows PS Web Access WPSWA
# setting up WPSWA gateway
# testing WPSWA gateway user experience
# manaing the gateway

# Hypo - when is this needed? your on vacation, with iPad and need to fix corporate Exchange Server.
#        you have a WPS script stored inside the file system of the Exchange Server.
# Windows Server 2012 and Windows Server 2012 R2 include a new feature called Windows PowerShell Web Access (PSWA) that gives you
# remote PS capability which can maintain maximum network security.

--------Introducing Windows PowerShell Web Access

# sometimes called "PowerShell through a keyhole" b/c you tightly control
# (1) which domain users can access the gateway
# (2) which remote systems the authenticated users are allowed to connect to

# the only requirements of PSWA is that the web browser must able to (1) communicate with HTTPS, (2) accept HTTP cookies, (3) run JavaScript
# therefore, 
# no requirements on runtime like .NET, Java, Silverlight, or Flash.
# no dedicated app is required to use the gateway (so we could run PS from our Android phone)

# SCHEMATIC DAIGRAM OF Windows PSWA gateway

                                                                      Mail Server 

                                                    <---------------->Domain Controller 
Remote User <-----> Internet <-----> PSWA Gateway   
                                                                      SQL Server

                                                    <---------------->SharePoint Server

# Remote user is an Active Directory administrator making a secure HTTPS connection over the Internet to the PSWA gateway

# PSWA gateway is an IIS (Internet Information Services) web application.
# Internet accessiable means that you must place the gateway on a screened subnet that is firewall protected (beyond this book).
# IIS server communicates with your internet Active Directory domain controllers to authenticate the remote user.

# PSWA authorization rules grant selected user/group accounts remote PowerShell access to pre-specified hosts on the internal network.
       -------------                                                                      -------------------

# the constraint of the authenication and authorization implies "Windows PowerShell through a keyhole"

# considered a gateway b/ the feature provides users the ability to pass through the gateway to the target machines that they
# need to administer remotely.

--------Setting Up the Windows PSWA Gateway
# requires 3 discrete configuation steps:
# 1) Installing the Windows PSWA feature
# 2) Configuring the gateway
# 3) Defining authorization rules

----------------1) Installing the PSWA Feature 
# in Windows Server 2012 R2, we could always use the Server Manager GUI tool to add the PSWA feature.
# However, this is Windows PS book, so we cant rely on a GUI. 
# Use CLI here.

# 1a) lets list the feature itself from an elevated Windows PS console session:
PS> Get-WindowsFeature -Name *powershellweb* | Format-List -Property Name, DisplayName, Description

# 1b) install the feature
PS> Install-WindowsFeature -Name WindowsPowerShellWebAccess -IncludeAllSubFeature -IncludeManagementTools
# its easy to leave out the -IncludeManagementTools switch and then wonder where the role or feature's administrative
# interface went. This step will actiate the IIS web server if dont already have the role installed on the local box.

# feature installation also gives you a new Windows PowerShell module called powershellwebaccess
# lets explore teh powershellwebaccess commands
PS> Import-Module -Name PowerShellWebAccess
PS> Get-Command -Module PowerShellWebAccess

# this is small module b/c there is not that much to managing the gateway.
# in the next phase, we will install the gateway itself, and then create the authorization rules.

----------------Configuring the Gateway 

# we use the Install-PSWAWebApplication to actually create the PS Web Access website.
# unless you specify otherwise, the gateway takes over the IIS default website and packs the bits into a virtual 
# directory named pswa

# to get a quick view of the function's parameters, invoke the command
Show-Command Install-PSWAWebApplication

# this shows a dialog box with the optional parameters (check the box)
# 1) Confirm: prompts you for confirmation before performing the function's actions
# 2) UseTestCertificate: uses a self-signed digital certificate for authentication and encrpytion (good for testing
#    testing environments, but definitely NOT for production).
# 3) WebApplicationName: virtual directory name, defaults to pswa
# 4) WebSiteName: friendly name of the IIS website, defaults to Default Web Site
# 5) WhatIf: tests what would happen if the command executes, but does NOT actually execute anything

# ATUL
# note - the Show Command window can serve as a useful tutor in learning command parameters

# if you leave out the -UseTestCertificate parameter, then you will need to install an SSL certificate from your
# company's PKI or from a public CA b/c the PSWA gateway only uses HTTPS for connections.
# Obviously, this method is preferred anyway for security reasons.

------------------------Using Your Own SSL Certificate
# the problem with binding a self-signed SSL to your PSWA website (or any production website) is that no computer on earth
# will trust that certificate b/c it has not been signed by a trusted certification authority (CA).

# One solution is to request a Secure Sockets Layer (SSL) certificate from your organization's public key infrastructure (PKI);
# Active Directory Certificate Services (AD CS) can do this. But even then, ther certificates may be trusted by all computers
# within your organization, but out of the box there is no trust from any Internet-based hosts.

# a costly solution is to purchase an SSL certificate from a public CA like GoDaddy, Entrust, or Thawte.
# In any event, you can bind the digital certificate to your IIS website either by using the IIS Manager tool or
# by using the New-WebBinding PowerShell cmdlet.
New-WebBinding

# AUTHOR, in my environment, I already bound an SSL certificate to the default web site on my PSWA host, so I will 
# just run the function with all defaults:
PS> Install-PswaWebApplication

                    Creating application pool pswa....

                    Path                : /pswa 
                    AppliationPool      : pswa_pool 
                    EnabledProtocols    : http 
                    PhysicalPath        : C:\Windows\Web\PowerShellWebAccess\wwwroot

# did you see what happened?
# TIP open the IIS Manager MMC console to verify the creation of the new application pool and virtual directory on the target website.

# At this point, you can fire up a web browser and point it to the PSWA gateway.
# For instance, my gateway is found at http://mem1.earthfarm.lan/pswa
# this generates a web login screen called Windows Server 2012 from Microsoft and called the Windows PowerShell Web Access
# Notice the red Certificate Error warning in the address bar. You will see this bar if you use a self-signed certificate.
# Although we can view the logon screen, we will NOT get into a remote PS connection no how hard we try. This is b/c we have NOT
# created any authorization rules yet.

----------------Defining Authorization Rules 

# before you run Add-PSWAAuthorizationRule to actually define a rule, you need to peform two core Active Directory related
# actions and one PowerShell action

# - create one or more global groups for authorized PSWA target computers
# - create one or more Windows PowerShell session configuration files to customize the PS session environment for PSWA users

# you can be as relaxed or as controlling as you want to be when defining these authorization rules and session configurations
# AUTHOR choose to do the following in his lab environment:
# - use Domain Admins built-in global group to contain my PSWA users
# - create a global group called InfServers that contains the servers I want to allow particapting with PSWA
# - use the default Windows.PowerShell session configuration b/c I dont want to constrain administrator's ability to 
#   run commands on the remote servers
# Now the actual Authorization rules definition:
Add-PSWAAuthorizationRule -ComputerGroupName domain\InfServers -UserGroupName "domain\Domain Admins" -ConfigurationName Microsoft.PowerShell

# to verify that this rule took, we run the following statement
PS> Get-PswaAuthorizationRule 

#                Id  RuleName    User                            Destination            ConfigurationName    
#                --  -----       ------------                    -----------            -----------------    
#                0   Rule 0      companya\domain admins          companya\infservers    Microsoft.PowerShell 

# AUTHOR made minor mistake b/c forgot to give the authorization rule a friendly name by specifying the -RuleName parameter
# Breakdown of major parameters
#       ComputerGroupName       This is the Active Directory group that specifies the servers that PSWA remote users are allowed
#                               to connect to. If you look at the Add-PSWAAuthorizationRule help, you will see that the you can
#                               use other parameter sets if you neeed to specify individual computers by name.
#       UserGroupName           Again, here you can leverage another parameter set with the -UserName parameter if you
#                               need to specify individual users instead of entire AD groups.
#       ConfigurationName       This is the PowerShell session configuration that will be loaded when a PWSA user is
#                               authenticated and connects to an allowed remote target.
#
# for test environments, you can use the following wildcard syntax to create a fully wide-open PSWA authorization rule
Add-PSWAAuthorizationRule -Username * -ComputerName * -ConfigurationName *

# obviously you should NEVER do this in a production environment

# NOTE in IT security, we draw a clear line of delination between authentication and authorization.
# - authentication refers to validating a user's credentials. With PSWA, it is IIS and Active Directory which handle the task.
# - Then once a user is authented by the identify provider, their account may be authorized to access network resources up any
#   preconfigured permission limits.
#   With PSWA, your authorization rules determine what your authenticated users can do on which remote systems.

--------Testing the Windows PSWA User Experience

# now need to test out the PSWA gateway. Fire up a web browser and connect to your PSWA server address.
# you will see at least some version of the Windows Server 2012 box = Windows PowerShell Web Access
# note that this Windows PSWA logon page gives remote administrators a lot of flexibility in terms of how their session operates.
                User name:
                Password:
                Connection type:        Computer Name 
                Computet name:
                Option Connection Settings 
                Destination computer credentials (if different from gateway)
                    User name:
                    Password:
                Configuration name:     Microsoft.PowerShell
                Authentication type:    Default 
                Use SSL:                No 
                Port number:            5985 
                Appliation name:        WSMAN 

                            SIGN IN BOX TO CLICK

# if you expand the Optional connections settings, you will see additional parameters you can leverage to customize your session
#   - Destination computer credentials: this allows you to authenticate to the gateway with your previously given credentials,
#                                       run the remote PowerShell session under another identity.
#   - Configuration name:   No browse option. You need to know the name of the session configuration you need, or you will see
#                           the default choice, Microsoft.PowerShell populated by default.
#   - Authentication type:  Choices are Basic, Negotiate, CredSSP, Digest, or Kerberos
#   - Use SSL:  you will want to specify Yes here unless you have a compelling reason not to do so (ie for troubleshooting)
#   - Port number:  although your initial connection to the gateway happens on the standard HTTPS port (TCP port 443),
#                   remebmer that we are also using Windows PowerShell remoting which usese TCP 5985 by default.
#   - Application Name: leave this option open, it specifies WS-Man remoting.

# Error message occurs if your user account is not authorized to use the gateway.
# If your user account does match your authorization rule, then you are shuttled to the target computer and you will see
# CLI for the target computer in the form of a tab enabled window.

----------------Running Remote Windows PowerShell in a Web Browser 
# explains the controls for the CLI for the target computer in the form of a tab enabled window.
# - Submit:     click this button to execute your current PowerShell statement
# - Cancel:     this button breaks out of the currently executing PowerShell code just like ControlC 
# - Tab Complete:
# - History:
# - Save:
# - Exit:
# remember that you are actually logged into the remote system, therefore, any Out- or Export- output you save to C: drive
# will be visible in the file system on THAT computer and NOT on your remote machine.

----------------Disconnecting and Reconnecting Sessions 

# clicking Save instead of Exit, will Save that session on that remote box until the session timeout specified in your
# configuation file.

# TIP as discussed in the about_remote_disconnected_sessions help file, we can specify how long disconnected sessions 
# remain active on a system in several ways
# - we can modify the value of the WSMan setting IdleTimeout
# - we can also run New-PSSessionOption from within PSWA, specifying a value for the -IdelTimeout parameters
# - you could also include the PSSession idle timeout value you need in your session configuration file.

# you can choose to either resume a previously disconnected session or create a brand new session

# Hypo -    lets assume your current authorization rule allows your user account to access two servers MEM1 and MEM1
#           then you use the PSWA gateway to obain a PowerShell command prompt on MEM1. Can you now remote to MEM2?
#           No. PSWA will not allows you to "chain" remoting session by default. Even if your user account is otherwise
#           authorized to connect to that 2nd system directly thru the gateway. You can work around this well-known
#           "2nd hop" authentication problem, but this is beyond the scope of this book.

--------Managing the Gateway

# what is required for ongoing maintenance? we return to Windows PS and not browser.
# Hypo - one of your domain users complains that he cant get access to target server MEM1.
#   start by checking the status of our PSWA authorization rules:
PS> Get-PswaAuthorizationRule
#   see that
#                Id  RuleName    User                            Destination            ConfigurationName    
#                --  -----       ------------                    -----------            -----------------    
#                0   Rule 0      companya\domain admins          companya\infservers    Microsoft.PowerShell 
#                1   Rule 1      companya\maurice                companya\mem2          Microsoft.PowerShell 
#
#   so can see that Maurice's user account is allowed access to MEM2, but since his account is not a member 
#   Domain Admins, he is NOT authorized to connect to members of the infservers global group, which happens
#   to include MEM2.
#   Then we add Maurice's user account to Domain Admins.
#   Then we remove authorization rule 1:
Remove-PswaAuthorizationRule -Id 1
#   To verify Maurice's access, let use Test-PswaAuthorizationRule:
Test-PswaAuthorizationRule -ComputerName MEM2 -UserName "companya\maurice"
#   If you get nothing back then that means user's account is NOT picked up by any authorization rule.
#   If you get a match, you will see the Get-PswaAuthorizationRule output that matches the user.
#   Finally, if your security needs dictate that you remove the entire PWSA instance, you can issue a 
#   command similar to the following (here lets assume you installed the gateway using default values and with
#   the test certificate).
Uninstall-PswaWebApplication -DeleteTestCertificate

# Next Section

# Now lets close this section with getting some practice.
# Before you Try It Yourself, be forwarned that you need to have a test pod already configured to follow my steps
# in order. Specifically, my test lab looks like this:
# - Virutal machine (VM) named DC1 that is configured as an Active Directory domain controller and a PSWA gateway.
# - Two additional VMs on the same logical network that will represent allowed and disallowed PSWA targets.
# now do the Try It Yourself

----------------Try It Yourself - Locking Down Your Windows PSWA Gateway

# Your task here is to give Raymond Bond, your help desk employee, remote access to a single Windows Server host
# named MEM2. An additional constraint is that Raymond should have only the ability to issue Get commands during his
# remote PowerShell sessions with MEM2.
# To prepare for this exercise, create a standard Active Directory user named Raymond Bond and set up a PSWA gateway
# with default values.
# 1) begin by logging on locally to our domain controller/PSWA gateway, then firing up an elevated PowerShell console session,
#    then define a new session configuration file:
    New-PSSessionConfigurationFile -Path "C:\GetSession.pssc" -VisibleCmdlets Get-* -SessionType RestrictedRemoteServer

# 2) Next, is to register the GetSession session configuration file with the gateway host:
    Register-PSSessionConfiguration -Path "C:\GetSession.pssc" -Name "GetSession" -Force 

# 3) Mistake. We need to change the security descriptor on our GetSession configuration to give Raymond Read and Execute permissions:
    Set-PSSessionConfiguration -Name GetSession -ShowSecurityDescriptorUI

# 4) Now create our new PSWA authorization rule
    Add-PswaAuthorizationRule -ComputerName mem2.companya.pri -UserName "companya\rbond" -ConfigurationName "GetSession" -RuleName "HelpDesk"

# 5) Open web browser on the gateway and browse to the Windows PSWA login page. Specify Raymond's username and the name of the 
#    target computer. (I have MEM2, but you should substituted the name that matches your own environment).
# Did he get access to MEM2? no? why?

# 6) Problem here is that the default PWSA connection binds to the Microsoft.PowerShell session configuration, which Raymond
#    has no access to. Therefore, need to go back to the login page, expand the optional connection settings, and change
#    the configuration name to GetSession.

# 7) You should try some standard Get commands such as Get-Service, Get-Process, Get-Children. Do they work ok? They should work fine
#    b/c Raymond uses a session configuration that permits Get commands.
#    Note - we forgot to specify the RestrictedRemoteServer session type in our GetSession configuration file, even Get commands
#    would fail b/c, PowerShell commands always terminate by default with Out-Default. That is not a Get command, so...

# 8) Now try issuing non-Get commands such as Test-Connection, Set-Date, New-Alias. You should find that these operations fail.

# 9) To finish up, log out and try to connect Raymond to your other server. You should find that this action fails as well.

# 10) If you receive errors or see unexpected behavior, remember to research the help files and review your settings
#     for your authorization rules and PowerShell session configurations, especially their permissions.

--------Summary Q&A Workshop

--------Summary
# learned how to run remote PS sessions from yrou smartphone.
# Windows PSWA gateway is a great response to the vendor infighting and incompatabilities that we systems administrators have
# to deal with every day.
# Next - explore how to give Windows PS the ability to multitask.

--------Q&A 

# I dont have $ to purchase a public SSL certificate, and I dont have the time to deploy AD CS.
# Can I use a self-signed certificate with PSWA in a production domain?
# Yes, you can but the administrative overhead is unnecessary. By using a self-signed certificate, all your users will see
# repeated certificate errors when they connect to the gateway. You could use Group Policy to propogate the certificate
# to your users' computer certificate stores, but that is NOT a good idea on general principle.
# In sum, b/c the number of people using the PSWA gateway is probably small, you can get away with using a self-signed 
# certification in production if its your only option. The session data will, in fact, be encrypted with SSL/TLS.

# I use an iPad to access our company's PSWA gateway, and I dont seem to have a Tab key. How to use PS tab completion?
# Look at the bottom control bar once your in a PSWA PowerShell session. See the Tab Complete button? Click that 
# for autocompleting a command, parameter, or enumeration value.

--------Workshop

# In you test lab environment, deploy a Windows PSWA gateway that uses an SSL certificate issued by your very own AD CS
# certification authority. (Yes, author is trying to get reader to learn about other aspects of Windows system administrator).
# Next, secure the gateway by implementing session configuration files and authorization rules.
# Finally, use Windows PSWA to get a list of the currently running service on the local machine, but send the results in CSV format
# to another server on your network.

--------Quiz

# Windows PSWA gateway works on most any web browser as long as the browser supports JavaScript. Low system requirements are PSWA
# great strengths. As long as your web browser can connect via HTTPS, accept browser cookies, process JavaScript code.

# Net effect of following this authorization rule?
Addd-PswaAuthorizationRule * * *
# any user is allowed to any target host. Here we supply wide open wildcard values to the -Username, -ComputerName, 
# and -ConfigurationName parameters.

# You can install the PSWA gateway on an IIS website other than the default web site. True.
# By specifying the -WebApplicationName and -WebSiteName parameters, you can indeed host a PSWA gateway instance
# on an IIS server that may, for example, already allocate the default web site to another application.

===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Part 5 Putting Windows PowerShell to Work
===========================================================================================

===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 13 Multitasking Windows PowerShell

# Note that once you execute a command(s) then you lose control of PS until the command execution is completed.
# This is by design, you give a set of instructions, and it executes. Built-in job architecture exists allowing multitasking.

--------Investigating the PowerShell Job Architecture

# Unix/Linux has the ability to send shell commands to the background for "behind the scenes" processing. Now PS as well.

PS> Get-Command -Noun Job

                CommandType     Name                                               Version    Source
                -----------     ----                                               -------    ------
                Cmdlet          Debug-Job                                          3.0.0.0    Microsoft.PowerShell.Core
                Cmdlet          Get-Job                                            3.0.0.0    Microsoft.PowerShell.Core
                Cmdlet          Receive-Job                                        3.0.0.0    Microsoft.PowerShell.Core
                Cmdlet          Remove-Job                                         3.0.0.0    Microsoft.PowerShell.Core
                Cmdlet          Resume-Job                                         3.0.0.0    Microsoft.PowerShell.Core
                Cmdlet          Start-Job                                          3.0.0.0    Microsoft.PowerShell.Core
                Cmdlet          Stop-Job                                           3.0.0.0    Microsoft.PowerShell.Core
                Cmdlet          Suspend-Job                                        3.0.0.0    Microsoft.PowerShell.Core
                Cmdlet          Wait-Job                                           3.0.0.0    Microsoft.PowerShell.Core

----------------Starting a Background Job 

# PS still quirky about how PS background jobs run. Parent and Child jobs will show this clearly.

# lets start simple:
# create a new job that searches our E: drive for all Abode Acrobat PDF files:
$gci = Start-Job -ScriptBlock { Get-ChildItem -Path "E:\" -Filter *.pdf -Recurse }
# first try this Get-ChildItem command without using a job, as the PS session will then lock up for a long time. However,
# when you submit a job, you can immmediately resume your work in the shell.
# ATUL so why does PS lock up?
# second, notice that I saved the job to a variable. This is a good habit. Its much easier to work with jobs if you store
# the job object in an easy-to-remember, brief variable name.

----------------Checking Job Status 

PS> Get-Job     # retrieves all running jobs on local system
                # but with no parameters will retrieve all existent jobs on the local system
                # knowing job name, ID, or variable name can help
PS> Get-Job -Id 2
PS> Got-Job -Name Job2
PS> $gci | Get-Job 
# notice that Windows PS automatically assigns increementing names to your jobs

#                Id  Name           PSJobTypeName       State       HasMoreData         Location
#                --  -----          ------------        ------      -----------         -------------
#                2   Job2           BackgroundJob       Running     True                localhost

# try using a friendly name

PS> $gs = Start-Job -Name "Antimalware" -ScriptBlock {}

PS> $gs = Start-Job -Name "Antimalware" -ScriptBlock { Get-Service | Where-Object { $_.Name -like "*malware*" } | Stop-Service }
PS> $gs
# this will retrieve the specific job

#                Id  Name           PSJobTypeName       State       HasMoreData         Location
#                --  -----          ------------        ------      -----------         -------------
#                4   Antimalware    BackgroundJob       Running     True                localhost

----------------Understanding Job Status Output 

# Id                Unique Identifier
# Name              Optional friendly name
# PSJobTypeName     System-defined job type
# State             Current status
# HasMoreData       Absence or presence of output being held in session RAM
# Location          Where the job is running

# lets focus on HasMoreData property
# if this returns Boolean true, then that means PS is holding the job results in RAM for you and you have NOT yet seen it

----------------Retrieving Job Data

# lets return to the original example
"""
PS> $gci = Start-Job -ScriptBlock {Get-ChildItem -Path "E:\" -Filter *.pdf}
PS> Get-Job
"""
#                Id  Name           PSJobTypeName       State       HasMoreData         Location
#                --  -----          ------------        ------      -----------         -------------
#                2   Job2           BackgroundJob       Running     True                localhost

# you can view the output of a job, even if its still running, by using Receive-Job
Receive-Job -Id 2
# you can use name, ID, or variable name
# NOTE with Receive-Job if you want to continue running then MUST use -Keep parameter.
#      otherwise, the job will STOP running and output dumps it all from memory.

# test this NOTE
PS> Get-Job
#                Id  Name           PSJobTypeName       State       HasMoreData         Location
#                --  -----          ------------        ------      -----------         -------------
#                2   Job2           BackgroundJob       Completed   True                localhost

PS> Recieve-Job -Name "Job2"
# output omitted to save space

PS> Get-Job
#                Id  Name           PSJobTypeName       State       HasMoreData         Location
#                --  -----          ------------        ------      -----------         -------------
#                2   Job2           BackgroundJob       Completed   False               localhost
                                                                    ^^^^^note this 
PS> Recieve-Job -Id 2
PS> 
# notice no output at all and HasMoreData is False thus it dumped the job results from memory.

Receive-Job -Id 2 -Keep 
Get-Job -Id 2 | Receive-Job -Keep 
# both work to retreive the job results and PS will keep the job and outout in memory until the session is closed or we remove the job.
# You know job data is in memory if HasMoreData is True.

# AUTHOR TIP - get into habit of using -Keep parameter whenever you use Receive-Job

# Start-Job accepts entire PS scripts as input. The -FilePath parameter is excellent when you have a long-running script
# that you do NOT want to tie up your current session.
# Example of using Start-Job
Start-Job -Name TaskScript -FilePath "C:\scripts\pstasklist.ps1"

--------Controlling Job Behavior
# so far we have learned how to Define a job, Fetch its status, and Receive its output.
# next learn how to Stop, Resume, and Delete jobs:

----------------Stopping a Job

# lets put a couple of jobs in the queue and fetch their status:
"""
PS> $txt = Start-Job -ScriptBlock {Get-ChildItem -Path "C:\" -Filter *.txt -Recurse}
PS> $png = Start-Job -ScriptBlock {Get-ChildItem -Path "C:\" -Filter *.png -Recurse}
PS> Get-Job 
"""
#                Id  Name           PSJobTypeName       State       HasMoreData         Location
#                --  -----          ------------        ------      -----------         -------------
#                2   Job2           BackgroundJob       Running     True                localhost
#                4   Job4           BackgroundJob       Running     True                localhost

# note number increment here is from 2 to 4. Skipped 3? for next section as this is parent child job issue.
# Hypo - both Job2 and Job4 are resource intensive and running concurrently, thus potentially slowing down system.
PS> Stop-Job -Id 2
#                Id  Name           PSJobTypeName       State       HasMoreData         Location
#                --  -----          ------------        ------      -----------         -------------
#                2   Job2           BackgroundJob       Stopped     True                localhost
#                4   Job4           BackgroundJob       Running     True                localhost
# note that Job2 stopped, has more data to retrieve
# alternatively, we can supply a comma-separated list of ID or Name values to Stop-Job
Stop-Job -Id 2,4

----------------Resuming a Stopped Job 
# once you stop a background job, you can NOT simply pipe it to Start-Job
# Yes Stop-Job method exists
# No opposite method exists such as Restart It. So dont stop a job unless you actually want to stop it permanently

# Stop and Completed jobs remain in the Get-Job queue until either the session is closed or you manually purge the queue.

# If you need to pause a job for later resumption, you should use Suspend-Job and Resume-job cmdlets
# but these are for PS Workflow jobs (see Chapter ???)
Suspend-Job
Resume-Job

----------------Deleting Jobs from the Queue 

# to nuke jobs from the queue.
Remove-Job
# 3 ways to use thi

Remove-Job -Id 6
Remove-Job -Name MyJob 
$job | Remove-Job 
Remove-Job -State Failed  # this last example is interesting.  -State property exists in most of the Job-related cmdlets

# here is comprehensive listing of the -State enumeration
NotStarted
Running 
Completed
Failed 
Stopped 
Blocked 
Suspended 
Disconnected
Suspending 
Stopping 

# for the heavy hammer to remove every job in the queue
Get-Job | Remove-Job 
Remove-Job *

--------Understanding Parent and Child Jobs

----------------Teasing Apart Parent and Child Jobs
# any job you submit to teh shell is assigned the next available Id number. This entry is always a parent job.
# parent job can be considered the "container" for the job object
# each parent job has at least one child job that actually undertakes the work

# example
# if you were to send a PS job to 20 remote computers, you would see 1 parent job and 20 child jobs, one for each remote system.
# lets leverage this and use -IncludeChildJobs parameter of Get-Job to see what happened to elusive job ID 13:
PS> Get-Job -Id 12 -IncludeChildJobs 

#                Id  Name           PSJobTypeName       State       HasMoreData         Location
#                --  -----          ------------        ------      -----------         -------------
#                12  test           BackgroundJob       Completed   True                localhost
#                13  Job13                              Completed   True                localhost

# now we can see details. Good news is that you can in general avoid interacting with child jobs directly in most circumstances
# Why? b/c querying the parent job provides a summation of all its children's activities, status, etc.

# But with remoting jobs, you may need to see child jobs b/c you see child jobs mail return a Failed State and you then need to query
# the child job directly. To do this, apply the same syntax:
PS> Get-Job -IncludeChildJob
#                Id  Name           PSJobTypeName       State       HasMoreData         Location
#                --  -----          ------------        ------      -----------         -------------
#                12  test           BackgroundJob       Completed   True                localhost
#                13  Job13                              Completed   True                localhost
#                14  Job14          BackgroundJob       Completed   True                localhost
#                15  Job15                              Completed   True                localhost
PS> Receive-Job -Id 15 -Keep 
#               Index       Time            EntryType       Source              InstanceID      Message
#               -------     -----           -----------     -------------       ----------      ------
#               50845       Nov 07 12:00    Information     EventLog            123139123423    The sys....
#               50844       Nov 07 11:28    Information     mbachameon          123139123423    Failed ....
#               50843       Nov 07 11:27    Information     mbachameon          123139123423    Failed ....

--------Introducing the -AsJob Parameter
# with the classic WMI-based PowerShell remoting, we look for PowerShell command that include the -ComputerName parameter
# there exists NO such parameter with Start-Job

PS> Get-Help Start-Job -Parameter * | Select-Object -Property Name

PS C:\WINDOWS\system32> Get-Help Start-Job -Parameter * | Select-Object -Property Name

                name
                ----
                ArgumentList
                Authentication
                Credential
                DefinitionName
                DefinitionPath
                FilePath
                InitializationScript
                InputObject
                LiteralPath
                Name
                PSVersion
                RunAs32
                ScriptBlock
                Type

# But note that some Windows PowerShell commands, whether remoting aware or not, can be crammed into job objects
# by the inclusion of the -AsJob parameter.

PS> Get-Comamnd * -CommandType cmdlet       # ATUL search
PS> Get-Comamnd * -CommandType cmdlet -ParameterName AsJob      # ATUL search
PS> Get-Comamnd * -CommandType cmdlet -ParameterName AsJob | Select-Object -Property Version      # ATUL search
PS> Get-Comamnd * -CommandType cmdlet -ParameterName AsJob | Select-Object -Property Source       # ATUL search

PS> Get-Comamnd * -CommandType cmdlet -ParameterName AsJob | Select-Object -Property Name         # AUTHOR

                PS C> Get-Command * -CommandType cmdlet -ParameterName AsJob | Select-Object -Property Name
                PS C:\WINDOWS\system32> Get-Command * -CommandType cmdlet -ParameterName AsJob | Select-Object -Property Name

                Name
                ----
                Get-WmiObject
                Invoke-Command
                Invoke-WmiMethod
                Remove-WmiObject
                Restart-Computer
                Set-WmiInstance
                Stop-Computer
                Test-Connection

# how to leverage -AsJob parameter in-line with one of the previously given cmdlets:
# -AsJob will create a garden-variety job object that allows you interact with it
# same as Start-Job
PS> $bios = Get-WmiObject -Class Win32_BIOS -AsJob
PS> $bios | Get-Job 

                PS C:\WINDOWS\system32> $bios = Get-WmiObject -Class Win32_BIOS -AsJob
                PS C:\WINDOWS\system32> $bios | Get-Job

                Id     Name            PSJobTypeName   State         HasMoreData     Location             Command
                --     ----            -------------   -----         -----------     --------             -------
                1      Job1            WmiJob          Completed     True            localhost            Get-WmiObject -Class W...


                PS C:\WINDOWS\system32> $bios

                Id     Name            PSJobTypeName   State         HasMoreData     Location             Command
                --     ----            -------------   -----         -----------     --------             -------
                1      Job1            WmiJob          Completed     True            localhost            Get-WmiObject -Class W...


----------------Sending Remote Jobs 

# note - you need to enable Windows PowerShell remoting on any target systems in your network enviroment before
# any remoting jobs will work as expected. See Chapter 10 and 11 for lots of detail.

PS> $metadata = Invoke-Command -ComputerName localhost,mem2,dc1 -ScriptBlock {Get-WmiObject -Class Win32_OperatingSystem} -AsJob 
PS> $metadata 

#                Id  Name           PSJobTypeName       State       HasMoreData         Location
#                --  -----          ------------        ------      -----------         -------------
#                18  Job18          RemoteJob           Failed      True                localhost


# Job18 has State Failed. why?
# so lets dip into the child jobs now b/c the "parent job task" is not giving us enough information to troubleshoot the failure.

PS> Get-Job -id 18 -IncludeChildJob

#                Id  Name           PSJobTypeName       State       HasMoreData         Location
#                --  -----          ------------        ------      -----------         -------------
#                18  Job18          RemoteJob           Failed      False               localhost
#                19  Job19                              Completed   False               localhost
#                20  Job20                              Failed      False               mem2
#                21  Job21                              Failed      False               dc1

# Okay, we see that PS created a separate child job ID for each computer I targeted in $metadata job object.
# You can verify that by scanning the Location property values.
# Also observe that the only job that completed was the task on my local computer (19).
# Now, we need to receive the contents of the failed job:
PS> Receive-Job -Id 20 -Keep 
"""
        [mem2] Connecting to remote server mem2 failed with the following error message : The WinRM client can not 
        process the request. IF the authentication scheme is different from Kerberos, or if the client computer 
        is not joined to a domain, then HTTPS transport must be used or the destination machine must be added 
        to the TrustedHosts configuration setting. Use winrm.cmd to configure TrustedHosts. Note that computers 
        in the TrustedHosts list might not be authticated. You can get more infomation aobut that by running 
        the following command: winrm help config. For more information, see the about_Remote_Troubleshooting
        help topic.
            + CategoryInfo                  : OpenError: (mem2:String) [], PSRemotingTransport Exception 
            + FullyQualifiedErrorId         : ServerNotTrusted,PSSessionStateBroken
"""
# so now we know that My local host is part of a workgroup, and the dc1 and mem2 remote computers are members of
# an Active Directory domain.
# Therefore, AUTHOR will have to populate my local computer's TrustedHosts list with those remote computer names
# before my remote commands will work:

""" ATUL code pink is annoying

Set-Item WsMan:\localhost\Client\TrustedHosts -Value dc1,mem2
"""
# now try again
PS> $metadata = Invoke-Command -ComputerName localhost,mem2,dc1 -ScriptBlock {Get-WmiObject -Class Win32_OperatingSystem} -AsJob 
# this will work. AUTHOR does not list output.

# note, you can name these "inline" jobs; simply specify the -jobname parameter like this:
PS> Invoke-Command -ComputerName (Get-Content -Path "c:\servers.txt") -Command { Get-Process } -AsJob -JobName "RemoteJob"

--------Scheduling Jobs

# Windows PS jobs come in 3 basic varities
Traditional background jobs # (1) --> so far in this book
Scheduled jobs              # (2) --> up next
Workflow jobs               # (3) --> later in the book


# Note that the PS team added scheduled jobs to the feature list in Windows PS v3. The idea here is create a 
# programmatic equivalent to the Windows Task Scheduler. 
# Note that scheduled PowerShell jobs are indeed registered with the Windows Task Scheduler service.

# Workflow jobs are PS jobs on steriods. These can do powerful things such as survive system restarts, etc.

----------------Creating an On-Demand Scheduled Job

# cmdlets are used to define and manage schedule PS jobs that are contained in a different dynamic link library (DLL) from
# the regular background jobs.
PS> Get-Command *scheduled*

                PS C:\WINDOWS\system32> Get-Command *scheduled*

                CommandType     Name                                               Version    Source
                -----------     ----                                               -------    ------
                Function        Disable-ScheduledTask                              1.0.0.0    ScheduledTasks
                Function        Enable-ScheduledTask                               1.0.0.0    ScheduledTasks
                Function        Export-ScheduledTask                               1.0.0.0    ScheduledTasks
                Function        Get-ClusteredScheduledTask                         1.0.0.0    ScheduledTasks
                Function        Get-ScheduledTask                                  1.0.0.0    ScheduledTasks
                Function        Get-ScheduledTaskInfo                              1.0.0.0    ScheduledTasks
                Function        New-ScheduledTask                                  1.0.0.0    ScheduledTasks
                Function        New-ScheduledTaskAction                            1.0.0.0    ScheduledTasks
                Function        New-ScheduledTaskPrincipal                         1.0.0.0    ScheduledTasks
                Function        New-ScheduledTaskSettingsSet                       1.0.0.0    ScheduledTasks
                Function        New-ScheduledTaskTrigger                           1.0.0.0    ScheduledTasks
                Function        Register-ClusteredScheduledTask                    1.0.0.0    ScheduledTasks
                Function        Register-ScheduledTask                             1.0.0.0    ScheduledTasks
                Function        Set-ClusteredScheduledTask                         1.0.0.0    ScheduledTasks
                Function        Set-ScheduledTask                                  1.0.0.0    ScheduledTasks
                Function        Start-ScheduledTask                                1.0.0.0    ScheduledTasks
                Function        Stop-ScheduledTask                                 1.0.0.0    ScheduledTasks
                Function        Unregister-ClusteredScheduledTask                  1.0.0.0    ScheduledTasks
                Function        Unregister-ScheduledTask                           1.0.0.0    ScheduledTasks
                Cmdlet          Disable-ScheduledJob                               1.1.0.0    PSScheduledJob
                Cmdlet          Enable-ScheduledJob                                1.1.0.0    PSScheduledJob
                Cmdlet          Get-ScheduledJob                                   1.1.0.0    PSScheduledJob
                Cmdlet          Get-ScheduledJobOption                             1.1.0.0    PSScheduledJob
                Cmdlet          New-ScheduledJobOption                             1.1.0.0    PSScheduledJob
                Cmdlet          Register-ScheduledJob                              1.1.0.0    PSScheduledJob
                Cmdlet          Set-ScheduledJob                                   1.1.0.0    PSScheduledJob
                Cmdlet          Set-ScheduledJobOption                             1.1.0.0    PSScheduledJob
                Cmdlet          Unregister-ScheduledJob                            1.1.0.0    PSScheduledJob

PS> Get-Command *scheduledjob*
  
                PS C:\WINDOWS\system32> Get-Command *scheduledjob*

                CommandType     Name                                               Version    Source
                -----------     ----                                               -------    ------
                Cmdlet          Disable-ScheduledJob                               1.1.0.0    PSScheduledJob
                Cmdlet          Enable-ScheduledJob                                1.1.0.0    PSScheduledJob
                Cmdlet          Get-ScheduledJob                                   1.1.0.0    PSScheduledJob
                Cmdlet          Get-ScheduledJobOption                             1.1.0.0    PSScheduledJob
                Cmdlet          New-ScheduledJobOption                             1.1.0.0    PSScheduledJob
                Cmdlet          Register-ScheduledJob                              1.1.0.0    PSScheduledJob
                Cmdlet          Set-ScheduledJob                                   1.1.0.0    PSScheduledJob
                Cmdlet          Set-ScheduledJobOption                             1.1.0.0    PSScheduledJob
                Cmdlet          Unregister-ScheduledJob                            1.1.0.0    PSScheduledJob


PS> Get-Command *scheduledjob* | Select-Object -Property Name

                PS C:\WINDOWS\system32> Get-Command *scheduledjob* | Select-Object -Property Name

                Name
                ----
                Disable-ScheduledJob
                Enable-ScheduledJob
                Get-ScheduledJob
                Get-ScheduledJobOption
                New-ScheduledJobOption
                Register-ScheduledJob
                Set-ScheduledJob
                Set-ScheduledJobOption
                Unregister-ScheduledJob

# Not surprisingly, we use Register-ScheduledJob to register a new Windows PowerShell job on the local computer
"""
PS> Register-ScheduledJob -Name ArchivePS1 -ScriptBlock {ls $home\*.ps1 -Recurse | Copy-Item -Destination "e:\archive"}
"""
#                Id  Name           JobTriggers         Command
#                --  -----          ------------        -------
#                1   ArchievePS1    0                   ls $home\*.ps1 -Recurse | Copy-Item -Destination "e:\archive"

# Note previous command and output
# 1) b/c AUTHOR did not add a trigger condition for this job, it will NOT run automatically at any time.
#    You can see the 0 value for the JobTriggers property
# 2) AUTHOR uses ls, a UNIX friendly alias for dir (which is an alias for Get-ChildItem). Remember your aliases.
# 3) $home refers to the currently logged on user's home directory.
# 4) the scriptblock searches the user's home folder for *.ps1 script files and copies them to an archive location.

# Now close your PS window. Reopen. Notice that scheduled jobs are still there.
# then run
PS> Get-ScheduledJob
#                Id  Name           JobTriggers         Command
#                --  -----          ------------        -------
#                1   ArchievePS1    0                   ls $home\*.ps1 -Recurse | Copy-Item -Destination "e:\archive"

# b/c they are still there... the scheduled jobs are NOT session specific like ordinary background jobs.
# If you open the Windows Task Scheduler tool on your computer and browse the task library to the following location:
Task Scheduler Library\Microsoft\Windows\PowerShelScheduledJobs 
# you will indeed see a new object representing yoru new scheduled job.

ATUL            DLL on Dell Laptop 
ATUL            Task Scheduler on Dell Laptop

# Back to Task Scheduler notes
# page 267 Chapter 13
# b/c Windows creates the scheduled job as an XML based Task Scheduler task, there is nothing to prevent you from adding triggers
# and other parameters to the task directly with Windows Task Scheduler.

# here we constrain ourselves to managing these scheduled tasks programmatically:

# you can manually trigger a scheduled job by invoking Start-Job, you just need Name or Id.
PS> $s = Get-ScheduledJob -Id 1
PS> $s.StartJob()

# so here we obtained a reference to our scheduled job object and then invoked the object's StartUp() method to launch it.
# Do you remember how to view the properties and methods that are attached to an object?
ATUL DO THIS
"""
ATUL DO THIS HERE 
"""

----------------Adding Triggers to Scheduled Jobs 

# if we try to receive data data from our ArchivePS1 job, you should expect NO output b/c this particular job has no trigger.
# The only way it works without a trigger? you perform an "on-demand" run of the job as we did in the previous section.
# When trigger = True, scheduled task will start.

# create trigger that specifies condition of "every morning at 3am"
$trigger = New-JobTrigger -Daily -At "3 AM"

# there is too much to learn here (via book) so you need to read:
about_Scheduled_Jobs
about_Scheduled_Jobs_Advanced
about_Scheduled_Jobs_Basics
about_Scheduled_Jobs_Troubleshooting

# for now, lets use the simgple $trigger example.
# plug the trigger variable into the Register-ScheduledJob like this:
PS> Register-ScheduledJob -Name NightlyReboot -ScriptBlock {Restart-Computer -Force} -Trigger $trigger 

#                Id  Name           JobTriggers         Command
#                --  -----          ------------        -------
#                1   NightlyReboot  1                   Restart-Computer -Force

"""ATUL Named Options Collections 
"""
# get fancier by creating named option collections with New-ScheduledJobOption cmdlet
$runadmin = New-ScheduledJobOption -RunElevated

# so here we create a simple job option variable that specifies that the scheduled job should run with elevated credentials.
# Review the help for New-ScheduledJobOption
                about_Scheduled_Jobs
                about_Scheduled_Jobs_Advanced

# Now create another job, but highly customized:
Register-ScheduledJob -Name InventoryScript -Trigger $trigger -ScheduledJobOption $runadmin -MaxResultCount 20 -ScriptBlock {}
# details
Register-ScheduledJob -Name InventoryScript -Trigger $trigger -ScheduledJobOption $runadmin -MaxResultCount 20 
        -ScriptBlock {Invoke-Command -ComputerName SRV1 -FilePath "c:\scripts\inventory.ps1"}

# notice -MaxResultCount (see next section for details)

----------------Pulling Data from PowerShell Scheduled Jobs 

# When we use Receive-Job then no need to use -Keep b/c the schduled job is stored persistently on disk.

# Note - (1) remember that you need to add -Keep to your data retrieval with background jobs b/c that "HasMoreData property" stores the 
#        data only until the job is removed or session is deleted.
#        (2) By contrast, b/c Windows PS scheduled jobs are stored on disk rather than in memory, you can retrieve data from a scheduled job
#        at any time without -Keep and still maintain access to the output.
#        (3) PS stores the result object each time the job triggers. So daily PS job runs for seven days, you have seven result sets to parse.

# AUTHOR - ran the ArchivePS1 scheduled job we created earlier, 
#          so once PS has data to show us, then we can actually query for it:
PS> Get-Job -Name ArchievePS1

#                Id  Name           PSJobTypeName       State       HasMoreData         Location
#                --  -----          ------------        ------      -----------         -------------
#                2   ArchivePS1     PSScheduledJob      Completed   False               localhost
#                5   ArchivePS1     PSScheduledJob      Completed   False               localhost

# notice that this does not have any onscreen output b/c we ran a directory listing and copied a bunch of files. However,
# we use Receive-Job as usual to pull the output from a scheduled job
Receive-Job -Id 2

# note that we couild use -MaxResultCount parameter of Register-ScheduledJob to override the default value of 32 results.
# use a samller number than 32 if your concerned about disk space on your computer.

--------Reviewing What We Have Learned - Creating a Scheduled PowerShell Job 

# Creating a Scheduled PowerShell Job 
# gather 10 most recent error messages from the local host's System Event log. 
# have the job run every Monday, Wednesday, Friday 7pm

# 1) run the following commands to delete all the background and scheduled jobs from our local system:
Get-Job | Remove-Job 
Unregister-ScheduledJob * 
#    you can also run these commands after you complete this exercise to reset your local system to prehour defaults.

# 2) now define our trigger. Condition is Mon-Wed-Fri 7pm. Use new parameters of the New-JobTrigger cmdlet and specify 
#    time in the 24 hour format to avoid ambiguity.
$trig = New-JobTrigger -Weekly -DaysOfWeek Monday, Wednesday, Friday -At "19:00" -WeeksInterval 1

# 3) Now create set of scheduled job options that 
#    (1) hides the job from the Windows Task Scheduler interface: and
#    (2) ensures that the system has been idel for at least 10 min in order to activate the trigger:
$opt = New-ScheduledJobOption -HideInTaskScheduler -IdleDuration 00:15:00

# 4) define the scheduled job
#    summary code
PS> Register-ScheduledJob -Name NightlyErrors -ScriptBlock {} -ScheduledJobOption $opt 
#    detailed code
PS> Register-ScheduledJob -Name NightlyErrors -ScriptBlock { 
                                               Get-EventLog -LogName system -EntryType Error | 
                                               Select-Object -First 10 -Property TimeGenerated,EventID, message | 
                                               Format-List } 
                                                                -ScheduledJobOption $opt 

# 5) Forget to add trigger object using cmdlet. Can retroactively add options or triggers to an existing scheduled job
#    5a) first pull NighlyErrors
PS> Get-ScheduledJob -Name NightlyErrors
#    5b) second use the pipeline and Set-ScheduledJob to modify the existing job definition, 
#        adding in the $trig trigger object as a parameter value:
            #                Id  Name           JobTriggers         Command
            #                --  -----          ------------        ----------
            #                4   NightlyErrors  0                   get-eventlog -LogName system-Ent...
PS> Get-ScheduledJob -Name NightlyErrors | Set-ScheduledJob -Trigger $trig
#    5c) pull NighlyErrors again
            #                Id  Name           JobTriggers         Command
            #                --  -----          ------------        ----------
            #                4   NightlyErrors  1                   get-eventlog -LogName system-Ent...

# 6) Lets pack our new NightlyErrors job into a variable and then force-run it once or twice:
$ne = Get-ScheduledJob -Name NightlyErrors
$ne.StartJob()

# 7) For learning, we should inspect the members of our scheduled job object in order familiarize yourself with whats possible
$ne | Get-Member 

# 8a) now that we know our scheduled job has result data, we can retrieve child job metadata and then output itself:
PS> Get-Job -Name NightlyErrors -IncludeChildJob 
            #                Id  Name           PSJobTypeName       State       HasMoreData         Location
            #                --  -----          ------------        ------      -----------         -------------
            #                8   NightelyErrors PSScheduledJob      Completed   True                localhost
            #                10  Job10                              Completed   True                localhost

PS> Receive-Job -Id 8
            #               TimeGenerated       : 11/7/2014 1:18:13 PM
            #               EventID             : 7001
            #               Message             : The Computer Browser service depends on ... failed to start
            #                                     due to the following error %%1058
            # ...
# 8b) When you finished, dont forget to remove your new job object. For instance, you could try to remove all jobs with
#     a HasMoreData value of False
PS> Get-Job | Where-Object { -not $_.HasMoreData } | Remove-Job

--------Summary Q&A Workshop

--------Summary
# how to get Multitasking
# how to free up your sessino prompt whenever you need it

# Next: workflow details (create long-running, durable job that can survive restarts, power outagers)


--------Q&A 

Enable-ScheduledJob 
# cmdlet = used to reenable a scheduled job that has been disenabled with Disable-ScheduledJob
# read the help files
            # PS> Get-Help Start-Job -Parameter * | Select-Object -Property Name
            # PS> Get-Command *scheduled*
            # about_Scheduled_Jobs
            # about_Scheduled_Jobs_Advanced

Received-Job
# why does Receive-Job dump the job results from memory by default? I cant remember to type -Keep every time
# Microsoft answer: default behavior is to conserve resource requirements so Receive-Job default is meant to save
# you hard disk space.

-Keep # switch parameter set to $True by default to ensure I never lose job data?
# yes, run the following statement during your session or add the line to your Windows PowerShell profile script

$PSDefaultParameterValues.Add("Recieve-Job:Keep",$True)


--------Workshop

# 1) create a one-time, on-demand job that generates a report of all the Microsoft Word files on your hard drive.
#    create a CSV report that sorts the files alaphebetically by filename

# 2) create a scheduled job that schronizes your computer's clock with time.windows.com every four hours


--------Quiz

# 1) what is the result of the following PS statement:
Get-Help * -Parameter AsJob | Format-Wide Name -Column 3
#    this will retrieve a list of commands that have the ability to run as a job
#    what we are doing here is querying the help file index for commands that contain the -AsJob parameter.
#    the Format-Wide statement simply brings back the output in a 3 column wide display

# 2) Windows job queue is NOT self cleaning. Rmember that, at least within a session, we must manually remove any jobs
#    that we dont need anymore from the queue.

# 3) HasMoreData property is True if job results data is being held in memory.
#    this question tests your ability to comprehend the output from Get-Job. 
#    Remember that HasMoreData property registers True if job data is being held in RAM. Remember also, that, unless you
#    specify the -Keep parameter (or if make a scheduled job), the data is PURGED from memory after you receive it once.


===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 14 Harnessing Windows PowerShell Workflow

# understand how PS workflow operates
# write your first workflow
# running a workflow as a job
# understanding workflow activities
# bring it all together

--------Understanding How Windows PowerShell Workflow Works

# workflow = named set of programmed stpes that accomplish some business process.
# workflow engine based on the .NET framework called Windows Workflow Foundation (WF)
# you can build WF based workflows using different tools. Here we use PowerShell as the entry point.

----------------Attributes of a Windows PowerShell Workflow

# workflow vs .ps1 script file
# WF is optimized for durable, long running business processes. Can survive restarts, etc. Can be paused and restarted at later time.

# Host must have at least PowerShell v3 installed and also be enabled for WSMan-based remoting.         WSMan = Web Services Management
# Target computers that will receive and process workflow activities should have at least Windows PowerShell v2 installed.
# You can run Windows Management Instrumentation (WMI) workflow activities on target systems that do not even have Windows PowerShell installed.
# so here, you run the workflow activities on the local host and query the target.

----------------Taking Care of Preliminaries

# need to make sure you can create scripts in the ISE

----------------Try It Yourself - Writing a Simple Windows PowerShell Script File 

# create a stored script named MyFunction.ps1 that contains a simple function defintion.
# teaches you how to create, save, run PowerShell script files.

# 1) launch Admin PS session. type ise which launches Admin ISE.
# 2) File>New. File>Save As under root C: and name it myscript.ps1
# 3) Get your execution policy status:

                PS C:\WINDOWS\system32> Get-ExecutionPolicy
                RemoteSigned

#    You need to relax your system's script execution policy temporarily so that you can run scripts as much as you need to.
#    So run the following command in the ISE console pane:
Set-ExecutionPolicy -ExecutionPolicy Unrestricted

#    When your finished with this, you can reset your execution policy to its original.
#    Get-ExecutionPolicy gives you the current policy

                PS C:\WINDOWS\system32> Get-ExecutionPolicy
                RemoteSigned

# 4) We will write a simple function that takes two numbers, adds them, displays result in the console.
#    Note that a function is nothing more than a named code block that we can run as many times as we need to
#    Windows PowerShell ISE included a snippets feature that makes it easier to code syntax.
#    Right click top of script ane select Sart Snippets
#    click Function to add its snippet to the pane (see lines 1-4)
        function MyFunction ($param1, $param2)
        {

        }

# 5) Create function named adder that accepts two parameters $n1 and $n2
#    In line 9, we store the sum of the two variables inside $sum
#    Use Write-Host to give the user the addition results
#    Create adder2. Here we take greater control over the parameters fed to a function by including Param() block to the function body.
#    In lines 17 and 18, perform low level data validation by specifying the integer data type for $num1 and $num2
# 6) Rest of adder2 behaves like adder function.
#    add code

        function adder ($n1, $n2)
        {
            $sum = $n1 + $n2
            Write-Host "The of sum $n1 and $n2 is $sum"
        }

        function adder2
        {
            Param(
                [Int]$num1,
                [Int]$num2
                )
                    $mysum = $num1 + $num2
            Write-Host "The sum of $num1 and $num2 is $mysum."
        }

# Now you should be able to write funtions that take no parameters.

-----------AUTHOR---------
# Note AUTHOR
# there are 3 separate code blocks here
# Author wants to show that we can take greater control over the parameters fed to function by including a 
Param() # block to the function body. 
See Cookbook for this.
# lines [Int]$num1 and [Int]$num2 are "low-level" data validation by specifying the integer data type for $num1 and $num2 variables.
# The rest of adder2 behaves like the original adder function. 
# Note that you can also write functions that take no parameters.
Again, see Cookbook for this.
-----------AUTHOR---------


# 7) Save your work and switch to a separate PowerShell console session window.
#    Now set you location to the root C: drive.
        Set-Location C:\

#    Next, run Import-Module to bring your two new functions into memory.
#    You have now just built your first PowerShell module.
        Import-Module .\myscript.ps1

# 8) To finish, call each function the same way, by specifying the function name and the two integers to be 
#    passed in as arguments. For example, try this:

        Adder 2 2
        Adder2 44.44 65.66
# output should be seen in console pane bottom.

# ATUL this works
# Complete code is here

# open PS
# open ise from PS 
# toggle in ise from script to console
# save script to C
# myscript3.ps1
function adder ($n1, $n2)
{
    $sum = $n1 + $n2
    Write-Host "This works, the sum of $n1 and $n2 is $sum"
}
# in ise console, Set-Location C:\
# in ise console, Import-Module myscript3.ps1
adder 5 5
adder 3 3


-----------ATUL-----------

PS C:\WINDOWS\system32> Set-ExecutionPolicy -ExecutionPolicy Unrestricted
Set-ExecutionPolicy : Windows PowerShell updated your execution policy successfully, but the setting is overridden 
by a policy defined at a more specific scope.  Due to the override, your shell will retain its current effective 
execution policy of RemoteSigned. Type "Get-ExecutionPolicy -List" to view your execution policy settings. For 
more information please see "Get-Help Set-ExecutionPolicy".
At line:1 char:1
+ Set-ExecutionPolicy -ExecutionPolicy Unrestricted
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : PermissionDenied: (:) [Set-ExecutionPolicy], SecurityException
    + FullyQualifiedErrorId : ExecutionPolicyOverride,Microsoft.PowerShell.Commands.SetExecutionPolicyCommand

-----------ATUL-----------

# open PS
ise 
# within ise
Set-ExecutionPolicy -ExecutionPolicy Unrestricted
# in ise, open myscript.ps1
# in ise console, 
PS> Set-Location c:\
PS> Import-Module .\myscript3.ps1
PS> Adder 4 4
        
        The sum of 4 and 4 is 8
-----------ATUL-----------


--------Writing Your First Windows PowerShell Workflow 

# Hypo - you need a quick way to determine which of your Active Directory domain's computers are online.
# assume you disabled Windows Firewall within your network perimeter.
# Write a workflow that pings every single computer within the domain?  (AUTHOR, using Windows Server 2012 R2 domain).

----------------Nonworkflow Method 

# Start bu retrieving a list of all domain joined computers
PS> $computers = Get-ADCoputer -Filter * | Select-Object -Property DNSHostName
            #       DNSHostName
            #       -----------
            #       dc1.companya.pri
            #       mem1.companya.pri
            #       mem2.companya.pri

# Continue by leveraging the cmdlet Test-Connection to send 2 ICMP Echo Request messages to each domain computer.
# we stored the computer list in a variable for a reason (see later)
Foreach ($computer in $computers) {Test-Connection -ComputerName $computer -Count 2 -ErrorAction SilentlyContinue}

# Foreach key word is an iterator
# -Count parameter detemines how many pings to send
# -ErrorAction SilentelyContinue means PS should continue through $computer even if an error condition is tripped
#  so this surpresses the error message (ATUL cool).

# But note
# process is slow b/c you dont get a prompt back until the entire process is completed
# process is slow b/c each computer needs to finish its processing befor the next computer is contacted.
# so by combining 
PS workflow # with 
parallelism # and with 
jobs
# then we can speed it up like this:

----------------Defining the Workflow

# workflows do NOT support positional parameters.
# but this does NOT matter b/c we use named parameters for explicitness sake.
# TIP best practice guidance from Microsoft: name our functions and workflows with the same noun-verb syntax that standard commands use

# in the ISE create the following new file and script 

"""
$computers - Get-ADComputer -Filter * | Select-Object -ExpandProperty DNSHostName           # line 1

Workflow Test-WFComputers {                                                                 # line 3
    param(
        [string[]]$Computers                                                                # line 7
    )
    foreach -parallel ($computer in $computers) {
        Test-Connection -ComputerName $computer -Count 1 -ErrorAction SilentlyContinue
    }
}
"""
# Notes
# line 1 populate $computers variable with the array of domain-joined computers
# line 3 define a workflow with workflow keyword, 
#        you can add parameters and body exactly in same way that you for functions
# line 7 here you define a single array-type parameter to hold the list of computer names
#        you could bring in a CSV file too, adding flexibilty if its a long list
# Console pane - notice that once you load the workflow definition into memory, you can call it 
#                the same way you can for Windows PowerShell functions.

--------Running a Workflow as a Job

# lets revisit the PS job architecture from prior chapter.
# launch ISE and new script file
# Hypo - define a parallel script workflow that grabs the newest five entries from the 
#        local system's System, Security, and Application event logs:

Workflow Get-EventLogData
{
Parallel
    {
        Get-EventLog -LogName System -Newest 5
        Get-EventLog -LogName Security -Newest 5
        Get-EventLog -LogName Application -Newest 5
    }
}

# Load the workflow into memory. Two ways to do this: (1) running the workflow definition within the ISE or 
#                                                     (2) using Import-Module to feed the definition into your current session.
# Then we can add -AsJob parameter to define the workflow TO RUN AS A JOB.
PS> Get-EventLogData -AsJob -JobName eventz




Workflow Get-EventLogDataFood
                        {
                        Parallel
                            {
                                Get-EventLog -LogName System -Newest 5
                                Get-EventLog -LogName Security -Newest 5
                                Get-EventLog -LogName Application -Newest 5
                            }
                        }



-----------ATUL-----------
# open PS
ise
# in ISE, open script
                        # in ISE console
PS> Set-Location c:\
PS> Import-Module .\myscript5_DefineWorkflowFood.ps1
Get-EventLogDataFood -AsJob -JobName eventz10 
Get-EventLogDataFood -AsJob -JobName eventz11


Get-EventLogDataFood -AsJob -JobName eventz10 

                    Id     Name            PSJobTypeName   State         HasMoreData     Location             Command                  
                    --     ----            -------------   -----         -----------     --------             -------                  
                    3      eventz10        PSWorkflowJob   Running       True            localhost            Get-EventLogDataFood     

Get-EventLogDataFood -AsJob -JobName eventz11

                    Id     Name            PSJobTypeName   State         HasMoreData     Location             Command                  
                    --     ----            -------------   -----         -----------     --------             -------                  
                    5      eventz11        PSWorkflowJob   Running       True            localhost            Get-EventLogDataFood     


PS> receive-job -name eventz10 -Keep 
PS> receive-job -name eventz11 -Keep 

PS> Get-Job 

                    PS C:\> Get-Job

                    Id     Name            PSJobTypeName   State         HasMoreData     Location             Command
                    --     ----            -------------   -----         -----------     --------             -------
                    4      eventz10        PSWorkflowJob   Completed     False           localhost            Get-EventLogDataFood
                    5      eventz10        PSWorkflowJob   Completed     False           localhost            Get-EventLogData
                    6      eventz11        PSWorkflowJob   Completed     True            localhost            Get-EventLogDataFood

-----------ATUL-----------

# notice that Workflow jobs show up as PSWorkflow objects.
# there is no different between traditional background jobs and workflow jobs as shown by
PS> receive-job -name eventz10 -Keep 
PS> receive-job -name eventz11 -Keep 
# this will list all the jobs running on the system

----------------Refactoring the Script for Multiple Targets 

# refactor the Get-EventLogData workflow to include all domain computers
# new definition of the Get-EventLogData parallel workflow:
$computers = Get-ADComputer -Filter * | Select-Object -ExpandProperty DNSHostName

workflow Get-WFEventLogData {
    param(
        [string[]]$computers
    )

    foreach -parallel ($computer in $computers){
        Get-EventLog -LogName System -Newest 5 -PSComputerName $computer
        Get-EventLog -LogName Security -Newest 5 -PSComputerName $computer
        Get-EventLog -LogName Application -Newest 5 -PSComputerName $computer
    }
}

# we can then combine parallel workflow, Windows PowerShell remoting, and the jobs engine to do this:
Get-WFEventLogData $computers -AsJob -JobName DomainELs
Receive-Job -Name DomainELs -Keep
# note that when you run Receive-Job, take special note of the PSComputerName property,
# this is how you will differentiate the output from the different remote target computers.

--------Understanding Workflow Activities

# the Parallel and Foreach -parallel constructions are examples of workflow activities
# PS supports a number of workflow activities:

# seen before this section
Parallel
Foreach -parallel

# addressed in this section
CheckPoint-Workflow         # = saves the state of a running workflow
Suspend-Workflow, Resume-Workflow 
Sequence                    # = a block of sequential statements within a workflow script

----------------Checkingpointing a Workflow 

# When thinking of a PS workflow, think of it as a long running task of sequence of tasks that can be fully managed and is
# Durable (surviving system restarts)
# Persistent data = You can place checkpoints in your workflow definition to save the state of the workflow at that point.
#                   This persistent data is saved in the user profile hierarchy on the computer that is hosting the workflow session.
#                   Be aware - these incur a performance and system resource cost.
# Think of it like this = "where is the logical save point where I would want to flush the data to disk so that I can resume
#                          from that point later on if I have to?"

# How to use checkpoints? purpose of checkpoints is that if our workflow bombs out partway through (unexpected power outage) when
# we can "restart" the workflow by running it again.

# easiest way to include checkpointing in a workflow is to specify the $PSPersist common paramter.
$PSPersist
# Example, take the following sample workflow that gather TCP/IP configuration information:

Workflow Get-IPConfig 
{
    Get-NetAdapter
    Get-NetIPAddress
}

# We add the common parameter when we call the workflow from the PS command line.
PS> Get-IPConfig -PSPersist $true 

# Or we can try the workflow against an array of computer objects
PS> Get-IPConfig -PSComputerName mem1, mem2, dc1, -PSPersist $true 
# Notice that your workflow takes a bit longer to run than if not using the -PSPersist parameter
# this is expected b/c checkpointing incurs overhead

# You can also granularize the use of -PSPersist by adding the parameter in-line with your workflow code.
# Example (1) 
# the following example takes a checkpoint after each Get- statement in the simple Get-IPConfig workflow:

                    Workflow Get-IPConfig
                    {
                        Get-NetAdapter -PSPersist $true
                        Get-NetIPAddress -PSPersist $true
                    }

# Example (2) 
# here as add checkpoints to our workflow by adding the Checkpoint-Workflow cmdlet
# here we add a checkpoint after the second action completes, but before third one starts

                    Workflow Get-IPConfig
                    {
                        Get-NetAdapter
                        Get-NetIPAddress
                        Checkpoint-Workflow
                        Get-WMIObject -Win32_NetworkAdapterConfiguration
                    }


# NOTE AUTHOR
# in his experience with PS, Ive seen administrators attempt to leverage PS workflows to automate system configuration.
# For instance, you might author a workflow that renames a computer, joins it to an Active Directory domain, 
# and then installs some roles or features.
# While you technically can implement workflow for this purpose, I think the Desired State Configuration (DSC) is a better
# fit for this type of configuration. (See later in book).
# In meantime, consider workflow a method for gaining full control over long running scripting tasks rather than a "one-stop"
# system configuration solution.

----------------Suspending and Resuming a Workflow 

# We now understand that checkpoints make a workflow more durable and efficient.
# You can start and suspend the workflow on computer A and then resume it on computer B.

# Hypo
# simple workflow that generates a comprehensive listing of all DLL (dynamic link library) .dll and device driver (*.sys)
# files in the current system's C:\Windows\System32 directory path:

workflow Get-DLLs 
{
    Get-ChildItem -Path "C:\Windows\System32" -Filter *.dll -Recurse -ErrorAction SilentlyContinue |
        Select-Object PSComputerName, Name, Length | Sort-Object Name

    Get-ChildItem -Path "C:\Windows\System32" -Filter *.sys -Recurse -ErrorAction SilentlyContinue |
        Select-Object PSComputerName, Name, Length | Sort-Object Name
}

# now this is admittedly an artificial example, but author wants to use a workflow that will take a long time
# to complete if we target multiple hosts:
Get-DDLs -PSComputerName dc1,mem1,mem2

# go get coffee now. One option if you need to add some "breathing room" in the script is to add Susped-Workflow 
# in between the Get-ChildItem statements:

workflow Get-DLLs 
{
    Get-ChildItem -Path "C:\Windows\System32" -Filter *.dll -Recurse -ErrorAction SilentlyContinue |
        Select-Object PSComputerName, Name, Length | Sort-Object Name

Suspend-Workflow 

    Get-ChildItem -Path "C:\Windows\System32" -Filter *.sys -Recurse -ErrorAction SilentlyContinue |
        Select-Object PSComputerName, Name, Length | Sort-Object Name
}


# now load the workflow definition into our session. This is done within the ISE like this:
PS> Get-DLLs -PSComputerName dc1,mem1,mem2
PS> Get-Job 
PS>Get-Job 
Id     Name            PSJobTypeName   State         HasMoreData     Location    
--     ----            -------------   -----         -----------     --------   
3      Job33           PSWorkflowJob   Suspended     True            localhost  

# did you see what happened?
# we did not run Get-DDL as a job, but the Get-Job output created a PSWorkflowJob and listed it as Suspended
# now can shut down for night and startup next day, resuming the workflow.
# to restart:
# (1) must manually load the PSWorkflow module into our new session:
Import-Module PSWorkflow 
 
# then if we run Get-Job, we see the same job listing as above. To resume, we call
Resume-Job # with the Job ID or name;
PS> Resume-Job -Id 3
Id     Name            PSJobTypeName   State         HasMoreData     Location    
--     ----            -------------   -----         -----------     --------   
3      Job33           PSWorkflowJob   Running       True            localhost  

# since workflow jobs behave the same as ordinary background or scheduled jobs, we can use 
Receive-Job # or
Remove-Job # and other cmdlets to interact with our suspended/resumed workflow job.

----------------Adding a Sequence to a Workflow 

# see this example
# NOTE
# (1) Sequence activity specifies sequential statements block that run INSIDE OR WTIHIN a parallel script block.
# (2) InlineScript are adho script blocks INSIDE of a workflow.
# (3) this workflow simply gathers DNS server installation status, network interface card setup, PowerShell version, and
# (4) Sequence code fires before anything else in the script, and it does in a specified order.
#     so use Sequence when you have tasks that MUST complete first and in order.
# hostname of target server systems:

                Workflow Get-Feats 
                {
                    Parallel
                    {
                        InlineScript {Get-WindowsFeature -Name *DNS*}
                        InlineScript {Get-WmiObject Win32_NetworkAdapterConfiguration}
                            Sequence  
                            {
                                $PSVersionTable.PSVersion
                                $env:ComputerName
                            }
                    }
                }


--------Tying Everything Together

# completing this requires at least two computers joined to the same domain.
# on dc1, which is the author's originating computer, he will author a workflow that does the following:
# - renames a computer
# - reboots the machine
# - resumes the workflow automatically after restart
# - reports on the computer's name change
# - reports on the system's disk configuration

----------------Try It Yourself - Using Workflow to Rename and Restart a Remote Computer 
# four steps total
# here we write a worflow that renames and reboots a remote domain-joined system.
# after the reboot, the workflow will generate a couple simple reports

# 1) launch elevated ISE and create new script in C: drive titled renamebox.ps1

# 2) build the workflow

                workflow Rename-Box
                {
                    param([string]$newcname)

                    Rename-Computer -NewName $newcname -Force -Passthru
                    Restart-Computer -Force -Wait 
                    Get-ClmInstance -ClassName Win32_ComputerSystem | Select-Object -ExpandProperty Name | 
                    Set-Content -Path "C:\$newcname.txt"
                    Get-Disk | Out-File -FilePath "C:\diskconfig.txt"
                }

#               Note the Restart-Computer -Force -Wait switch
#                    the -Wait switch parameter is crucial to the workflow operation b/c it instructs
#                    the workflow to literally wait until the target system(s) have come back from their reboot
#                    continuing the workflow.

# 3) when finished typing, press F5 in the ISE to load the Rename-Box workflow definition into session memory.

# 4) you can NOW invoke the workflow. Here add your domain administrer credentials to make sure your dont get "Access Denied" error
Rename-Box -newcname memnew -PSComputerName mem2 -PSCredential companya\administrator

--------Summary Q&A Workshop

--------Summary

# we introduced a Get-WmiObject cmdlet but did not explain it yet. (see next chapter)

WMI = Windows Management Instrumentation
CIM = Common Information Model 
# note both will use Regular Expressions

--------Q&A 

# some PS cmdlets are NOT useable in workflow. Why? bc PS Workflows are meant to run to completion with no user intervention.
# most of these cmdlets allow some level of "nurse maiding" for them to do their work.
# most scrips require self-running and self-correcting approaches.

                """
                Add-History                 Invoke-History
                Add-PSSnapin                New-Alias 
                Clear-History               New-Variable 
                Clear-Variable              Out-GridView 
                Complete-Transaction        Remove-PSBreakpoint
                Debug-Process               Remove-PSSnapin 
                Disble-PSBreakPoint         Remove-Variable
                Enable-PSBreakPoint         Set-Alias 
                Enter-PSSession             Set-PSBreakpoint 
                Exit-PSSession              Set-PSDebug 
                Export-Alias                Set-StrictMode 
                Export-Console              Set-TraceMode 
                Get-Alias                   Set-Variable
                Get-History                 Start-Transaction
                Get-PSBreakpoint            Start-Transcript 
                Get-PSCallStack             Stop-Transcript
                Get-PSSnapin                Trace-Command 
                Get-Transaction             Undo-Transaction
                Get-Variable                Use-Transaction 
                Import-Alias                Write-Host
                """


# InlineScript statement is first defined here/now.
# add InlineScript blocks to our workflow when we need to add PS code that is normally disallowed in a PS workflow.
# you can ven define and use variables within an InlineScript code block.

# Can I run Windows 8.1 administrative workstation while authoring PS workflows?
# Yes, remember that you will be targeting your server workflows at servers, and PS remoting and the workflow engine
# take care of the rest.

--------Workshop 
# extend the Try It Yourself by
# - create a simple text file that contains a list of computer names in your test network
# - create a second text file that contains the new names for the test network
# - edit the workflow such that you feed it both text files as input. Your goal is for the workflow
#   to rename and reboot multiple computers. Use PS workflow's parallel execution capability.

--------Quiz 

# "look and feel" of PS workflows closely resembles that of PS functions.
# Functions are named code blocks that can be reused and tweaked to the administrator's desire.
# PS workflows use a very function-like syntax and runtime behavior.

# Resume-Job cmdlet is used to initiate execution of a suspended PS workflow job. 
# How? it "checkpoints their state to disk."
# Later, an administrator can load up the PSWorkflow module and issue Resume-Job to resume the workflow at its last checkpoint.

# .\myscript.ps1 is used to load the workflow script which contains a workflow named Set-SysConfig into your current session.
# Why? How is this done? We can "dot source" the workflow script file to bring the enclosed Set-SysConfig workflow into memory.
# Then, after we have loaded the workflow script, we can then call Set-SysConfig as we would any other cmdlet.



===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 15 Introducing WMI and CIM 

WMI = Windows Management Instrumentation
# can access just about any aspect of Windows system hardware and software subsystems with WMI
CIM = Common Information Model 
# note both will use Regular Expressions

# Limitations of WMI
# (1) it relies on firewall unfriendly remoting protocols such as Remote Procedure Calls (RPC) and the
# Distibuted Component Object Model (DCOM)
# (2) WMI remote access processes on multiple remote computers in series rather than in parallel.
# BUT despite (1) and (2), WMI is powerful and an industry standard.
# - has steep learning curve b/c technology is not user friendly.

--------Defining WMI and CIM 

# WMI is Microsoft's proprietary implementation of a vendor-neutral standard called the CIM
# the CIM defines a standarized interface to describe computer system hardware and software.
# Microsoft developed WMI instead of accessing the CIM classes originally b/c CIM was a young technology.
# Today, Microsoft embraces CIM and fully embraces it.

# original was SNMP (Simple Network Management Protocol)
# CIM was next
# Microsoft developed WMI as CIM was a young technology
# CIM is now mature
CIM cmdlets are updated wrappers around older WMI calls

# idea = use a SQL like database query syntax to query a system's configuration in a way that is NOT tied
#        to any particular vendor's proprietary standards.

# NOTE - CIM and its related systems management standard, Web Based Enterprise Managment (WBEM) are
# managed by consortium of technolgy vendors called Distributed Management Task Force (DMTF).

----------------Where Does WMI Exist?

# All Windows server and client operating systems since 2000 have a built-in database of WMI informatio
# called the WMI repository.
# You will see both WMI and CIM in the repository. Both have cmdlets.
# For us, WMI and CIM are the same thing --> in Windows PowerShell, CIM cmdlets are updated wrappers around older WMI calls.

# WMI "database" actually consists of all contents of the C:\Windows\System32\WBEM
# file type in WMI is the MOF (Managed Object Format)


--------Getting Comfortable with WMI 
----------------Quick Primer of WMI Terminology
# CIM repository consists of the following:
        # Schema = collection of namespaces and is defined directly by the DMTF
        # Namespace = describes a subtree of the CIM/WMI schema. Most common namespace in Windows management if ROOT\CIMv2
        # Class = each namespace contains a number of related classes or object blueprints.
        # Instance = if your computer contains data for a class, the data objects themselves are called Instances.
        # Property = granular attribute of a class instance.
        # Method = 

----------------WMI Browser Tools

PS> Wmic /?
                        [global switches] <command>

                        The following global switches are available:
                        /NAMESPACE           Path for the namespace the alias operate against.
                        /ROLE                Path for the role containing the alias definitions.
                        /NODE                Servers the alias will operate against.
                        /IMPLEVEL            Client impersonation level.
                        /AUTHLEVEL           Client authentication level.
                        /LOCALE              Language id the client should use.
                        /PRIVILEGES          Enable or disable all privileges.
                        /TRACE               Outputs debugging information to stderr.
                        /RECORD              Logs all input commands and output.
                        /INTERACTIVE         Sets or resets the interactive mode.
                        /FAILFAST            Sets or resets the FailFast mode.
                        /USER                User to be used during the session.
                        /PASSWORD            Password to be used for session login.
                        /OUTPUT              Specifies the mode for output redirection.
                        /APPEND              Specifies the mode for output redirection.
                        /AGGREGATE           Sets or resets aggregate mode.
                        /AUTHORITY           Specifies the <authority type> for the connection.
                        /?[:<BRIEF|FULL>]    Usage information.

                        For more information on a specific global switch, type: switch-name /?


                        The following alias/es are available in the current role:
                        ALIAS                    - Access to the aliases available on the local system
                        BASEBOARD                - Base board (also known as a motherboard or system board) management.
                        BIOS                     - Basic input/output services (BIOS) management.
                        BOOTCONFIG               - Boot configuration management.
                        CDROM                    - CD-ROM management.
                        COMPUTERSYSTEM           - Computer system management.
                        CPU                      - CPU management.
                        CSPRODUCT                - Computer system product information from SMBIOS.
                        DATAFILE                 - DataFile Management.
                        DCOMAPP                  - DCOM Application management.
                        DESKTOP                  - User's Desktop management.
                        DESKTOPMONITOR           - Desktop Monitor management.
                        DEVICEMEMORYADDRESS      - Device memory addresses management.
                        DISKDRIVE                - Physical disk drive management.
                        DISKQUOTA                - Disk space usage for NTFS volumes.
                        DMACHANNEL               - Direct memory access (DMA) channel management.
                        ENVIRONMENT              - System environment settings management.
                        FSDIR                    - Filesystem directory entry management.
                        GROUP                    - Group account management.
                        IDECONTROLLER            - IDE Controller management.
                        IRQ                      - Interrupt request line (IRQ) management.
                        Press any key to continue, or press the ESCAPE key to stop


# AUTHOR chooses to skip talking about this b/c this is PS book.

----------------Try It Yourself - Exploring WMI Classes and Instances    WMI Explorer from CodePlex

# https://wmie.codeplex.com
# downloaded as zip file

# 1) Right click on its icon and run as administrator
# 2) click CONNECT to connect to your local system.
# 3) In Namespaces pane, right click ROOT\CIMV2. 
#    From short cut menu (right click on ROOT/CIMV2 icon itself). Choose Enumerate Classes

# 4) Scroll the ROOT/CIMV2 classes until you find Win32_LogicalDisk. Right click this class and 
#    (ATUL - what Right Click options show:
#                                           Enumerate Instance
#                                           Show MOF
#                                           Show MOF (Amended Qualifiers)
#                                           Copy MOF
#                                           Copy Path
#                                           Copy Relative Path
#                                           Execute Method
#
#    Another approach to find the class you need is to type localdisk into the Quick Filter and press Enter
#    Just accept Win32 as one of the many quirks of WMI/CIM; the classes use the Win32 prefix even though your
#    computer is 64-bit.
#
#    Note - once you Enumerate Instances, then what happens is that the next box prepopulates with choices.

# 5) Win32_LogicalDisk class lists instances in the Instances pane. Simply left-click one of your volumes to view
#    its properties in the Properties pane.
#    ATUL - so far it works.

# 6) WMI supports a SQL like query language that Microsoft calls WMI Query Language or WQL.
#    WMI Explorer (ATUL THIS IS WHAT YOU ARE LOOKING AT) provides the query help that is very uesful.
#    Useful example: you want to attach a WMI filter to an Active Directory Group Policy Object (GPO).

# 7) Spend time examining one of your instances and select show MOF from the shortcut menu.
#    ATUL right click one of the Instances here and get the following choices from the shortcut menu:
#                                           Show MOF
#                                           Copy MOF
#                                           Copy Path
#                                           Copy Relative Path
#                                           Execute Method
#   AUTHOR if you examine, you will see stuff like file system type, free space, quota information, etc. Note how
#          much useful data you can pull from the WMI repository.

# 8) For grins, right click one of your instances and select Show MOF.

                        instance of Win32_LogicalDisk
                        {
                            Caption = "D:";
                            CreationClassName = "Win32_LogicalDisk";
                            Description = "CD-ROM Disc";
                            DeviceID = "D:";
                            DriveType = 5;
                            MediaType = 11;
                            Name = "D:";
                            SystemCreationClassName = "Win32_ComputerSystem";
                            SystemName = "STUDY_LAPTOP";
                        };

#    So here, WMI Explorer shows you the underlying Managed Object Format (MOF) definition for that instance.
#    This definition may prove useful to you when you architect MOF files for use with Windows PowerShell DSC.

----------------Some Useful WMI Classes 

# At this point, you should now have a more practical idea of how the WMI repository works from a practical perspective.
# Author - biggest challege to retrieving system configuration data via WMI is figuring out which class contains the 
#          information you require. Here is a short reference of the Author's
# Win32_BIOS: BIOS make, model, and version number
# Win32_PhysicalMemory: everything about the system's hardware RAM sticks
# Win32_DesktopMonitor: display resolution
# Win32_NetworkAdaptor: network interface card (NIC) statistics
# Win32_OperatingSystem: Windows OS version installed on the target system
# Win32_StartupCommand: list of autostart software
# Win32_Process: running processes
# Win32_Service: installed system services
# Win32_Product: installed software

# next - how to leverage our Windows PowerShell skilsl to query the WMI repository on one or more target systems

--------Using Windows PowerShell WMI Commands

# lets enumerate the core WMI Windows PowerShell cmdlets:
PS> Get-Command -Noun *wmi* | Select-Object -Property Name

                        PS C:\> Get-Command -Noun *wmi* | Select-Object -Property Name

                        Name
                        ----
                        Get-WmiObject       <<<<<<<<<<<<AUTHOR FOCUS<<<<<<<<<
                        Invoke-WmiMethod    <<<<<<<<<<<<AUTHOR FOCUS<<<<<<<<<
                        Register-WmiEvent
                        Remove-WmiObject
                        Set-WmiInstance

----------------Using Get-WMIObject 

# You are out of luck using Get-WMIObject unless you know the class name that you are looking for.
# Given that you ACTUALLY KNOW the class name, you can use stnadard Windows PowerShell pipeline syntax to go from there.

# ATUL
# if run
PS> Get-WMIObject 
Class Win32_Process 
# then you get long list.


# If you really want to list all the classes contained within a given namespace, simply use the optional -Namespace parameter
Get-WMIObject -Namespace "root\cimv2" -List 
"""
                        PS C:\> Get-WmiObject -Namespace "root\cimv2" -List

                           NameSpace: ROOT\CIMV2

                        Name                                Methods              Properties
                        ----                                -------              ----------
                        __SystemClass                       {}                   {}
                        __thisNAMESPACE                     {}                   {SECURITY_DESCRIPTOR}
                        __Provider                          {}                   {Name}
                        __Win32Provider                     {}                   {ClientLoadableCLSID, CLSID, Concurrency, DefaultMachineNam..
                        __ProviderRegistration              {}                   {provider}
                        __EventProviderRegistration         {}                   {EventQueryList, provider}
                        __ObjectProviderRegistration        {}                   {InteractionType, provider, QuerySupportLevels, SupportsBat..
                        __ClassProviderRegistration         {}                   {CacheRefreshInterval, InteractionType, PerUserSchema, prov..
                        __InstanceProviderRegistration      {}                   {InteractionType, provider, QuerySupportLevels, SupportsBat..
                        __MethodProviderRegistration        {}                   {provider}
                        __PropertyProviderRegistration      {}                   {provider, SupportsGet, SupportsPut}
                        __EventConsumerProviderRegistration {}                   {ConsumerClassNames, provider}
                        __NAMESPACE                         {}                   {Name}
                        __IndicationRelated                 {}                   {}
                        __EventFilter                       {}                   {CreatorSID, EventAccess, EventNamespace, Name...}
                        __EventConsumer                     {}                   {CreatorSID, MachineName, MaximumQueueSize}
                        __FilterToConsumerBinding           {}                   {Consumer, CreatorSID, DeliverSynchronously, DeliveryQoS...}
                        __AggregateEvent                    {}                   {NumberOfEvents, Representative}
                        __TimerNextFiring                   {}                   {NextEvent64BitTime, TimerId}
                        __Event                             {}                   {SECURITY_DESCRIPTOR, TIME_CREATED}
                        __ExtrinsicEvent                    {Create,SetShare...  {SECURITY_DESCRIPTOR, TIME_CREATED}
                        Win32_DeviceChangeEvent             {}                   {EventType, SECURITY_DESCRIPTOR, TIME_CREATED}
                        Win32_SystemConfigurationChangeE... {}                   {EventType, SECURITY_DESCRIPTOR, TIME_CREATED}
                        Win32_VolumeChangeEvent             {}                   {DriveName, EventType, SECURITY_DESCRIPTOR, TIME_CREATED}
                        MSFT_WMI_GenericNonCOMEvent         {Create, Revert}     {ProcessId, PropertyNames, PropertyValues, ProviderName...}
                        MSFT_NCProvEvent                    {}                   {Namespace, ProviderName, Result, SECURITY_DESCRIPTOR...}
                        MSFT_NCProvCancelQuery              {}                   {ID, Namespace, ProviderName, Result...}
                        MSFT_NCProvClientConnected          {}                   {Inproc, Namespace, ProviderName, Result...}
                        MSFT_NCProvNewQuery                 {}                   {ID, Namespace, ProviderName, Query...}
                        MSFT_NCProvAccessCheck              {}                   {Namespace, ProviderName, Query, QueryLanguage...}
                        Win32_SystemTrace                   {}                   {SECURITY_DESCRIPTOR, TIME_CREATED}
"""

# Lets begin our WMI investigation by viewing all the process names on the local system

Get-WMIObject -Class Win32_Process | Select-Object -Property processname
"""
                        PS C:\> Get-WmiObject -Class Win32_Process | Select-Object -Property processname

                        ProcessName
                        -----------
                        System Idle Process
                        System
                        Registry
                        smss.exe
                        csrss.exe
                        wininit.exe
                        csrss.exe
                        winlogon.exe
                        services.exe
                        ...
"""
# then we can drill into a specific running process

Get-WMIObject -Query "SELECT * FROM win32_process WHERE Name='WMIExplorer.exe'"

"""
                        PS C:\> Get-WmiObject -Query "SELECT * FROM win32_Process WHERE Name='WMIExplorer.exe'"


                        __GENUS                    : 2
                        __CLASS                    : Win32_Process
                        __SUPERCLASS               : CIM_Process
                        __DYNASTY                  : CIM_ManagedSystemElement
                        __RELPATH                  : Win32_Process.Handle="18276"
                        __PROPERTY_COUNT           : 45
                        __DERIVATION               : {CIM_Process, CIM_LogicalElement, CIM_ManagedSystemElement}
                        __SERVER                   : STUDY_LAPTOP
                        __NAMESPACE                : root\cimv2
                        __PATH                     : \\STUDY_LAPTOP\root\cimv2:Win32_Process.Handle="18276"
                        Caption                    : WmiExplorer.exe
                        CommandLine                : "C:\Users\Atul\AppData\Local\Temp\Temp2_WmiExplorer_2.0.0.2.zip\WmiExplorer.exe"
                        CreationClassName          : Win32_Process
                        CreationDate               : 20190401204556.511141-240
                        CSCreationClassName        : Win32_ComputerSystem
                        CSName                     : STUDY_LAPTOP
                        Description                : WmiExplorer.exe
                        ExecutablePath             : C:\Users\Atul\AppData\Local\Temp\Temp2_WmiExplorer_2.0.0.2.zip\WmiExplorer.exe
                        ExecutionState             :
                        Handle                     : 18276
                        HandleCount                : 855
                        InstallDate                :
                        KernelModeTime             : 58125000
                        MaximumWorkingSetSize      : 1380
                        MinimumWorkingSetSize      : 200
                        Name                       : WmiExplorer.exe
                        OSCreationClassName        : Win32_OperatingSystem
                        OSName                     : Microsoft Windows 10 Home|C:\WINDOWS|\Device\Harddisk0\Partition5
                        OtherOperationCount        : 998
                        OtherTransferCount         : 13764
                        PageFaults                 : 38078
                        PageFileUsage              : 45712
                        ParentProcessId            : 9016
                        PeakPageFileUsage          : 47516
                        PeakVirtualSize            : 5074386944
                        PeakWorkingSetSize         : 66844
                        Priority                   : 8
                        PrivatePageCount           : 46809088
                        ProcessId                  : 18276
                        QuotaNonPagedPoolUsage     : 26
                        QuotaPagedPoolUsage        : 507
                        QuotaPeakNonPagedPoolUsage : 46
                        QuotaPeakPagedPoolUsage    : 534
                        ReadOperationCount         : 92
                        ReadTransferCount          : 308692
                        SessionId                  : 1
                        Status                     :
                        TerminationDate            :
                        ThreadCount                : 11
                        UserModeTime               : 31875000
                        VirtualSize                : 5053526016
                        WindowsVersion             : 10.0.17134
                        WorkingSetSize             : 47558656
                        WriteOperationCount        : 48
                        WriteTransferCount         : 2398
                        PSComputerName             : STUDY_LAPTOP
                        ProcessName                : WmiExplorer.exe
                        Handles                    : 855
                        VM                         : 5053526016
                        WS                         : 47558656
                        Path                       : C:\Users\Atul\AppData\Local\Temp\Temp2_WmiExplorer_2.0.0.2.zip\WmiExplorer.exe
"""

# b/c the results of a WMI call are so verbose, you will observe that PS formatting subsystem displays all the of the 
# propeties in a list view.
# The Get-WMIObject binds to the root\CIMv2 by default, so this is why we do NOT need to get a -namespace parameter.
# The -class paramater is positional. Thus we can use the gwmi alias with the -class positional parameter to retrieve system BIOS
# information with very little typing.
gwmi 

PS> gwmi win32_BIOS             # can capitalize GWMI or bios as it all works same

                        PS C:\WINDOWS\system32> gwmi win32_BIOS

                        SMBIOSBIOSVersion : A06
                        Manufacturer      : Dell Inc.
                        Name              : A06
                        SerialNumber      : CP06QZ1
                        Version           : DELL   - 1

----------------Dipping Our Toes into WQL

# If you have used WMI in other contexts, then you are alreay famililar with WQL. This SQL like syntax enables us to 
# query WMI classes by using what looks, feels, and behaves like standard database access language syntax.
# (1) Example, can use -query parameter of Get-WMIObject here to list specific information regarding 
#     the logical disk instances on our local system:

PS> Get-WMIObject -Query "SELECT * FROM win32_logicaldisk" | Select-Object -Property drivetype, freespace, size | Format-Table -AutoSize 

# tab completion does not work well with WMI (shame b/c its so useful to many system admin)

# (2) Other occastion whe WQL is useful is -filter parameter of Get-WMIObject
#     Example, want to list disks on our system that have more than 1 TB of free space?
PS> Get-WMIObject -Class win32_logicaldisk -Filter "freespace > 1000000000000"

# TIP important to note that WQL uses its own expression syntax. Example, WQL uses > and < for -gt and -lt
#     also wildcard operator is % and not the usual *

# Example 
# retrieve all services that include the string SQL
PS> Get-WMIObject -Query "SELECT * FROM Win32_Service WHERE name LIKE '%sql%'"

# NOTE Use * wildcard in our WQL SELECT but the WHERE clause uses %
#      Also inner LIKE expression is delimited by single quotes
#      Remember that when we invoke the -query or -filter parameters of Get-WMIObject, then we are
#      switching gears to WQL syntax instead of PS syntax.

See Code Project article about WQL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<ATUL<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

----------------Querying the WMI Repository Remotely 

# Good news: Get-WMIObject cmdlet supports remote access thru the -ComputerName parameter. So we can pull vast amounts of info
# about system configuration data from multiple computers in the network.
# Bad news: WMI uses the legacy DCOM (Distributed Component Object Model) and RPC (Remote Procedure Call) protocols, which
# use random connection ports and are decidely firewall unfriendly.
# Also remote access process is sequential rather than parallel, leading to potentially long waits.

----------------Combining Background Jobs with Remote WMI Calls 

# AUTHOR I suggest you create background jobs to manage remote WMI calls. This gives your PS prompt back to you,
# so that you can continue issuing commands and getting work done.
# Example - create a background job called RemoteWMI that queries 3 computers for their physical memory related metadata:

# Cool! By combining the jobs architecture with remote WMI calls, we can compensate for the performance issues of WMI remote access:

# Summary code
PS> Start-Job -Name RemoteWMI -ScriptBlock {}
# Details
PS> Start-Job -Name RemoteWMI -ScriptBlock {
                                Get-WMIObject -ComputerName localhost,mem1,mem2 -Query "SELECT * FROM Win32_PhysicalMemory" |
                                Select-Object -Property PSComputerName, Description, DeviceLocator, FormFactor, MemoryType, Capacity
                                }
# to fetch resuls, use Receive-Job
PS> Recieve-Job -name RemoteWMI -keep

                    PSComputerName:         # Atul - rest is blank due to lack of time 
                    Descriptor:
                    DeviceLocator:
                    FormFactor:
                    MemoryType:
                    Capacity:
                    RunspaceId:
    
----------------Calling WMO Methods 
# Once you gain initial familiarity with WMI namespaces, classes, instances, and properties, then you need to know 
# what actions you can actually perform on WMI objects? Not many!?! Why? WMI/CIM repository only contain a few methods.
# Why? AUTHOR (ATUL no answer). There are two methods: Reboot and Shutdown methods of the Win32_OperatingSystem class

# AUTHOR - WMI has been historically used by Windows system administrators to reboot or shut down lcoal or remote computers.

WMI Explorer 2.0.0.2
# from downloads folder, Open then click on WimiEmplorer.exe
# extracted file to WMI_Extracted folder on C:
# lauches WMI Explorer GUI
# first select a namespace and class then use the WMI Explorer Navigation tabs to browse between properties and methods.
# We use Invoke-WMIMethod to invoke a WMI method call on a local/remote machine
# ATUL - this is for cmdlet discovery

# Example
# reboot my MEM2 member server computer from my administrative computer:
Get-WMIObject -Class Win32_OperatingSystem -ComputerName mem2 | Invoke-WMIMethod -Name Reboot 
# then in the lab, MEM2 immediately rebooted with no questions asked!!!
# If you are running Win8.1 or Windows Server 2012, you can use Restart-Computer or Stop-Computer to reboot or shutdown
# a local or remote computer.
# Under the covers, those cmdlets are nothing more than wrappers for WMI calls.

--------Using Windows PowerShell CIM Commands

# technically, Microsoft has depreciated the WMI cmdlets in favor of their CIM counterparts 
# this is what is available now in PSv5.
PS> gcm -noun *c

                    PS C:\WINDOWS\system32> gcm -noun *c

                    Name
                    ----
                    Get-CimAssociatedInstance
                    Get-CimClass
                    Get-CimInstance                         # Get-WMIObject
                    Get-CimSession
                    Invoke-CimMethod                        # Invoke-WMIObject
                    New-CimInstance
                    New-CimSession
                    New-CimSessionOption
                    Register-CimIndicationEvent
                    Remove-CimInstance
                    Remove-CimSession
                    Set-CimInstance

----------------What is the Deal with CIM Cmdlets?

# AUTHOR enjoys that new CIM cmdlets give same access to the WMI/CIM repository as the WMI cmdlets do, but we 
# can also take advantage of the latest and greatest advances in remoting technology:
# CIM cmdlets use vendor-neutral Web Services for Management (WS-Man) protocol.
ATUL 
# this makes CIM cmdlets potentially useable on non-Windows systems and more firewall friendly remoting environment.
# Also WS-Man/WinRM cmdlets can contact up to 25 remote computers parallel at a time (good performance).

----------------Try It Yourself - Using the PowerShell CIM Commands 

# use three node Active Directory domains, but will work with only two.
# run all commands from DC1 Windows Server 2012 R2 domain controller
# also have two Windows Server 2012 R2 member servers named MEM1 and MEM2.
# 1) retrieve OS info from the local system
PS> Get-CimInstance -ClassName Win32_OperatingSystem
#    now notice that Get-CIMInstance uses -ClassName instead of -Class as its parameter name.
#    also notice that you can STILL use -Class as the cmdlet will still work.

# 2) run same query against MEM1 and MEM2
Invoke-Command -ComputerName localhost,MEM1,MEM2 -ScriptBlock {}
Invoke-Command -ComputerName localhost,MEM1,MEM2 -ScriptBlock { =Get-CIMInstance -ClassName Win32_OperatingSystem }

# 3) CIM cmdlets make it easier to discover classes.
#    Lets enumerate all the root\CIMv2 classes that include the keyword disk:
Get-CIMClass -ClassName *disk*
#    Note that when using CIM cmdlets Tab Completion works.

# 4) show you how to leverage CIM cmdlets to actually modify system configuration.
#    Add a simple comment to the Comment: property of your system's Microsoft XPS Document Writer default printer.
#    Start by creating a reference to the XPS virutal printer
$xpsprinter = Get-CIMInstance -ClassName Win32_Printer -Filter ""
$xpsprinter = Get-CIMInstance -ClassName Win32_Printer -Filter "Name = 'Microsoft XPS Document Writer'"

# 5) you can review the properties by piping our new variable to Get-Member.
#    Many of these properties are read-only, and thus finding "writable CIM instance properties" can be challening
$xps | Get-Member -MemberType Properties 

# 6) lets modify the Comment: property text by using traditional dot notation
$xpsprinter.Comment = "This comment is courtesy of Windows PowerShell."

# 7) prior Comment will not actually commit until we "seal" it by invoking Set-CimInstance cmdlet
Set-CIMInstance -InputObject $xpsprinter

# 8) before we open XPS Document Writer GUI, lets verify the change by using only Windows PS
$p = Get-Printer -Name  "Microsoft XPS Document Writer"
$p.Comment 
#    Did you see the new comment text? Great. Now open the Print Management Microsoft Management Console (MMC) from
#    the PowerShell console:
PrintManagement.msc 

# 9) in the PrintManagement console, open All Printers, right-click the Microsoft XPS Document Writer, select Properties
#    from the shortcut menu. See the newly changed Comment property. See Microsoft XPS Document Writer Properties dialgoue GUI

# Note at one time, Microsoft tried to compete against Adobe PDF format with Microsoft's own XML-based format called
# XML Paper Specification or XPS.
# The XPS Document Writer (XPSDW) is print-to-file virtual printer that allows you to convert document files into XPS format.
# XPSDW behaves the same as PDF vitural printer behaves in Adobe Acrobat Professional.

--------Summary Q&A Workshop Quiz

--------Summary

# if you have ever used System Center, Lync Center, SharePoint Server, or Exchange Server, then you are actually using WMI/CIM.
# This chaper was useful b/c now you have a Windows PowerShell based entry point into the WMI (Windows Management Instrumentation).

# Next is RegEx = more granular pattern matching using more than just * and % operators.

--------Q&A

# one liner PS code to retrieve Windows desktop settings for a particular domain account:
Get-WMIObject -Class Win32_Desktop -Filter ""
Get-WMIObject -Class Win32_Desktop -Filter "name='COMPANYA\\Administrator'"
# purpose of the \\ double backslashes? b/c PS and WMI/WQL have different syntax rules and therefore
# WMI/WQL use the backshash \ as an escape character.
# Therefore, to get WMI to recognize the normal backshash separating domain name and username, we need to escape it first.
# PS itself uses the backtick ` as an escape character.

# I am currently logged onto my administrative workstation using standard user credentials.
# How can I mamek WMI calls on remote machines using administrative credentials?
# WMI and CIM commands both support the -Credential parameter.
# But the parameter works for REMOTE access scenarios only. 
# That is, you can NOT specify alternative creds for a local WMI call.
# Here is an example of making a remote WMI call by using domain adminstrator credentials:
Invoke-Command -ComputerName MEM1,MEM2 -ScriptBlock {}
Invoke-Command -ComputerName MEM1,MEM2 -ScriptBlock { Get-CIMInstance -ClassName Win32_LogicalDisk -Credential "companya\administrator" }


# Given the spotty nature of WMI/CIM documentation within Windows itself, where to find more 
# about WMI classes, instances, properties, and methods?
# Google it.
# MSDN Microsoft Developer Network online libraries.
# Example to find more info on Win_32LogicalDisk class --> google 
WMI "Win32_LogicalDisk"

--------Workshop

# If you have only a single system availabel to you, use your knowledge of WMI and Windows PS to receive all TCP/IP
# client information you can from a PS session. Get IP address, DNS server address, link speed, etc.

# If you have multiple computers available, retrieve the same info from all the systems.

# Take your aggregated data and generate a CSV file that you can import into Excel. Turn into a beautiful report.

--------Quiz

# 1) CIM cmdlets access different data corpus than WMI
#    False. Regardless of using WMI or CIM cmdlets, there is only one WMI repository on our Windows based system.
#    Look at PS CIM commands as "wrapper" around WMI calls.

# 2) As you add roles and services to your Windows Server computer, you will have additional WMI namespaces from 
#    which to retrieve data.
#    False. WMI namespaces may be different on your different server and client systems depending upon what capabilties
#    are installed on that box. Example, DNS and Active Directory namespaces are on domain controllers.
#    Also, Just b/c you have a namespace available to you DOES NOT mean that your system has populated class instances.
#    Example, the Root\CIMv2 namespace has a class called Win32_TapeDrive, but your system will NOT have connected tape drives.

# 3) WMI instance properties contain a qualifier that lists their writability.
#    True. Have not addressed topic of Qualifier until now:
#    Qualifier is a type of subproperty.
#    Example to explain this:
PS> $class = Get-CIMClass -ClassName Win32_Printer
PS> $class.CimClassProperties

            Name                : Caption 
            Value               :
            CimType             : String 
            Flags               : Property, ReadOnly, NullValue 
            Qualifiers          : {MaxLen, read}
            ReferenceClassName  : 

            Name                : ShareName 
            Value               :
            CimType             : String 
            Flags               : Property, NullValue 
            Qualifiers          : {Description, MappingStrings, read, write}

#   Notice that Qualifiers property of the Caption class property is read-only, where ShareName class property is writable.
#   So you can write yourself some PS to retrieve instance properties that are either read-only or writable, depending on
#   on your business needs.


===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 16 Searching and Filtering with Regular Expressions

# revisiting wildcard operators
# understanding RegEx
# using -Match parameter
# using SelectString
# using RegEx type accelerator

# Hypos 
# - you need to find a PS script you wrote 2 years ago. No idea which script file the function resides in.
# - you need to identify all Excel files in your company that contain personally identifiable information (SS# or cc#)
# * and % are not powerful enough
# Solution: combine PS code with RegEx syntax


--------Revisiting the Wildcard Operators 

# * used in MSDOS as wilcard character
# * used in RegEx is different from wildcard operator

----------------Traditional Wildcard Search Syntax

PS> Get-Command -Module *dns*

                        PS C:\WINDOWS\system32> Get-Command -Module *dns*

                        CommandType     Name                                               Version    Source
                        -----------     ----                                               -------    ------
                        Function        Add-DnsClientNrptRule                              1.0.0.0    DnsClient
                        Function        Clear-DnsClientCache                               1.0.0.0    DnsClient
                        Function        Get-DnsClient                                      1.0.0.0    DnsClient
                        Function        Get-DnsClientCache                                 1.0.0.0    DnsClient
                        Function        Get-DnsClientGlobalSetting                         1.0.0.0    DnsClient
                        Function        Get-DnsClientNrptGlobal                            1.0.0.0    DnsClient
                        Function        Get-DnsClientNrptPolicy                            1.0.0.0    DnsClient
                        Function        Get-DnsClientNrptRule                              1.0.0.0    DnsClient
                        Function        Get-DnsClientServerAddress                         1.0.0.0    DnsClient
                        Function        Register-DnsClient                                 1.0.0.0    DnsClient
                        Function        Remove-DnsClientNrptRule                           1.0.0.0    DnsClient
                        Function        Set-DnsClient                                      1.0.0.0    DnsClient
                        Function        Set-DnsClientGlobalSetting                         1.0.0.0    DnsClient
                        Function        Set-DnsClientNrptGlobal                            1.0.0.0    DnsClient
                        Function        Set-DnsClientNrptRule                              1.0.0.0    DnsClient
                        Function        Set-DnsClientServerAddress                         1.0.0.0    DnsClient
                        Cmdlet          Resolve-DnsName                                    1.0.0.0    DnsClient

# get list of all .ps1 script files that exist on home drive (use ~ to represent home directory)
PS> Get-ChildItem -Path ~ -Recurse -Filter *.ps1 

# get list of all Excel .xlsx files 
PS> Get-ChildItem -Path ~ -Recurse -Filter *xlsx*

# the pattern matching is a simple substitution matching operator.
# use a ? to match a single character.
# use a * to match any characters.

# to match reports from year 2000 onwards
PS> Get-ChildItem -Path "C:\reports" -Filter 200?.xls
PS> gci 
PS> gci *reg*
PS> gci *200*
PS> gci -Filter *200*

# can use -Path and -Filter positional parameters by name

# AUTHOR 
"RegEx = wildcard on steroids"

--------Understanding Regular Expressions

# how to PS know your regular expressions or not?
# Windows PS has .NET at its core, so we need to leverage .NET Framework's implemenation of reg ex sytnax in our PS code

----------------Where to use RegEx in PS 

# 1) when using the -match parameter in a Where-Object expression
# 2) when using the Select-String cmdlet to search file content for matches
# 3) when using RegEx objects in PS scripts

----------------Setting up our test environment

# choose a folder containing many dummy files to test
# create some bogus text files
New-Item -Type file -Name "bogusfile.txt"
New-Item -Type file -Name "logfile23.txt"
New-Item -Type file -Name "logfile24.txt"
New-Item -Type file -Name "logfile25.txt"
New-Item -Type file -Name "logfile26.txt"
New-Item -Type file -Name "logfile27.txt"

--------Using the -Match Parameter

# you can leverage these .NET based regex rules no matter which PS version.
# -match parameter is supported in only one cmdlet
PS> Get-Command -ParameterName match | Select-Object -Property Name

PS> Get-Command -ParameterName match

                        PS C:\docstest> Get-Command -ParameterName match

                        CommandType     Name                                               Version    Source
                        -----------     ----                                               -------    ------
                        Cmdlet          Where-Object                                       3.0.0.0    Microsoft.PowerShell.Core


                        PS C:\docstest> Get-Command -ParameterName match | Select-Object -Property Name

                        Name
                        ----
                        Where-Object

# you can also send string comparison statements to PS directly. 
# Example, try each
                        """
                        PS> Set-Location -Path C:\DocsTest           
                        PS> Set-Location -Path C:\Users
                        PS> Set-Location -Path C:\DocsTest          # simplify focus to one directory so no need to use path
                        """
PS C> "nowhere" -match "no"                 # True matches no
PS C> "nowhere" -match "where"              # True matches where
PS C> "gingerbreadman" -match "bread"       # sample is inside source. True matches bread
PS C> "gingerbreadman" -match "man"         # sample is inside source. True matches man
PS C> "cookie" -match "cake"                # sample is NOT inside source. False b/c cake is not inside source
PS C> "cookie" -match "co"                  # True b/c co inside source
PS C> "cookie" -match "CO"                  # True b/c not case sensitive
PS C> "COOKIE" -match "co"                  # True b/c not case sensitive


                        PS C> "tim" -notmatch "tim"                 # sample should not match with source
                        False
                        PS C> "Tim" -Cmatch "tim"                   # case sensitivity
                        False
                        PS C> "Tim" -cmatch "tim"                   # case sensitivity
                        False


# sample matches so far "float thoughout the source string"
# but what if checking only the beginning or end of the text?

<<<<<<<<<<<<<<<<ATUL # search for grep then regular expressions prior work
<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<

# PS built-in includes automatic variable named $matches for troubleshooting RegEx

                        PS> "myfaveexpression" -match "fave"
                        True
                        PS> $matches

                        Name                           Value
                        ----                           -----
                        0                              fave

----------------Using RegEx Anchors and Ranges

# in .NET/PS RegEx implementations, we can use ^ caret and $ dollar sign characters to anchor our match
# to the ^ beginning or $ end respectively

                        PS> Get-ChildItem | Where-Object { $_.name -match "^log" }

                            Directory: C:\DocsTest


                        Mode                LastWriteTime         Length Name
                        ----                -------------         ------ ----
                        -a----        4/12/2019  12:51 PM           1158 logfile23.txt
                        -a----        4/12/2019  12:48 PM              0 logfile24.txt
                        -a----        4/12/2019  12:48 PM              0 logfile25.txt
                        -a----        4/12/2019  12:48 PM              0 logfile26.txt
                        -a----        4/12/2019  12:48 PM              0 logfile27.txt
                        -a----         2/9/2019   2:30 PM          10522 logfile28.txt
                        -a----        5/14/2014  12:20 AM              0 logfile29.txt

# note that 
PS> ls log*.txt         # will also do this
PS> dir log*.txt        # will also do this

# AUTHOR your choice to use RegEx or old school * and ?

PS> "123456789" -match "^1"     # True  b/c 1 sample is the first character in source
PS> "123456789" -match "^2"     # False b/c 2 sample is not the first character in source
PS> "23456789" -match "^2"      # True  b/c 2 sample is the first charater in source
PS> "tim" -match "t[iou]m"      # True  b/c single character 
PS> "tim" -match "t[abc]m"      # False
PS> "tim" -match "t[iou]m"      # True
PS> "tim" -match "t[abc]m"      # False
PS> "tim" -match "t[^iou]m"     # False
PS> "tim" -match "t[^tiou]"     # False b/c ^ requires only one character but sample has four characters
PS> "tim" -match "[^tiou]m"     # False b/c ^ requires only one character but sample has four characters
PS> "tim" -match "[^t]m"        # True  b/c evaluates first character
PS> "tim" -match "t[^i]m"       # False b/c evaluates first character
PS> "tim" -match "t[^tm]m"      # True
PS> "tim" -match "t[^ti]m"      # False

Tricky. Need to test it to be sure.
# using $ and ? can be tricky to use thus not reliable.
# better to use range

----------------Using RegEx Qualifiers 

# . matches any SINGLE character thus . for RegEx as ? for Windows wildcard
# * matches zero or more of PRECEEDING character
# ? matches zero of more of preceeding character CLASS (see next section)
# UNC = Universal Naming Convention path 

# \ in RegEx for escape character
# need escape characters in PS when want PS to interpret the FOLLOWING CHARACTER differently from its literal meaning.
# Example ATUL "u/sername" -match "[a-z]*\\[a-z]*"          True b/c \ will escape NEXT character which is \
# Example want to match UNC path such as \\server\
# so this code would be                                     \\server\share -match "^\\\\"

# Examples
# 1) 
PS> "domain\username" -match "[a-z]*\\[a-z]*"       # True. Asked for letter before backslash and then after
PS> "1234\134" -match "[a-z]*\\[a-z]*"              # True b/c 

# 2) 
PS> "tim.warner" -match "tim\.warner"               # True, here escape the period character.
                                                    # note period on left side acts as word breaker

# 3)
PS> "username" -match "^user$"      # ^ requires a match after ^ for all characters after ^
PS> "tim" -match "tim"              # True 
PS> "tim" -match "tim^"             # False
PS> "tim" -match "^tim"             # True b/c exact match after ^
PS> "tiim" -match "^tim"            # False, need exact match after ^
PS> "timnoway" -match "tim"         # True b/c exact match "tim" after ^


# 4)
PS> "bat" -match "b.t"          # True b/c any single character then t so match is "at"
PS> "bst" -match "b.t"          # True as match is "st"
PS> "bXt" -match ".t"           # True as match is "Xt"
PS> "bstf" -match "t."          # True as match is "tf"

                        PS C:\WINDOWS\system32> help ^

                        Name                              Category  Module                    Synopsis
                        ----                              --------  ------                    --------
                        Where-Object                      Cmdlet    Microsoft.PowerShell.Core Selects objects from a collection based on the...
                        Get-PSReadlineOption              Cmdlet    PSReadline                Gets values for the options that can be config...
                        Set-PSReadlineOption              Cmdlet    PSReadline                Customizes the behavior of command line editin...
                        about_Automatic_Variables         HelpFile                            Describes variables that store state informati...
                        about_Comparison_Operators        HelpFile                            Describes the operators that compare values in...
                        about_Regular_Expressions         HelpFile                            Describes regular expressions in Windows Power...
                        about_Split                       HelpFile                            Explains how to use the Split operator to spli...
                        about_WQL                         HelpFile                            Describes WMI Query Language (WQL), which can be
                        about_should                      HelpFile                            Provides assertion convenience methods for com...


#5) 
PS> "The Titantic" -match "T"                      # True b/c Value T mactches
PS> $matches                                       # to show identifying Values that match
PS> "The Titantic" -match "T...T"                  # True b/c Value "T...T"
PS> "They rode many Titantic" -match "T...T"       # True b/c Value looking for 3 character exact matches
PS> "they titatic" -match "T...T"                  # True b/c Value looking for 3 character exact matches


PS> "they timbtatic" -cmatch "t...t"               # True b/c Value looking for 3 character bewteen
PS> "they TimbTatic" -cmatch "T...T"               # True b/c Value looking for 3 character bewteen

------------------------Single or Double Quotes?

# double quoted strings translate variables into their underlying value
# single quotes leave variable as is
                        PS> $w = "world"                # double qoutes allow variable to translate into their underlying data
                        PS> Write-Host $w               # world
                        PS> $w                          # world
                        PS> $ww = 'world'               # world - single quotes leave variable as it is

                        PS> Write-Host $w               # world
                        PS> Write-Host $ww              # world
                        PS> Write-Host "Hello $w"       # Hello world
                        PS> Write-Host "Hello $ww"      # Hello world
                        PS> Write-Host 'Hello $ww'      # Hello $ww

----------------Using RegEx Character Classes 

# character classes take the form of a backslash and a letter to substitute for more complex matches
# \w matches any alphanumeric character
# \W matches any nonalphanumeric character
# \s matches any whitespace
# \S matches any non-whitespace
# \d matches any digit
# \D matches any non-digit
# use {} to specify match counts 

# TIP some of these character classes are case sensitive, to need to get used to them/experiment.

PS> "123455678" -match "\d{2,4}"        # seek match on at least 2 digits, but no more than 4 digits
                                        # True, match value 1234
PS> "quepublishing.com" -match "\w"     # True, match value q       be careful,
PS> "quepublishing.com" -match "\w*"    # True, match value entire string 
PS> "quepublishing.com" -match "\W"     # True, match value         empty space
PS> "......" -match "\W"                # True, match value ......  returns the dots if no other letters 
PS> "quepublishing....com" -match "\W*" # True, match value         empty space (seems to return empty space if letters plus dots)

PS> "192.168.128.14" -match "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"        # True      PS> $matches    192.168.128.14
        # Book True b/c we are matching on one to three digits, a literal period, and so on for the four octets that comprise an IPv4 address
        # Note - this is tricky (AUTHOR). Valid IPv4 address octets run from 0 to 255. Therefore watch as both bogus characters still
        # are True BUT NOT CORRECT

PS> "256.0.300.132" -match "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"         # True but 300 outside of range 0-255.
PS> "blah10.0.0.1" -match "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"          # True b/c 10.0.0.1 are true but blah is clearely wrong.

PS> "blah10.0.0.1" -match "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"         # False. Note that Value reports 10.0.0.1
# used an anchor character here -- see Regular Expressions Cookbook

# AUTHOR - no business logic here in regular expressions. All it does is string comparison and pattern matching. Its up to us 
# as system administrators to build failsafe mechanisms into our expressions to ensure that only valid data is captured.

# see Mastering Regular Expressions book by Jeffrey Friedl by O/Reilly Media (many use this as their "go to" RegEx reference)
# see about_Regular_Expressions conceptual help article
# see Regular-Expressions.info      but dense
# b/c PS uses .NET implementation of RegEx, Microsoft itself has a RegEx reference site at http://msdn.microsoft.com/library/az24scfc.aspx

# you should now be able to use RegEx to filter files by using the -match parameter of the Where-Object cmdlet

# Example, the following two-lines retrieves all dynamic link library (DLL) files located in your System32 folder that begin with f and
# whose filename contains exactly five characters:
$regex = '^f(.{5})\dll$'
Get-ChildItem -Path c:\windows\system32\*.dll | Where-Object { $_.Name -match $regex } 
# so here we stored the RegEx string in the variable named, then popped that variable into our -match parameter clause
# AUTHOR - once you get the basics of RegEx filtering down, big time sink is GONE.





PS> "192.168.128.14" -match "\d{1,3}\.\d{1,3}\."                        # True      PS> $matches    192.168.
PS> "192.168.128.14" -match "\d{1,3}\."                                 # True      PS> $matches    192.
PS> "192.168.128.14" -match "\d{1,3}\"
            parsing "\d{1,3}\" - Illegal \ at end of pattern.
            At line:1 char:1
            + "192.168.128.14" -match "\d{1,3}\"
            + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                + CategoryInfo          : OperationStopped: (:) [], ArgumentException
                + FullyQualifiedErrorId : System.ArgumentException

PS> "192.168.128.14" -match "\d{1,3}"                                   # True      PS> $matches    192
PS> "192.168.128.14" -match "\d{1,3}."                                  # True      PS> $matches    192.
PS> "192.168.128.14" -match "\d{1,3}\."                                 # True      PS> $matches    192.


--------Using Select-String 

# performing -match search INSIDE of files.
# Example need to locate PII (Personally Indentifiable Data) in a stack of text files as your HR dept server.
# Thus use Select-String cmdlet which finds text in strings and files

# two main parameters in Select-String are -pattern which represents your RegEx expression and -path which points to file location

----------------Practical Select-String Example 

PS C DocsTest> ls                   # same results
PS C DocsTest> Get-ChildItem        # same results

                        Directory: C:\Docstest

                        Node                LastWriteTime         Length Name
                        --                -------------         ------ ----
                        ----        4/12/2019  12:47 PM              0 bogusfile.docx
                        ----        4/12/2019  12:47 PM              0 bogusfile.txt
                        ----        4/12/2019  12:51 PM           1158 logfile23.txt
                        ----        4/12/2019  12:48 PM              0 logfile24.txt
                        ----        4/12/2019  12:48 PM              0 logfile25.txt
                        ----        4/12/2019  12:48 PM              0 logfile26.txt
                        ----        4/12/2019  12:48 PM              0 logfile27.txt
                        ----         2/9/2019   2:30 PM          10522 logfile28.txt
                        ----        5/14/2014  12:20 AM              0 logfile29.txt

# now write your name in two random files. Try to figure out which ones?

                        PS C> Select-String -Path c:\docstest\*.* -Pattern "atul"

                        logfile25.txt:1:Atul
                        logfile29.txt:1:Atul

# try again, adding more

                        PS C Docstest> Select-String -Path c:\docstest\*.* -Pattern "atul"

                        logfile25.txt:1:Atul
                        logfile28.txt:134:atul hi there
                        logfile28.txt:135:atulwhythis
                        logfile28.txt:136:atulwhynotatul
                        logfile29.txt:1:Atul

----------------Try It Yourself - Locating PII by Using RegEx and Select-String

# add social security numbers, telephone numbers, email addresses
# www.RegExBuddy.com
# www.RegExLib.com

# test the SS data
PS> "123-45-6789" -match "\b[]{}-[]{}-[]{}\b"
PS> "123-45-6789" -match "\b[0-9]{6}-[0-9]{7}-[0-9]{3}\b"
PS> "123-45-6789" -match "\b[0-9]{2}-[0-9]{5}-[0-9]{7}\b"
# now try Select-String to test our matches
PS> Select-String -Path "c:\docs\*.*" -Pattern "\b[0-9]{2}-[0-9]{5}-[0-9]{7}\b"
# to locate telephone #s
PS> Select-String -Path "c:\docs\*.*" -Pattern "^[0-9]\d{2}-\d{3}-\d{4}"
# to locate an email
PS> Select-String -Path "c:\docs\*.*" -Pattern "\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2-4}\b"

# test these to learn

--------Using the RegEx Type Accelerator

#.NET Framework contains a class called
System.Text.RegularExpressions.Regex   # that we can use to store RegEx expressions

# earlier we learned something like this
$regex1 = "\b[]+@[]+\.[]{}\b"
$regex1 = "\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b"
# this is nice shorthand for adding a RegEx expression to, for instance, the -match parameter
# However, if we run that $regex1 variable into Get-Member, we see that it is just a plain string, and we can NOT
# do must with simple System.string objects in this context.
# In PS, we want three dimensional objects (ie with properties and methods), and if the .NET Framework gives 
# us RegEx objects, can we use those?

# use the "PS RegEx type accelerator" to create RegEx objects directly. Here is the syntax
PS> [regex]$regex2 = "\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b"
PS> $regex2 | Get-Member 
"""
                        PS C:\Docstest> [regex]$regex2 = "\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b"
                        PS C:\Docstest> $regex2 | Get-Member

                           TypeName: System.Text.RegularExpressions.Regex

                        Name                MemberType Definition
                        ----                ---------- ----------
                        Equals              Method     bool Equals(System.Object obj)
                        GetGroupNames       Method     string[] GetGroupNames()
                        GetGroupNumbers     Method     int[] GetGroupNumbers()
                        GetHashCode         Method     int GetHashCode()
                        GetObjectData       Method     void ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info,...
                        GetType             Method     type GetType()
                        GroupNameFromNumber Method     string GroupNameFromNumber(int i)
                        GroupNumberFromName Method     int GroupNumberFromName(string name)
                        IsMatch             Method     bool IsMatch(string input), bool IsMatch(string input, int startat)
                        Match               Method     System.Text.RegularExpressions.Match Match(string input), System.Text.RegularExpressi...
                        Matches             Method     System.Text.RegularExpressions.MatchCollection Matches(string input), System.Text.Reg...
                        Replace             Method     string Replace(string input, string replacement), string Replace(string input, string...
                        Split               Method     string[] Split(string input), string[] Split(string input, int count), string[] Split...
                        ToString            Method     string ToString()
                        MatchTimeout        Property   timespan MatchTimeout {get;}
                        Options             Property   System.Text.RegularExpressions.RegexOptions Options {get;}
                        RightToLeft         Property   bool RightToLeft {get;}
"""
# so here we are using a RegEx expression to match and simulataneously validate email addresses.

# to perform a match by using a RegEx object, we can invoke the object's native match() method like this
$email = time@email.com         # create the variable
$regex2.match($email)           # invoke the object's native match() method


--------Summary Q&A Workshop

----------------Q&A

# We used RegEx powered searches to replace text. Can we use PowerShell to replace text?
# Yes.
                        PS> "Atul Golhar" -replace "Atul","Winner winner chicken dinner"
                        Winner winner chicken dinner Golhar

replace() # method also works inside PowerShell
# How compatible are regular expressions in different programming languages?
# think about SQL and RegEx
# With SQL, you find that most relational database system vendor adhere to most of the SQL standards, but there are
# still some vendor-specific tweaks to the language.
# RedEx is the same.
# see also wikipedia Comparison of regular expressions engines

# Is it more efficient to use Get-ChildItem and the pipeline when using Select-String to find string matches?
# Good question, to ask whether Windows PowerShell when asking if one method inside PS is faster than another?
# Example
# need to parse an entire folder filled with *.log files then use -Filter parameter with Get-ChildItem first before
# invoking Select-String
# see this specific example
Get-ChildItem -Path "C:\LogFiles" -Filter *.log -Recurse | Select-String -Pattern "Mozilla"


----------------Workshop

# research how you can use a RegEx to validate that a given string capture is a valid IPv4 address.
# the following strings should evaluate to True
0.0.0.0
172.16.32.34

# the following strings should evaluate to False
10.0.1.256      # 256 is outside range 0-255
1O.0.1.1        # used a O (capital letter) not the zero character


----------------Quiz 

# 1) How does PS evaluate the following RegEx statement, and does it validate a UNC path correctly?
"66\\ServerXYZ\Share1" -match "\\\\\w+\\\w+"
# True the RegEx expressiopm does validate the string
# But it does NOT validate the UNC paths.
# UNC paths should take the form of \\servername\sharename

# The \w+ notation matches any alphanumeric character, and the + matches one or more instances of any alphanumeric character
# We can fix the problem by using a RegEx anchor like this:
PS> "66\\ServerXYZ\Share1" -match "\\\\\w+\\\w+"
# False


# 2) How does PS evaluate the following RegEx expression?
"Error XBCSE" -match "X[BCD]SE"

# False. Remember that when we use a set like [BCD] or [459], we are matching on a single character. So, in other words,
# the entire [] set looks only for one character.
# The following RegEx expression would evaluate to True
"Error XBCSE" -match "X[BCD]CSE"


# 3) Why does the following RegEx expression evaluate to False?
"domain1\twarner" -match "\*twarner"
# We need to escape the backslash.
# In PS, we use the backtick (`) as an escape character, but 
# in RegEx, we use the backslash to do the same thing.

# Here the asterisk looks for one or more occurrences of the previous character.
# In this expression, we want to match on the backslash literal, followed by the string twarner
# Lets try this expression, but this time, we will escape the backslash so taht PS interprets the character literally:
"domain1\twarner" -match "\\*twarner"


===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Part 6 Enterprise-Class Windows PowerShell
===========================================================================================

===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 17 Managing Software with Windows PowerShell OneGet

# learn this hour:
# understanding IT related terminology
# preparing your environment
# browsing package repositories
# installing software from the command line
# managing providers and packages
# hosting a private OneGet repository

# AUTHOR - several years ago, he was a systems admin for a research center in a large university
# so he ran several of the infrastructure servers using Red Hat Linux so he got his first 
# experience installing and maintaining software from entire command line environment.

# at that time, package managers like yum, rpm, and apt were in their infancy, so 9 of 10 software 
# installation would fail midway b/x he was missing some software component dependency(s).
# Today, Linux CLI software installation uses package managers to resolve dependencies automatically,
# and can even be configured to update themselves with no administrator intervention.

# (ATUL) How does PS fit into this?
# Microsoft via Windows PS v5 and the OneGet module, gave Windows 
# systems administrators command-line (ie potential for automated) software installation and maintenance capabilities.

# This chapter will give you the understanding on how to use OneGet to download, install, update, and remove sofware
# on local/remote computers.
# Note that as of 2015, Windows PS v5 is in "Technical Preview" mode (ie code is prerelease thus highly volatile).

--------Understanding IT-Related Technology

----------------Package
# = named collection of files and dependent objects that comprise a software application
----------------Package Manager 
# = enables person to manage software pacakges on our computer.
# Example Debian Linux uses the APT (Advanced Package Tool) to discover, install, maintain, and uninstall software using CLI.
# In .NET, NuGet is a solution level package creation and management system used by PowerShell OneGet.
# "Solution Level" = only software developers working with NuGet DIRECTLY
# In PS, NuGet is the underlying package management "engine" that supports all the other packave providers that we have
# installed on our system.
# in PS, NuGet = takes the role of BOTH package creation tool and package manager.
# NOTE = PS promotes Chocolatey as your "go to package manager" with Windows PS v5 OneGet.

----------------Repository 
# Microsoft uses Chocolatey as the repository = community maintained software repo.
# NOTE - you have to TRUST that any download from Chocolatey has not been malicously tampered with.
# NuGet --> Chocolaty nougat word play.

----------------OneGet 
# originally called PowerOneGet
# OneGet is the PS module that enables Windows admins to interact with package managers and software repositories
# thus
# OneGet is NOT a package manager per se, but rather its a "package management aggregator"
# over time, we will add different package providers and repositories such as Cygwin and PyPi

# ATUL - how to search for Help about this - I dont remember
# try closing and relaunching? nope. doesnt give enough info

                        EXAMPLES:
                             Save-Help              : Download help files from the Internet and saves
                                                      them on a file share.
                             Update-Help            : Downloads and installs help files from the
                                                      Internet or a file share.
                             Get-Help Get-Process   : Displays help about the Get-Process cmdlet.
                             Get-Help Get-Process -Online
                                                    : Opens online help for the Get-Process cmdlet.
                             Help Get-Process       : Displays help about Get-Process one page at a time.
                             Get-Process -?         : Displays help about the Get-Process cmdlet.
                             Get-Help About_Modules : Displays help about Windows PowerShell modules.
                             Get-Help remoting      : Searches the help topics for the word "remoting."

                        SEE ALSO:
                             about_Updatable_Help
                             Get-Help
                             Save-Help
                             Update-Help


# pg 333 Book
# had to index it.
PS> PowerShell          # nope, only gives generic info
PS> $PSVersionTable     # yes, this works

                        PS C:\WINDOWS\system32> Powershell
                        Windows PowerShell
                        Copyright (C) Microsoft Corporation. All rights reserved.


                        PS C:\WINDOWS\system32> $PSVersionTable

                        Name                           Value
                        ----                           -----
                        PSVersion                      5.1.17134.590
                        PSEdition                      Desktop
                        PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
                        BuildVersion                   10.0.17134.590
                        CLRVersion                     4.0.30319.42000
                        WSManStackVersion              3.0
                        PSRemotingProtocolVersion      2.3
                        SerializationVersion           1.1.0.1

--------Preparing Your Environment
# OneGet has a hard dependency on Windows Powershell v5
# only Windows 8.1, Windows Server 2012 R2, and Windows 10 (Client and Server) can run Windows PowerShell v5.

# AUTHOR:
# uses Windows PowerSheell as PoSH, POSH, or PoSh.
# suggests user should serach for and download WMF 5.0          --> WMF = Windows Management Framework

----------------Retrieving Package Providers

PS> Get-PackageProvider 

                        PS C:\WINDOWS\system32> Get-PackageProvider

                        Name                     Version          DynamicOptions
                        ----                     -------          --------------
                        msi                      3.0.0.0          AdditionalArguments
                        msu                      3.0.0.0
                        PowerShellGet            1.0.0.1          PackageManagementProvider, Type, Scope, AllowClobber, SkipPublisherCheck, Install...
                        Programs                 3.0.0.0          IncludeWindowsInstaller, IncludeSystemComponent

# you can look at package providers just like we considered PSProviders
# remember how FileSystem provider gives your PSDrives for each volume on your system?
# package providers do the same --> they open up connections to one or more corresponding package sources.
# Define the 3 built-in pacakge providers:
# 1) ARP = Add/Remove Programs and is accessed thru the Programs and Features Control Panel item
# 2) MSI = Microsoft Software Installer and deals with .msi and .msp installation packages that have arrived
#          on your computer k
# 3) PSModule

# now lets look at the specific package sources that are exposed by our installed package providers:

                        PS C:\WINDOWS\system32> Get-PackageSource | Format-List *

                        Name         : PSGallery
                        Location     : https://www.powershellgallery.com/api/v2
                        Source       : PSGallery
                        ProviderName : PowerShellGet
                        Provider     : Microsoft.PackageManagement.Implementation.PackageProvider
                        IsTrusted    : False
                        IsRegistered : True
                        IsValidated  : False
                        Details      : {[ScriptPublishLocation, https://www.powershellgallery.com/api/v2/package/], 
                                        [InstallationPolicy, Untrusted], [PackageManagementProvider, NuGet], 
                                        [ScriptSourceLocation, https://www.powershellgallery.com/api/v2/items/psscript]...}

# AUTHOR has 3 examples, but ATUL only has 1
# notice that PSGallery is given to us via the PSModule provider.
# Also notice, IsTrusted, IsRegistered, and IsValidated properties. These are crucial properties b/c they speak
# to whether our computer trusts the package content that is offered by the sources.

--------Browsing Package Repositories

# run Find-Package with no additional arguments to perform a completely open query for available packages given our
# currently loaded package providers:


                        PS C:\WINDOWS\system32> Find-Package

                        The provider 'nuget v2.8.5.208' is not installed.
                        nuget may be manually downloaded from
                        https://onegetcdn.azureedge.net/providers/Microsoft.PackageManagement.NuGetProvider-2.8.5.208.dll and installed.
                        Would you like PackageManagement to automatically download and install 'nuget' now?
                        [Y] Yes  [N] No  [S] Suspend  [?] Help (default is "Y"):

# The prompt lets us know that we need to install the NuGet runtime environment to delve into the PSModule pacakage provider
# and the PSGallery and MSPSGallery sources.

# lets run Find-Package command and see what happens...
# ATUL - huge amount of info: in fact is so big, I need to save it under a different name

PS> Find-Package | Select-Object -First 10 | Format-Table -AutoSize

                        PS C:\WINDOWS\system32> Find-Package | Select-Object -First 10 | Format-Table -AutoSize

                        Name               Version Source    Summary
                        ----               ------- ------    -------
                        SpeculationControl 1.0.12  PSGallery This module provides the ability to query the speculation control settings for the system.
                        AzureRM.profile    5.8.3   PSGallery Microsoft Azure PowerShell - Profile credential management cmdlets for Azure Resource Manager
                        Azure.Storage      4.6.1   PSGallery Microsoft Azure PowerShell - Storage service cmdlets. Manages blobs, queues, tables and files in Microsoft Azure storage accounts
                        AzureRM.KeyVault   5.2.1   PSGallery Microsoft Azure PowerShell - KeyVault service cmdlets for Azure Resource Manager
                        Carbon             2.8.1   PSGallery Carbon is a PowerShell module for automating the configuration Windows 7, 8, 2008, and 2012 and automation the installation and configuration of Windows applications, websites, and services. It can configure and manage:...
                        PSLogging          2.5.2   PSGallery Creates and manages log files for your scripts.
                        Write-ObjectToSQL  1.13    PSGallery Writes the properties of an object into a database table. The table will be created if it doesnt exist.
                        PackageManagement  1.3.2   PSGallery PackageManagement (a.k.a. OneGet) is a new way to discover and install software packages from around the web....
                        Azure              5.3.0   PSGallery Microsoft Azure PowerShell - Service Management
                        PowerShellGet      2.1.2   PSGallery PowerShell module with commands for discovering, installing, updating and publishing the PowerShell artifacts like Modules, DSC Resources, Role Capabilities and Scripts.

# what is going on here?
# When and where did the Chocolatey package source show up?
# as it turns out, the installation of NuGet brings along Chocolatey for the ride automatically.

                        PS> Get-PackageProvider

                        Name                     Version          DynamicOptions
                        ----                     -------          --------------
                        msi                      3.0.0.0          AdditionalArguments
                        msu                      3.0.0.0
                        NuGet                    2.8.5.208        Destination, ExcludeVersion, Scope, SkipDependencies, Headers, FilterOnTag, 
                                                                  Contains, AllowPrereleaseVersions, ConfigFile, SkipValidate
                        PowerShellGet            1.0.0.1          PackageManagementProvider, Type, Scope, AllowClobber, SkipPublisherCheck, 
                                                                  InstallUpdate, NoPathUpdate, Filter, Tag, Includes, DscResource, 
                                                                  RoleCapability, Command, PublishLocation, ScriptSourceLocation, 
                                                                  ScriptPublishLocation
                        Programs                 3.0.0.0          IncludeWindowsInstaller, IncludeSystemComponent


# so now we have two new package providers: NuGet and Chocolatey
# so lets review our pacakge sources again:

                        PS C:\WINDOWS\system32> Get-PackageSource

                        Name                             ProviderName     IsTrusted  Location
                        ----                             ------------     ---------  --------
                        PSGallery                        PowerShellGet    False      https://www.powershellgallery.com/api/v2
                        nuget.org                        NuGet            False      https://api.nuget.org/v3/index.json

# this is the AUTHOR's printout

                        PS C:> Get-PackageSource 

                        Name                             ProviderName     IsTrusted  IsRegisted: IsValidated    
                        ----                             ------------     ---------  --------    -----------    
                        PSGallery                        PSModule         False      True        False          
                        MSPSGallery                      PSModule         True       True        False          
                        chocolatey                       Chocolatey       False      True        False 


# notice that although PowerShell loaded and registered the Chocolatey repository, it did NOT set the IsTrusted flag to True
# NOTE - in terms of your approach to OneGet, you have two choices
# You can either trust that the software packages contained within a given repository are trustworthy, OR
# You can create your own private repository.
# Each method has its respective advangates and disadvantages. I think the general "word on the street" is that
# b/c Microsoft is invested in the Chocolatey project, they take a greater degree of responsibility in ensuring
# the integrity of all its repository software. You will need to counterbalance higher security with higher admin convenience.

# We can use the OneGet cmdlet parameters to constrain our package search to a particular repository:
# AUTHOR did NOT give code here for this search
# but you can follow along using above example
PS> Find-Package | Select-Object -First 20 # thus search for "x*"
# Remember that the PSModule provider gives us PowerShell-related packages. Specifically, do you see the packages in the
# previous code run that start with x? Those are resource pacakges intended for use with Windows PowerShell DSC (Desired State Configuration)
# Therefore, of necessity, we will revisit OneGet in Hour 18 "Desired State Configuration Basics (DSC)" when we formally treat
# how to use DSC.

----------------Using Find-Package 

# Here we focus primarily on the Chocolatey package feed.
# If you have an idea of which software package you are interested in, simply pass the value with the -Name parameter:
PS> Find-Package -Name winrar 
# does not work on my machine
PS> Find-Package
# gives huge list --> see .txt file
# AUTHOR uses winrar on purpose b/c its so popular with Windows power users, thus Chocolatey also stores a WinRAR package.
# What is surprising is to see how much closed source software, like WinRAR, that is available in the Chocolatey repo. AUTHOR's
# favorite open source archiver is 7-Zip which is also listed there as well.
# Anyway, PS OneGet, working in conjunction with Chocolatey gives you the most recent stable package release by default.
# However, you can show all package versions that are stocked by a given respository by invoking the -Allversions switch parameter
PS> Find-Package -Name winrar -AllVersions 

----------------Using Out-GridView 

# You may want a more readable report of available software packages, so try (not printable) Out-Gridview 
PS> Find-Package -ProviderName PSModule | Sort-Object -Property Name | Out-GridView
PS> Find-Package -ProviderName NuGet | Sort-Object -Property Name | Out-GridView
PS> Find-Package -ProviderName Chocolatey | Sort-Object -Property Name | Out-GridView

----------------Where is the Documentation?

# one of the downsides of open source documentation is that its not formally keptup/gardened/cultivated/maintained.
# Sometimes, the Summary property is complete, but it may be missing from your Find-Package output.
# Here the help files can be skeletel at best.
# Even after running Update-Help, it may still be skeletel.

--------Installing Software from the Command Line 

# Having identified a piece of software that interests us, lets learn to how to install it using OneGet cmdlet Install-Package
# and some of its more useful parameters.

# AUTHOR, recommend that at least initally, you run Install-Package with the -Verbose switch so that you get
# detailed feedback as to the package's download and installation status.
# Lets go ahead and install 7-Zip on our testing computer.

# ATUL 7-Zip is already installed on my Dell laptop.

PS> Install-Package -Name winrar -Verbose 

# AUTHOR
# Once you try this, you get a question: Are you sure you want to install software from 'chocolatey'?
# Trusted? later AUTHOR will show to supress the Trusted question prompt
# Pay attention to where PowerShell fetches the installation package from and where PowerShell installs the
# software on your local computer. This lack of standardization is a problematic aspect of Chocolatey and OneGet in general.

----------------Where Was the Software Installed?

# AUTHOR if your like me, you are accustomed to Windows software setting C:\Program Files or C:\Program Files (x86)
# as the default installation locations, depending upon whether the software is 64-bit or 32-bit.
# OneGet is not consistent about this b/c the individual that builds the software package is the one who determines
# where the software gets installed on your computer's hard disk.

# Lets investigate WinRAR archiver that we just installed.
# Run Get-Package to verify its installation.
# ATUL - Dell laptop did not have it, but ran command anyway and got this.

PS C> Get-Package

"""
                            PS C:\WINDOWS\system32> Get-Package

                            Name                           Version          Source                           ProviderName
                            ----                           -------          ------                           ------------
                            7-Zip 15.14 (x64)              15.14                                             Programs
                            Android Studio                 3.3                                               Programs
                            Microsoft Office Home and S... 15.0.5127.1000                                    Programs
                            McAfee Security Scan Plus      3.11.1012.1                                       Programs
                            Microsoft Mouse and Keyboar... 2.3.188.0                                         Programs
                            Microsoft Mouse and Keyboar... 2.3.188.0                                         msi
                            Microsoft Visual Studio 201... 10.0.50903                                        Programs
                            Microsoft Visual Studio 201... 10.0.50908                                        msi
                            NetBeans IDE 8.2               8.2                                               Programs
                            R for Windows 3.1.2            3.1.2                                             Programs
                            Sublime Text 2.0.2                                                               Programs
                            Microsoft Application Error... 12.0.6015.5000                                    msi
                            Office 15 Click-to-Run Exte... 15.0.5127.1000                                    msi
                            Office 15 Click-to-Run Loca... 15.0.5127.1000                                    msi
                            Office 15 Click-to-Run Lice... 15.0.5127.1000                                    msi
                            Visual C++ IDE Core Profess... 14.0.25420                                        msi
                            Microsoft Visual Studio 201... 14.0.25420                                        msi
                            Dell Touchpad                  19.2.17.70                                        Programs
                            SQL Server 2017 Integration... 14.0.1000.169                                     msi
                            Microsoft .NET Framework 4.... 4.5.50932                                         msi
                            Visual C++ Library CRT X86 ... 14.0.24210                                        msi
                            Microsoft SQL Server Compac... 4.0.8876.1       C:\Program Files\Microsoft SQ... msi
                            Microsoft VisualStudio Java... 14.0.25527                                        msi
                            Microsoft .NET Framework 4.... 4.5.51209                                         msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Microsoft Visual Studio 201... 14.0.23107                                        msi
                            SQL Server 2017 Shared Mana... 14.0.1000.169                                     msi
                            Microsoft .NET Core Runtime... 16.100.27415                                      msi
                            MSI Development Tools          10.1.17763.132                                    msi
                            Universal CRT Headers Libra... 10.1.17763.132                                    msi
                            Windows SDK for Windows Sto... 10.1.17763.132                                    msi
                            Microsoft Visual Studio 201... 14.0.23107                                        msi
                            Oracle VM VirtualBox 5.0.14    5.0.14                                            msi
                            WinRT Intellisense Mobile -... 10.1.17763.132                                    msi
                            Windows SDK EULA               10.1.17763.132                                    msi
                            Visual C++ IDE x64 Package     14.0.25420                                        msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Visual C++ Professional Tem... 14.0.25420                                        msi
                            Intellisense Lang Pack Mobi... 10.1.14393.33                                     msi
                            Microsoft Visual Studio Com... 14.0.23107                                        msi
                            Azure AD Authentication Con... 14.0.25420                                        msi
                            Intel(R) Rapid Storage Tech... 12.8.0.1016                                       Programs
                            Intel(R) Rapid Storage Tech... 12.8.0.1016      C:\Program Files\Intel\Intel(... msi
                            Microsoft Visual Studio 201... 14.0.23107                                        msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Windows Software Developmen... 8.100.26936                                       msi
                            Visual C++ Library CRT Desk... 14.16.27027                                       msi
                            Microsoft Portable Library ... 12.0.30501.0                                      msi
                            Blend for Visual Studio SDK... 3.0.40218.0      C:\Program Files (x86)\Micros... msi
                            Windows Desktop Extension SDK  10.1.17763.132                                    msi
                            Microsoft .NET Framework 4.... 4.6.1055                                          msi
                            WinRT Intellisense PPI - en-us 10.1.17763.132                                    msi
                            Universal CRT Extension SDK    10.1.17763.132                                    msi
                            Skype™ 7.0                     7.0.102          C:\Program Files (x86)\Skype\    msi
                            Windows Phone Emulator 8.1 ... 12.0.30501                                        msi
                            Tableau Public 2019.1 (2019... 19.1.272         C:\Program Files\Tableau\Tabl... msi
                            Tableau Public 2019.1 (2019... 19.1.272                                          Programs
                            Windows Runtime Intellisens... 8.100.25984                                       msi
                            Microsoft Visual C++ 2013 x... 12.0.21005                                        msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Universal General MIDI DLS ... 10.1.17763.132                                    msi
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Windows Live Photo Common      16.4.3505.912                                     msi
                            Visual C++ IDE Core Package    14.0.25431                                        msi
                            Microsoft SQL Server 2014 T... 12.0.2000.8                                       msi
                            Microsoft .NET Framework 4.... 4.5.50710                                         msi
                            Microsoft Visual Studio Ins... 1.18.1096.130                                     Programs
                            Cisco WebEx Meetings                                                             Programs
                            Amazon Kindle                  1.20.1.47037                                      Programs
                            Microsoft OneDrive             19.062.0331.0006                                  Programs
                            Ruby 1.9.3-p545                1.9.3-p545                                        Programs
                            Visual Studio Community 2017   15.9.28307.518                                    Programs
                            Aptana Studio 3                3.4.2                                             Programs
                            Coupon Printer for Windows     5.0.1.3                                           Programs
                            Google Chrome                  74.0.3729.131                                     Programs
                            CyberLink Media Suite Essen... 10.0                                              Programs
                            Microsoft Help Viewer 2.1      2.1.21005                                         Programs
                            Microsoft Help Viewer 2.1      2.1.21005                                         msi
                            Microsoft Help Viewer 2.2      2.2.25420                                         Programs
                            Microsoft Help Viewer 2.2      2.2.25420                                         msi
                            Microsoft SQL Server 2017                                                        Programs
                            Mozilla Firefox 44.0.1 (x86... 44.0.1                                            Programs
                            Mozilla Maintenance Service    44.0.1                                            Programs
                            McAfee LiveSafe                16.0 R18                                          Programs
                            Notepad++                      6.6.7                                             Programs
                            McAfee SafeKey(uninstall only) 2.2.3                                             Programs
                            TurboLaw Client Viewer                                                           Programs
                            TurboLaw Toolbar for Micros... 3.00                                              Programs
                            TurboLaw Toolbar for Micros... 3.00                                              Programs
                            VMware Player                  6.0.4                                             Programs
                            VMware Player                  6.0.4                                             msi
                            Windows Live Essentials        16.4.3505.0912                                    Programs
                            Windows Live Essentials        16.4.3505.912                                     msi
                            x86_64-8.1.0-win32-seh-rt_v...                                                   Programs
                            Windows App Certification K... 10.1.17763.132                                    msi
                            SQL Server Management Studi... 14.0.17289.0                                      msi
                            Microsoft Visual C++ 2008 R... 9.0.30729.4148                                    msi
                            WinRT Intellisense PPI - Ot... 10.1.17763.132                                    msi
                            Dell Backup and Recovery       1.6.2.0                                           Programs
                            Update for Microsoft Visual... 14.0.23317                                        Programs
                            McAfee WebAdvisor              4.1.0.36                                          Programs
                            Visual Studio 2013 Update 2... 12.0.30501                                        Programs
                            MicroStrategy Analytics Des... 9.4.1.7                                           Programs
                            Realtek Card Reader            6.2.9600.39054                                    Programs
                            Microsoft Visual C++ 2013 R... 12.0.40649.5                                      Programs
                            Windows Software Developmen... 10.1.17763.132                                    Programs
                            Microsoft Visual C++ 2017 R... 14.16.27029.1                                     Programs
                            Intel(R) Management Engine ... 9.5.14.1724                                       Programs
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            Dell SupportAssist             3.2.1.94         C:\Program Files\Dell\Support... msi
                            VS Update core components      14.0.25431                                        msi
                            Microsoft .NET Core SDK 2.1... 8.125.42190                                       msi
                            Microsoft .NET Core SDK 2.1... 2.1.502                                           Programs
                            SQL Server 2017 Batch Parser   14.0.1000.169                                     msi
                            Microsoft Visual Studio Tea... 14.98.25331                                       msi
                            Microsoft Visual C++ 2015 x... 14.0.24215                                        msi
                            Windows SDK Desktop Headers... 10.1.17763.132                                    msi
                            Visual C++ IDE Common Resou... 14.0.25420                                        msi
                            Microsoft Advertising SDK f... 8.1.30809.0                                       msi
                            Project and Item Templates ... 14.0.25527                                        msi
                            Intel® PROSet/Wireless Soft... 16.6.0                                            Programs
                            Microsoft Visual Studio Exp... 12.0.30501                                        Programs
                            Microsoft Visual Studio Exp... 12.0.21005                                        msi
                            SSMS Post Install Tasks        14.0.17289.0                                      msi
                            Microsoft VisualStudio Java... 14.0.25527                                        msi
                            Microsoft Visual Studio 201... 12.0.21005                                        msi
                            vcpp_crt.redist.clickonce      14.16.27012                                       msi
                            Microsoft .NET CoreRuntime ... 1.0.0.0                                           msi
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            HP Google Drive Plugin         36.0.102.68541                                    msi
                            Windows Live UX Platform La... 16.4.3505.912                                     msi
                            Microsoft Build Tools 14.0 ... 14.0.25420                                        msi
                            Microsoft Visual Studio Com... 14.0.25420.1                                      Programs
                            Microsoft Visual C++ 2010  ... 10.0.40219                                        msi
                            Microsoft .NET CoreRuntime SDK 1.1.27004.0                                       msi
                            Windows SDK for Windows Sto... 10.1.17763.132                                    msi
                            Windows Phone 8.1 SDK - x86    8.1.12358                                         msi
                            Microsoft Blend for Visual ... 14.0.25420                                        msi
                            Behaviors SDK (Windows) for... 12.0.51210.80                                     msi
                            Visual C++ Library CRT X64 ... 14.0.24210                                        msi
                            Microsoft Portable Library ... 12.0.30501.0                                      msi
                            Intel(R) PROSet/Wireless So... 3.1.1309.390     C:\Program Files (x86)\Intel\... msi
                            Visual C++ Library PGO X86 ... 14.0.24210                                        msi
                            Microsoft C++ Azure Mobile ... 1.0                                               msi
                            Visual Studio 2015 Update 3... 14.0.25420                                        Programs
                            Microsoft Visual Studio 201... 14.0.23107                                        msi
                            Microsoft SQL Server 2005 C... 3.1.0            C:\Program Files (x86)\Micros... msi
                            Microsoft Visual Studio 201... 12.0.30501                                        msi
                            Microsoft Visual C++ 2010  ... 10.0.40219                                        msi
                            WinRT Intellisense IoT - en-us 10.1.17763.132                                    msi
                            Update for Microsoft Visual... 12.0.30112                                        Programs
                            Microsoft Visual C++ 2013 R... 12.0.21005.1                                      Programs
                            Update for Microsoft Visual... 14.0.25431                                        Programs
                            Roslyn Language Services - x86 14.0.25431                                        msi
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            Test Tools for Microsoft Vi... 14.0.23107                                        msi
                            Microsoft Visual C++ 2013 C... 12.0.21005                                        msi
                            Microsoft Visual Studio 201... 14.0.25420                                        msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Windows IoT Extension SDK      10.1.17763.132                                    msi
                            Intel® Hardware Accelerated... 7.3.2                                             msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Microsoft Visual C++ 2013 x... 12.0.21005                                        msi
                            Microsoft Visual Studio 201... 14.0.23107                                        msi
                            Microsoft Visual C++ 2013 x... 12.0.21005                                        msi
                            Windows Phone 8.0 Emulation... 12.0.30501                                        msi
                            vs_update3notification         14.0.25431                                        msi
                            LocalESPCui for en-us          8.59.29989                                        msi
                            AzureTools.Notifications       2.7.30611.1601                                    msi
                            Windows Phone 8.1 Tools for... 14.0.25527                                        msi
                            Microsoft .NET Framework 4.... 4.5.50932                                         msi
                            TypeScript Tools for Micros... 1.0.1.0                                           msi
                            HPSmartDeviceAgentBase         1.1.0.0                                           msi
                            WinRT Intellisense Desktop ... 10.1.17763.132                                    msi
                            Microsoft .NET Core SDK 2.1... 2.1.505                                           Programs
                            Microsoft .NET Core SDK 2.1... 8.126.25827                                       msi
                            Microsoft Visual Studio Tea... 14.98.25331                                       msi
                            Microsoft Visual C++ 2012 C... 11.0.50727                                        msi
                            Microsoft Build Tools Langu... 14.0.25420                                        msi
                            Microsoft .NET Core Runtime... 16.88.27019                                       msi
                            DiagnosticsHub_CollectionSe... 15.9.28016                                        msi
                            Microsoft .NET Core Host FX... 16.100.27415                                      msi
                            Microsoft .NET Framework 4.... 4.5.21005                                         msi
                            Microsoft Visual Studio 201... 14.0.25431                                        msi
                            Build Tools Language Resour... 12.0.30501                                        msi
                            Visual C++ Library CRT ARM ... 14.0.24210                                        msi
                            Microsoft SQL Server Manage... 14.0.17289.0                                      Programs
                            SQL Server 2017 Client Tool... 14.0.1000.169                                     msi
                            Windows SDK AddOn              10.1.0.0                                          msi
                            PowerDirector                  10.0.0           C:\Program Files (x86)\CyberL... msi
                            Microsoft Visual C++ 2013 x... 12.0.21005                                        msi
                            Visual C++ Library ATL X64 ... 14.0.23026                                        msi
                            Windows IoT Extension SDK C... 10.1.17763.132                                    msi
                            Visual Studio 2015 Prerequi... 14.0.23107                                        msi
                            Windows Software Developmen... 8.100.26936                                       msi
                            Windows Phone 8.1 Emulators... 12.0.30501.0                                      Programs
                            Windows SDK DirectX x86 Remote 10.1.17763.132                                    msi
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            WinAppDeploy                   10.1.17763.132                                    msi
                            Visual C++ Library PGO X64 ... 14.0.24210                                        msi
                            Windows SDK DirectX x64 Remote 10.1.17763.132                                    msi
                            Visual C++ MSBuild X64 Package 14.0.25420                                        msi
                            Visual C++ Library CRT Appx... 14.16.27023                                       msi
                            SQL Server 2017 DMF            14.0.1000.169                                     msi
                            TypeScript Power Tool          1.8.34.0                                          msi
                            vs_minshellmsi                 15.9.28302                                        msi
                            Visual Studio 2012 Verifica... 14.0.25420                                        msi
                            Microsoft Visual C++ 2012 R... 11.0.60610.1                                      Programs
                            Visual Studio 2013용 Microso... 11.1.3411.3                                       msi
                            Intel® Trusted Connect Serv... 1.28.487.1                                        msi
                            HP EmailSMTP Plugin            43.0.0.0                                          msi
                            Windows SDK for Windows Sto... 10.1.17763.132                                    msi
                            Microsoft HEVC Media Extens... 1.0.0.0                                           msi
                            Microsoft Team Foundation S... 12.0.30501                                        msi
                            Module Microsoft Report Vie... 11.1.3411.3                                       msi
                            Microsoft Visual Studio 201... 12.0.21005                                        msi
                            Build Tools for Windows 10     14.0.25527                                        msi
                            Microsoft Visual C++ 2012 x... 11.0.60610                                        msi
                            Windows SDK Modern Non-Vers... 10.1.17763.132                                    msi
                            Microsoft Portable Library ... 12.0.30501.0                                      msi
                            Windows Simulator              15.0.27729                                        msi
                            Visual C++ IDE Desktop Plus... 14.0.23107                                        msi
                            Windows Azure Shared Compon... 1.1.20410.1601                                    msi
                            Microsoft .NET Core Host - ... 16.100.27415                                      msi
                            Windows SDK Desktop Tools x86  10.1.17763.132                                    msi
                            Microsoft .NET Core 5.0 SDK    1.0.23902                                         msi
                            Microsoft Visual Studio 201... 14.0.25527                                        msi
                            Visual C++ Library CRT X64 ... 14.0.24210                                        msi
                            Windows Software Developmen... 8.100.26936                                       msi
                            Visual C++ Library CRT X86 ... 14.0.24210                                        msi
                            Windows Phone SDK 8.0 Assem... 12.0.30501                                        msi
                            Microsoft .NET Framework 4.... 4.5.50710                                         msi
                            Microsoft Visual C++ 2012 R... 11.0.60610.1                                      Programs
                            Photo Common                   16.4.3505.912                                     msi
                            Dell Backup and Recovery - ... 1.6.2.0                                           Programs
                            Apple Application Support (... 6.1              C:\Program Files\Common Files... msi
                            SQL Server 2017 Shared Mana... 14.0.1000.169                                     msi
                            Windows SDK for Windows Sto... 10.1.17763.132                                    msi
                            Microsoft Visual Studio 201... 12.0.30501                                        msi
                            Media Suite                    10.1             C:\Program Files (x86)\CyberL... msi
                            Microsoft Visual Studio 201... 14.0.25420                                        msi
                            Apple Mobile Device Support    11.0.1.2         C:\Program Files\Common Files... msi
                            Microsoft Visual C++ 2012 x... 11.0.60610                                        msi
                            Windows Phone 8.1 Tools for... 14.0.25527                                        msi
                            Project and Item Templates ... 14.0.25527                                        msi
                            MSBuild/NuGet Integration 1... 14.0.25420                                        msi
                            vs_communitymsires             15.0.26621                                        msi
                            Windows Phone 8.1 Tools for... 12.0.30501                                        msi
                            Photo Gallery                  16.4.3505.912                                     msi
                            Microsoft Visual Studio Too... 14.0.23829                                        Programs
                            Microsoft Visual Studio Too... 14.0.23107.20                                     msi
                            vs_clickoncebootstrappermsi    15.0.27005                                        msi
                            Visual C++ MSBuild Base Pac... 14.0.25420                                        msi
                            SDK ARM Redistributables       10.1.17763.132                                    msi
                            WinRT Intellisense UAP - Ot... 10.1.17763.132                                    msi
                            SQL Server Management Studi... 14.0.17289.0                                      msi
                            Надстройка Microsoft Report... 11.1.3411.3                                       msi
                            Visual C++ Library PGO Head... 14.0.24210                                        msi
                            Windows SDK Desktop Tools a... 10.1.17763.132                                    msi
                            Microsoft Visual C++ 2013 x... 12.0.40649                                        msi
                            Microsoft Silverlight 5 SDK    5.0.61118.0                                       msi
                            Microsoft System CLR Types ... 14.0.1000.169                                     msi
                            Microsoft Azure Mobile Serv... 1.4.30611.1601                                    msi
                            Visual Studio 2013 的 Micros... 11.1.3411.3                                       msi
                            Visual C++ IDE Professional... 14.0.25420                                        msi
                            Java 8 Update 111              8.0.1110.14      C:\Program Files (x86)\Java\j... msi
                            Java 8 Update 111 (64-bit)     8.0.1110.14      C:\Program Files\Java\jre1.8.... msi
                            Windows Live UX Platform       16.4.3505.912                                     msi
                            Visual C++ Library CRT ARM ... 14.0.24210                                        msi
                            Microsoft Visual Studio 201... 14.0.25420                                        msi
                            Java SE Development Kit 8 U... 8.0.1110.14      C:\Program Files\Java\jdk1.8.... msi
                            Microsoft ODBC Driver 13 fo... 14.0.1000.169                                     msi
                            Complemento Microsoft Repor... 11.1.3411.3                                       msi
                            Windows Live PIMT Platform     16.4.3505.912                                     msi
                            LocalESPC                      8.59.29989                                        msi
                            SQL Server Management Studio   14.0.17289.0                                      msi
                            Microsoft Advertising SDK f... 8.1.40427.0                                       msi
                            VS Script Debugging Common     16.0.95.0                                         msi
                            Windows Phone SDK 8.0 Assem... 15.0.28302                                        msi
                            Universal CRT Redistributable  10.1.17763.132                                    msi
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            Update for Windows 10 for x... 2.57.0.0                                          msi
                            Microsoft Portable Library ... 12.0.30501.0                                      msi
                            Active Directory Authentica... 14.0.1000.169                                     msi
                            Windows SDK Facade Windows ... 10.1.17763.132                                    msi
                            vs_clickoncesigntoolmsi        15.0.27005                                        msi
                            Windows SDK for Windows Sto... 10.1.14393.33                                     msi
                            Microsoft Visual C++ 2012 x... 11.0.60610                                        msi
                            QuickTime 7                    7.79.80.95       C:\Program Files (x86)\QuickT... msi
                            Windows Phone 8.0 Managed S... 11.0.50727                                        msi
                            Microsoft Visual Studio 201... 12.0.30501                                        msi
                            Microsoft Visual Studio 201... 14.0.23107                                        msi
                            Intel(R) PRO/Wireless Driver   16.6.2000.671    C:\Program Files\Intel           msi
                            Microsoft .NET Core Host FX... 16.88.27019                                       msi
                            Microsoft Visual Studio 201... 14.0.25431                                        msi
                            vs_clickoncebootstrappermsires 15.0.27005                                        msi
                            Windows Desktop Extension S... 10.1.17763.132                                    msi
                            Windows SDK Desktop Libs arm64 10.1.17763.132                                    msi
                            Microsoft Visual C++ 2012 x... 11.0.60610                                        msi
                            Visual C++ IDE Desktop Plus... 14.0.23107                                        msi
                            Visual C++ MSBuild X86 Package 14.0.25420                                        msi
                            Microsoft .NET Native SDK T... 1.0.24208                                         msi
                            IDE Tools for Windows 10 - ENU 14.0.25527                                        msi
                            WinRT Intellisense Desktop ... 10.1.17763.132                                    msi
                            Microsoft Visual Studio Too... 14.0.23107.20                                     Programs
                            Microsoft Visual Studio Too... 14.0.23107.20                                     msi
                            Microsoft Visual C++ 2013 R... 12.0.21005.1                                      Programs
                            Update for  (KB2504637)        1                                                 Programs
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            Microsoft Analysis Services... 15.0.800.90                                       msi
                            SQL Server 2017 Connection ... 14.0.1000.169                                     msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Windows Team Extension SDK     10.1.17763.132                                    msi
                            Blend for Visual Studio SDK... 3.0.30924.0      C:\Program Files (x86)\Micros... msi
                            HP LaserJet MFP M227-M231 B... 44.1.2550.17198                                   msi
                            SQL Server 2017 SQL Diagnos... 14.0.1000.169                                     msi
                            Build Tools - x86              12.0.30501                                        msi
                            Memory Profiler                12.0.30501                                        msi
                            LM227                          0.0.5            C:\Program Files (x86)\HP\HP ... msi
                            PowerDVD                       12.0             C:\Program Files (x86)\CyberL... msi
                            Microsoft Visual Studio Con... 14.0.25420                                        msi
                            Microsoft Visual Studio Com... 14.0.23107                                        msi
                            Microsoft .NET Framework 4.... 4.5.21005                                         msi
                            Visual Studio 2012 Verifica... 12.0.30501                                        msi
                            Microsoft Visual Studio 201... 14.0.23107.10                                     Programs
                            Microsoft Visual Studio 201... 14.0.23107                                        msi
                            WinRT Intellisense UAP - en-us 10.1.17763.132                                    msi
                            Microsoft Visual Studio 201... 14.0.23107                                        msi
                            Intel(R) Processor Graphics    20.19.15.4531                                     Programs
                            Visual C++ Library ATL Head... 14.0.23026                                        msi
                             Tools for .Net 3.5            3.11.50727                                        msi
                            Windows App Certification K... 10.1.17763.132                                    msi
                            Realtek High Definition Aud... 6.0.1.7544                                        Programs
                            Microsoft NuGet - Visual St... 3.4.4.1321                                        msi
                            HP SharePoint Plugin           43.0.0.0                                          msi
                            Microsoft Visual C++ 2008 R... 9.0.30729.6161                                    msi
                            Windows Software Developmen... 8.100.25984                                       msi
                            Adobe Refresh Manager          1.8.0            C:\Program Files (x86)\Common... msi
                            Adobe Acrobat Reader DC        19.10.20099      C:\Program Files (x86)\Adobe\... msi
                            Windows Phone 8.0 Emulation... 11.0.60610       C:\Program Files (x86)\Micros... msi
                            Microsoft Visual C++ 2017 X... 14.16.27024                                       msi
                            Blend for Visual Studio 2013   12.0.41002.1     C:\Program Files (x86)\Micros... msi
                            Microsoft Visual Studio Tea... 15.129.28621                                      msi
                            Windows Phone 8.1 SDK - ARM    8.1.12358                                         msi
                            Microsoft SQL Server 2014 M... 12.0.2000.8                                       msi
                            Visual C++ IDE Common Package  14.0.25420                                        msi
                            Windows Software Developmen... 10.1.14393.33                                     Programs
                            Product Improvement Study f... 44.1.2550.17198                                   msi
                            Microsoft ASP.NET Core 2.1.... 2.1.9.0                                           msi
                            Microsoft Visual C++ 2008 R... 9.0.30729.6161                                    msi
                            Microsoft Visual Studio 201... 12.0.30501                                        msi
                            Visual Studio Extensions fo... 2.1.30501.0                                       msi
                            Windows Mobile Connectivity... 10.1.14393.33    C:\Program Files (x86)\Common... msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Windows SDK ARM Desktop Tools  10.1.17763.132                                    msi
                            Windows Simulator - ENU        15.0.27729                                        msi
                            Microsoft .NET Framework 4.... 4.6.81                                            msi
                            Windows Mobile Extension SD... 10.1.14393.33                                     msi
                            IntelliTraceProfilerProxy      15.0.17289.1                                      msi
                            Microsoft Visual Studio 201... 14.0.23107                                        msi
                            Microsoft Visual Studio Too... 14.0.23829                                        msi
                            SQL Server 2017 Management ... 14.0.3026.27                                      msi
                            Visual C++ IDE Optional Des... 14.0.23107                                        msi
                            Microsoft Visual C++ 2013 C... 12.0.21005                                        msi
                            Microsoft Report Viewer Add... 11.1.3411.3                                       msi
                            Visual C++ IDE Debugger Res... 14.0.25420                                        msi
                            Microsoft Visual C++ 2017 R... 14.16.27029.1                                     Programs
                            Microsoft Agents for Visual... 14.0.23102                                        msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Microsoft Visual Studio Tea... 14.98.25331                                       msi
                            Visual C++ Library CRT X86 ... 14.0.24210                                        msi
                            Microsoft Visual Studio Exp... 12.0.21005                                        msi
                            Microsoft Expression Blend ... 2.0.20525.0      C:\Program Files (x86)\Micros... msi
                            Microsoft .NET Framework 4.... 4.6.81                                            msi
                            Python 3.4.3                   3.4.16490                                         msi
                            Windows Phone 8.0 Tools for... 12.0.30501                                        msi
                            Microsoft NetStandard SDK      15.0.51105                                        msi
                            D3DX10                         15.4.2368.902                                     msi
                            SDK ARM Additions              10.1.17763.132                                    msi
                            TypeScript Tools for Micros... 1.8.36.0                                          msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Build Tools Language Resour... 12.0.30501                                        msi
                            Compon. agg. Microsoft Repo... 11.1.3411.3                                       msi
                            Windows SDK Desktop Libs x86   10.1.17763.132                                    msi
                            I.R.I.S OCR                    15.2.10.1114                                      msi
                            Microsoft Visual C++ 2013 x... 12.0.21005                                        msi
                            Microsoft System CLR Types ... 15.0.600.33                                       msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Visual C++ Library CRT X64 ... 14.0.24210                                        msi
                            Windows Team Extension SDK ... 10.1.17763.132                                    msi
                            iCloud                         7.1.0.34         C:\Program Files (x86)\Common... msi
                            Windows IP Over USB            10.1.14393.33                                     msi
                            用于 Visual Studio 2013 的 Mic... 11.1.3411.3                                       msi

                            Visual C++ Professional Ite... 14.0.23107                                        msi
                            iTunes                         12.7.1.14        C:\Program Files\iTunes\         msi
                            Microsoft Portable Library ... 12.0.30501.0                                      msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Microsoft Blend for Visual ... 14.0.25420                                        msi
                            HP FTP Plugin                  43.0.0.0                                          msi
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            IDE Tools for Windows 10       14.0.25527                                        msi
                            icecap_collection_neutral      15.8.27906                                        msi
                            Microsoft Visual C++ 2012 x... 11.0.60610                                        msi
                            Visual C++ MSBuild Base Res... 14.0.25420                                        msi
                            Visual C++ Library ATL ARM ... 14.0.23026                                        msi
                            Build Tools - amd64            12.0.30501                                        msi
                            Microsoft Visual C++ 2012 C... 11.0.60610                                        msi
                            Microsoft SQL Server Data-T... 14.0.4127.1                                       msi
                            Windows Espc Resource Package  14.0.23107                                        msi
                            Microsoft Visual C++ 2012 C... 11.0.60610                                        msi
                            Visual C++ Library PGO ARM ... 14.0.24210                                        msi
                            Windows SDK Desktop Libs arm   10.1.17763.132                                    msi
                            Microsoft .NET Framework 4 ... 4.0.30319                                         msi
                            Microsoft Team Foundation S... 12.0.30501                                        msi
                            VoiceOver Kit                  1.43.128.3       C:\Program Files\iTunes\         msi
                            Windows Azure Mobile Servic... 1.1.20407.1601                                    msi
                            Windows Mobile Extension SD... 10.1.17763.132                                    msi
                            Bonjour                        3.1.0.1          C:\Program Files (x86)\Bonjour\  msi
                            Windows SDK Desktop Tools      10.1.14393.33                                     msi
                            Microsoft Visual Studio 201... 14.0.25527                                        msi
                            MSVCRT110                      16.4.1108.727                                     msi
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            TypeScript SDK                 3.1.2.0                                           msi
                            Windows Phone 8.1 SDK - Images 8.1.12358                                         msi
                            Windows Azure Mobile Servic... 1.0.20401.0                                       msi
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            Windows SDK for Windows Sto... 10.1.17763.132                                    msi
                            WinRT Intellisense IoT - Ot... 10.1.17763.132                                    msi
                            vs_communitymsi                15.9.28307                                        msi
                            Microsoft.VisualStudio.Offi... 1.6.2.0                                           msi
                            Multi-Device Hybrid Apps us... 14.0.23107                                        msi
                            Movie Maker                    16.4.3505.912                                     msi
                            Google Update Helper           1.3.34.7                                          msi
                            Windows SDK Desktop Headers... 10.1.17763.132                                    msi
                            Microsoft Visual Studio 201... 14.0.23107                                        msi
                            Microsoft Portable Library ... 12.0.30501.0                                      msi
                            Microsoft TestPlatform SDK ... 15.9.0.2096950                                    msi
                            Microsoft .NET Framework 4.... 4.5.51651                                         msi
                            Windows Phone 8.1 Tools for... 14.0.25527                                        msi
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            Microsoft System CLR Types ... 12.0.2402.29                                      msi
                            Microsoft Visual Studio 201... 14.0.25431                                        msi
                            Dotfuscator and Analytics C... 5.22.0.3788                                       msi
                            Microsoft Visual Studio 201... 14.0.23107                                        msi
                            Microsoft Visual Studio 201... 12.0.21005                                        msi
                            Visual C++ MSBuild ARM Package 14.0.25420                                        msi
                            Microsoft Portable Library ... 12.0.30501.0                                      msi
                            Microsoft Portable Library ... 12.0.30501.0                                      msi
                            Microsoft Visual C++ 2012 3... 11.0.60610                                        msi
                            VS Immersive Activate Helper   16.0.95.0                                         msi
                            Windows SDK Desktop Tools x64  10.1.17763.132                                    msi
                            ClickOnce Bootstrapper Pack... 4.7.3083                                          msi
                            Microsoft SQL Server 2017 P... 14.0.1000.169                                     msi
                            Microsoft UniversalWindowsP... 15.9.9                                            msi
                            Microsoft Visual Studio 201... 12.0.30501                                        msi
                            Windows Phone 8.0 Tools for... 12.0.30501                                        msi
                            Microsoft Visual Studio Ser... 1.0.25420.1                                       msi
                            Microsoft .NET Framework 4.... 4.6.1055                                          msi
                            Windows Phone Tools Finalizer  12.0.30501                                        msi
                            Windows Phone 8.1 Tools for... 12.0.30501                                        msi
                            Microsoft .NET Framework 4.... 4.6.127                                           msi
                            Microsoft Visual C++ 2013 3... 12.0.21005                                        msi
                            Microsoft Visual Studio Set... 1.18.21.37008                                     msi
                            Dell Customer Connect          1.4.15.0         C:\Program Files (x86)\Dell C... msi
                            Apple Application Support (... 6.1              C:\Program Files (x86)\Common... msi
                            Microsoft Visual Studio 201... 14.0.25527                                        msi
                            Windows SDK Modern Versione... 10.1.17763.132                                    msi
                            Team Explorer for Microsoft... 14.102.25619                                      msi
                            icecap_collection_x64          15.8.27906                                        msi
                            Microsoft Azure Storage Con... 14.0.25420                                        msi
                            Windows SDK for Windows Sto... 10.1.17763.132                                    msi
                            Apple Software Update          2.4.8.1          C:\Program Files (x86)\Apple ... msi
                            Windows 8 Development Essen... 12.0.21005                                        msi
                            Microsoft Visual C++ 2012 C... 11.0.51106                                        msi
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            Microsoft Visual C++ 2017 X... 14.16.27024                                       msi
                            Windows SDK Desktop Headers... 10.1.17763.132                                    msi
                            Microsoft Azure Mobile Serv... 2.0.20908.0                                       msi
                            Microsoft Visual C++ 2017 X... 14.16.27024                                       msi
                            Windows SDK Desktop Headers... 10.1.17763.132                                    msi
                            Windows Software Developmen... 8.100.26936                                       msi
                            Visual C++ Library CRT X86 ... 14.0.24210                                        msi
                            MSVCRT                         15.4.2862.708                                     msi
                            Visual C++ IDE Professional... 14.0.25420                                        msi
                            Microsoft Visual Studio 201... 14.0.25431                                        msi
                            Visual C++ Professional Win... 14.0.25527                                        msi
                            Microsoft SQL Server 2014 T... 12.0.2000.8                                       msi
                            Behaviors SDK (Windows Phon... 12.0.50429.0                                      msi
                            Visual C++ Library CRT ARM6... 14.16.27027                                       msi
                            Windows Live Communications... 16.4.3505.912                                     msi
                            Visual C++ Library CRT ARM ... 14.0.24210                                        msi
                            icecap_collectionresourcesx64  15.8.27924                                        msi
                            Microsoft Visual Studio 201... 14.0.25431                                        msi
                            Microsoft Visual Studio 201... 14.0.23107                                        msi
                            SQL Server 2017 Common Files   14.0.1000.169                                     msi
                            Visual C++ Library ATL X86 ... 14.0.23026                                        msi
                            Microsoft Visual Studio 201... 12.0.21005                                        msi
                            Microsoft Portable Library ... 15.0.26621.2                                      msi
                            Visual C++ IDE Windows Expr... 14.0.23107                                        msi
                            Windows SDK for Windows Sto... 10.1.17763.132                                    msi
                            Microsoft Visual C++ 2012 C... 11.0.60610                                        msi
                            Visual C++ IDE Professional... 14.0.25420                                        msi
                            Microsoft Visual Studio Too... 14.0.23107.20                                     msi
                            Microsoft Visual Studio 201... 12.0.21005                                        msi
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            Visual C++ Library CRT ARM ... 14.0.24210                                        msi
                            Microsoft Portable Library ... 12.0.30501.0                                      msi
                            Windows Phone 8.1 Tools for... 14.0.25527                                        msi
                            Windows SDK for Windows Sto... 10.1.14393.33                                     msi
                            Microsoft .NET Native SDK      15.0.24211.6                                      msi
                            Dell Update                    1.7.1015.0       C:\Program Files (x86)\Dell U... msi
                            Intel® PROSet/Wireless WiFi... 16.6.0.280       C:\Program Files\Intel           msi
                            Microsoft Portable Library ... 12.0.30501.0                                      msi
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            Visual C++ IDE Base Resourc... 14.0.25420                                        msi
                            Microsoft Visual C++ 2012 C... 11.0.60610                                        msi
                            Microsoft Portable Library ... 12.0.30501.0                                      msi
                            Microsoft Visual C++ 2012 x... 11.0.60610                                        msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Microsoft Portable Library ... 12.0.30501.0                                      msi
                            Microsoft Advertising SDK f... 6.2.960.0                                         msi
                            Microsoft Visual Studio 201... 14.0.25420                                        msi
                            HP OneDrive Plugin             36.0.0.0                                          msi
                            Microsoft Visual C++ 2017 X... 14.16.27024                                       msi
                            vs_devenvmsi                   15.0.26621                                        msi
                            Microsoft Visual Studio 201... 12.0.21005                                        msi
                            Visual Studio 2015 Prerequi... 14.0.23107                                        msi
                            Windows App Certification K... 10.1.17763.132                                    msi
                            Microsoft Visual C++ 2005 R... 8.0.61001                                         msi
                            Visual C++ Professional Ite... 14.0.23107                                        msi
                            Visual C++ Library CRT Redi... 14.0.24215                                        msi
                            Amazon 1Button App             1.0.0.4                                           msi
                            Blend for Visual Studio 201... 12.0.41002.1     C:\Program Files (x86)\Micros... msi
                            Visual C++ CRT Headers Package 14.0.24210                                        msi
                            HP Dropbox Plugin              36.0.102.68541                                    msi
                            Microsoft Build Tools Langu... 14.0.25420                                        msi
                            Microsoft Web Deploy 3.6       3.1238.1962                                       msi
                            64 Bit HP CIO Components In... 21.2.1                                            msi
                            Windows Espc Package           14.0.23107                                        msi
                            windows_toolscorepkg           15.9.28219                                        msi
                            LabelPrint                     2.50.0           C:\Program Files (x86)\CyberL... msi
                            Visual C++ Library ATL Sour... 14.0.23026                                        msi
                            Build Tools for Windows 10 ... 14.0.25527                                        msi
                            Microsoft Azure Shared Comp... 1.8.40521.1                                       msi
                            Windows Phone 8.1 SDK - x64    8.1.12358                                         msi
                            Microsoft Portable Library ... 15.0.26621.2                                      msi
                            Microsoft Visual Studio 201... 14.0.25420                                        msi
                            Application Verifier x64 Ex... 10.1.17763.132                                    msi
                            Microsoft Visual C++ 2008 R... 9.0.30729.4148                                    msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Microsoft Visual C++ 2008 R... 9.0.30729                                         msi
                            Windows Mobile Extension SD... 10.1.14393.33                                     msi
                            vs_minshellinteropmsi          15.8.27825                                        msi
                            Windows Live SOXE              16.4.3505.912                                     msi
                            vs_tipsmsi                     15.0.27005                                        msi
                            Microsoft .NET Framework 4.... 4.5.51641                                         msi
                            Microsoft Visual C++ 2013 x... 12.0.40649                                        msi
                            Microsoft Advertising Servi... 12.0.40402.0                                      msi
                            Microsoft .NET Core Host - ... 16.88.27019                                       msi
                            Microsoft Silverlight          5.1.50918.0      c:\Program Files\Microsoft Si... msi
                            Microsoft Build Tools 14.0 ... 14.0.25420                                        msi
                            PocketCloud                    2.7.14           C:\Program Files (x86)\Wyse\P... msi
                            Power2Go                       8.0              C:\Program Files (x86)\CyberL... msi
                            vs_minshellmsires              15.0.26621                                        msi
                            Windows SDK Redistributables   10.1.17763.132                                    msi
                            Microsoft Visual C++ 2012 x... 11.0.60610                                        msi
                            Windows Phone 8.0 Managed S... 11.0.50727                                        msi
                            Microsoft Portable Library ... 12.0.30501.0                                      msi
                            Microsoft Visual Studio Too... 14.0.23829                                        msi
                            WCF Data Services 5.6.4 Run... 5.6.62175.4                                       msi
                            Dell Digital Delivery          2.8.1000.0       c:\Program Files (x86)\Dell D... msi
                            Complemento do Microsoft Re... 11.1.3411.3                                       msi
                            Windows SDK                    10.1.17763.132                                    msi
                            Windows Live SOXE Definitions  16.4.3505.912                                     msi
                            vs_SQLClickOnceBootstrappermsi 15.0.27005                                        msi
                            PreEmptive Analytics Visual... 1.2.5134.1                                        msi
                            vs_filehandler_amd64           15.9.28302                                        msi
                            Team Explorer for Microsoft... 12.0.21005                                        msi
                            Microsoft Visual C++ 2013 C... 12.0.21005                                        msi
                            Application Insights Tools ... 7.0.20622.1                                       msi
                            Microsoft Visual C++ 2015 x... 14.0.24215                                        msi
                            Microsoft C++ REST SDK for ... 1.0                                               msi
                            vs_filehandler_x86             15.9.28302                                        msi
                            Microsoft Visual Studio Too... 14.0.23829                                        msi
                            Visual C++ Compiler/Tools P... 14.0.24210                                        msi
                            Visual C++ Professional Tem... 14.0.25420                                        msi
                            Windows Live Installer         16.4.3505.912                                     msi
                            Windows Software Developmen... 8.100.25984                                       msi
                            Windows Phone 8.1 SDK - Des... 8.1.12358        C:\Program Files (x86)\Micros... msi
                            Quickset64                     10.15.21         c:\Program Files\Dell\QuickSet\  msi
                            Visual C++ Library CRT X64 ... 14.0.24210                                        msi
                            WCF Data Services Tools for... 5.6.62175.4                                       msi
                            Microsoft Visual Studio 201... 14.102.25619                                      msi
                            Kits Configuration Installer   10.1.17763.132                                    msi
                            Visual C++ IDE Debugger Pac... 14.0.25431                                        msi
                            Microsoft Visual Studio Tea... 14.98.25331                                       msi
                            Microsoft NuGet - Visual St... 2.8.50313.46                                      msi
                            Universal CRT Tools x64        10.1.17763.132                                    msi
                            Microsoft SQL Server 2017 T... 14.0.17289.0                                      msi
                            Microsoft Report Viewer Add... 11.1.3411.3                                       msi
                            Windows SDK for Windows Sto... 10.1.17763.132                                    msi
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            Microsoft Visual Studio 201... 14.0.23107                                        msi
                            Microsoft .NET Framework 4.... 4.6.1055                                          msi
                            CodedUITestUAP                 14.0.25527                                        msi
                            Windows SDK Desktop Libs x64   10.1.17763.132                                    msi
                            vs_BlendMsi                    15.0.27205                                        msi
                            Microsoft Visual Studio Tea... 15.129.28621                                      msi
                            MSVCRT110_amd64                16.4.1109.912                                     msi
                            Visual Studio Graphics Anal... 14.0.25420                                        msi
                            Windows Phone 8.1 Tools for... 12.0.30501                                        msi
                            Windows Phone SDK 8.0 Assem... 14.0.25527                                        msi
                            Microsoft SQL Server 2014 M... 12.0.2000.8                                       msi
                            Java Auto Updater              2.8.111.14                                        msi
                            Windows Phone 8.1 Tools for... 12.0.30501                                        msi
                            Visual C++ IDE Base Package    14.0.25431                                        msi
                            Microsoft Visual Studio 201... 14.0.25123                                        msi
                            Windows SDK Signing Tools      10.1.17763.132                                    msi
                            vs_FileTracker_Singleton       15.9.28128                                        msi
                            Microsoft Visual Studio Too... 14.0.23829                                        msi
                            Visual C++ Library CRT Appx... 14.16.27023                                       msi
                            Microsoft Visual Studio 201... 12.0.21005                                        msi
                            Microsoft Azure Mobile Serv... 14.0.25420                                        msi
                            icecap_collectionresources     15.8.27924                                        msi
                            Microsoft ASP.NET Core 2.1.... 2.1.13425.0                                       msi
                            Universal CRT Tools x86        10.1.17763.132                                    msi
                            Visual C++ Compiler/Tools X... 14.0.24210                                        msi
                            Microsoft Agents for Visual... 14.0.23102                                        msi
                            Visual C++ Library CRT Sour... 14.0.24210                                        msi
                            Windows SDK Desktop Headers... 10.1.14393.33                                     msi
                            Microsoft SQL Server 2012 N... 11.3.6540.0                                       msi
                            Windows Mobile Extension SDK   10.1.17763.132                                    msi
                            IEBrowserAssistant             1.0.0                                             msi
                            Browser Assistant              1.28.7010.31104  C:\Users\Atul\AppData\Roaming\   msi
                            2019-04 Cumulative Update f...                                                   msu
                            2019-04 Security Update for...                                                   msu
                            Windows Malicious Software ...                                                   msu
                            2019-04 Update for Windows ...                                                   msu
                            2019-03 Update for Windows ...                                                   msu
                            2019-03 Cumulative Update f...                                                   msu
                            2019-03 Security Update for...                                                   msu
                            Windows Malicious Software ...                                                   msu
                            2019-02 Update for Windows ...                                                   msu
                            2019-02 Cumulative Update f...                                                   msu
                            2019-02 Security Update for...                                                   msu
                            Windows Malicious Software ...                                                   msu
                            2019-01 Cumulative Update f...                                                   msu
                            2019-01 Update for Windows ...                                                   msu
                            2018-11 Update for Windows ...                                                   msu
                            Update for Microsoft Silver...                                                   msu
                            2018-10 Update for Windows ...                                                   msu
                            Windows Malicious Software ...                                                   msu
                            2019-01 Security Update for...                                                   msu
                            2019-01 Cumulative Update f...                                                   msu
                            2018-12 Cumulative Update f...                                                   msu
                            2018-12 Cumulative Update f...                                                   msu
                            Windows Malicious Software ...                                                   msu
                            Synaptics - Mouse - 9/19/20...                                                   msu
                            2018-12 Update for Windows ...                                                   msu
                            2018-12 Security Update for...                                                   msu
                            2018-11 Security Update for...                                                   msu
                            2018-11 Security Update for...                                                   msu
                            Windows Malicious Software ...                                                   msu
                            2018-11 Cumulative Update f...                                                   msu
                            Update for Adobe Flash Play...                                                   msu
                            Windows Malicious Software ...                                                   msu
                            2018-10 Cumulative Update f...                                                   msu
                            9N5TDP8VCMHS-Microsoft.WebM...                                                   msu
                            2018-09 Update for Windows ...                                                   msu
                            2018-09 Cumulative Update f...                                                   msu
                            Windows Malicious Software ...                                                   msu
                            2018-09 Update for Windows ...                                                   msu
                            2018-09 Security Update for...                                                   msu
                            Synaptics - Mouse - 12/16/2...                                                   msu
                            Windows Malicious Software ...                                                   msu
                            2018-08 Security Update for...                                                   msu
                            2018-08 Cumulative Update f...                                                   msu
                            2018-07 Security Update for...                                                   msu
                            Windows Malicious Software ...                                                   msu
                            2018-07 Cumulative Update f...                                                   msu
                            Windows Malicious Software ...                                                   msu
                            2018-06 Cumulative Update f...                                                   msu
                            2018-06 Security Update for...                                                   msu
                            2018-05 Security Update for...                                                   msu
                            Feature update to Windows 1...                                                   msu
"""

# AUTHOR - this is lots of output. Wondering what it means?
    
    PS C:\WINDOWS\system32> Get-Package

    Name                           Version      Status      ProviderName        Source 
    ----                           -------      ------      ------------        ------------
    winrar                         5.11         Installed   Chocolatey          C:\Chocolatey\lib\winrar...
    WinRAR 5.11 (64-bit)           5.11.0       Installed   ARP                 

# 1) Source parameter means to tell us that WinRAR was installed in the C:\Chocolatey directory, which
#    itself is a PROBLEM b/c many IT shops rely on Windows protection of the C:\Program Files directory and
#    User Account Control (UAC).
# 2) notice that WinRAR is associated with TWO package providers Chocolatey and ARP package providers.
#    This only means that we can see WinRAR in the Programs and Features Control Panel.
# All of this lets us observe a general theme about OneGet, that the this technology seems best-suited toward
# two class of PS users: the tinkerer and the Windows systems admins
# Tinker = people who experiment and troubleshoot Windows, and like the idea of installying and managing software in an automated way.
# Windows Systems Admins = there are admins who can not install System Center Configuration Manager for one reason or another, and so
# they like the idea of using OneGet to automate software installation when they build user operating system images.
# AUTHOR - thinks typical user will NOT enjoy OneGet

# See Start menu, right click to show Select File Location and look for WinRAR.exe

----------------Installing an Application fom a Subdirectory

# pg 342
# now lets try instally PuTTY which is free Telnet/Secure Shell client
Get-Package -Name putty | Install-Package 

                        -----------
                        # ATUL doesnt work so lets try this
                        # pg 338
                        PS C> Find-Package -Name winrar         # error
                        PS> Get-Command -Name Save              # error
                        PS> Find-Command -Name "Save"           # works but only 1 hit
                        PS> Find-Command -ModuleName "Save"     # works, 100 hits. Lots to choose from.



                        PS C:\WINDOWS\system32> Find-Command -ModuleName "*putty*"

                        Name                                Version    ModuleName                          Repository
                        ----                                -------    ----------                          ----------
                        Get-Putty                           1.0        Putty                               PSGallery
                        Invoke-PSPuTTYSession               0.1.1      PSPuTTY                             PSGallery
                        New-PSPuTTYSession                  0.1.1      PSPuTTY                             PSGallery
                        Get-PSPuTTYSession                  0.1.1      PSPuTTY                             PSGallery
                        Get-PSPuTTYTheme                    0.1.1      PSPuTTY                             PSGallery
                        Merge-PSPuTTYTheme                  0.1.1      PSPuTTY                             PSGallery
                        Remove-PSPuTTYSession               0.1.1      PSPuTTY                             PSGallery
                        Download-PuTTY                      1.0.0.4    CPolydorou.PuTTY                    PSGallery
                        Download-PuttyGen                   1.0.0.4    CPolydorou.PuTTY                    PSGallery
                        Get-PuTTYSession                    1.0.0.4    CPolydorou.PuTTY                    PSGallery
                        Export-PuTTYSession                 1.0.0.4    CPolydorou.PuTTY                    PSGallery
                        Import-PuTTYSession                 1.0.0.4    CPolydorou.PuTTY                    PSGallery
                        Remove-PuTTYSession                 1.0.0.4    CPolydorou.PuTTY                    PSGallery


                        -----------

# back to book (repeat code from above)
# now lets try instally PuTTY which is free Telnet/Secure Shell client
Get-Package -Name putty | Install-Package 

# note that the PuTTY Chocolatey package stores the executables in a subdirectory of C:\Chocolaty
# This is good.
# But notice that with Chocolatey, we have to accept a certain level of inconsistency
# So now notice, that if your trying this at home, WinRAR appears in the Programs and Features Control Panel item but PuTTY does NOT.
# The same for the presence of adsence of Start menu/Start screen icons. So once again, the mechanics of each package at
# Chocolatey are left up to the packager.

# Note - beware that you may need to add C:\Chocolatey to your system's search path to launch those installed software
# applications from the command line.


----------------Try It Yourself - Installing Software with OneGet 

# here we try to find, install, and run packages from the different default package sources.
# If at all possible, perform these experiments on a test system.
# AUTHOR - in his test lab, he has a Windows 8.1 virtual machine for which he created a pre-OneGet snapshot.
# So whenever he needs to reset his environment, he simply restores the snapshot. Very easy.

# Steps are:
# 1) The vast majority of the packages in the PSModule provider repository are developer or PowerShell DSC related.
#    Nevertheless, why not browse the repo's feed?
Find-Package -ProviderName psmodule | Out-GridView

# 2) Now lets to do the same thing but this time focus on all packages:
Find-Package -ProviderName chocolatey | Out-GridView
#    remember that you can do an Out-File to export the package feed to a text file, or Export-CSV to get the data
#    in an Excel friendly CSV format.

# 3) Just for grins, lets see how many packages are available via Chocolatey
Find-Package -ProviderName chocolatey | Measure-Object

                        PS C:\WINDOWS\system32> Find-Package -ProviderName chocolatey | Measure-Object

                        The provider 'chocolatey v2.8.5.130' is not installed.
                        chocolatey may be manually downloaded from https://onegetcdn.azureedge.net/providers/ChocolateyPrototype-2.8.5.130.exe and installed.
                        Would you like PackageManagement to automatically download and install 'chocolatey' now?
                        [Y] Yes  [N] No  [S] Suspend  [?] Help (default is "Y"): Y


                        Count    : 6595
                        Average  :
                        Sum      :
                        Maximum  :
                        Minimum  :
                        Property :

# Reader should browse the Chocolatey package gallery at 
  http://chocolatey.org/packages


# NOTE ATUL - its possible that Chocolatey did NOT install correctly?
# Prompt shows
chocolatey may be manually downloaded from https://onegetcdn.azureedge.net/providers/ChocolateyPrototype-2.8.5.130.exe 
# and installed.


# 4) you should see that the Chocolatey engine itself is the most popular. B/c OneGet in the WMF 5 Preview is so wonky
#    and unpredictable, lets go ahead and install the Chocolatey package manager ITSELF so you can kick the tires and see
#    how it works when Chocolatey is used OUTSIDE of OneGet.

# 5) Switch back to your elevatated PS console session and leverage the pipeline to find and install the Chocolatey 
#    package manager:
Get-Package -Name Chocolatey | Install-Package -Verbose 

# 6) Good. Now lets use the choco client to install the cook Sysinternals tools:

# you should find that the choco client behaves very similarly to what we have been doing with OneGet.
# What's better is that with the choco client, is that choco gives you much more valuable metadata as it installs.

# For instance, you should have noticed in the choco output that the Sysinternals command-line tools were installed
# to C:\Tools\sysinternals
# The package/choco should have also told you that you might need to add the path to your PATH environment variable.
# This is very convinient and helpful.

# 7) Lets verify that the Sysinternals freeware tools suite has in fact been installed:
PS C> cd C:\tools\sysinternals
PS C:\tools\sysinternals> dir *.exe

# many subfiles listed.
# AUTHOR - sweet! if you have never used the Sysinternals tools yet, your in for a treat. 
# His favorites are:
# Bginfo: displays computer metadata as desktop wallpaper
# Autoruns: shows you all the autostart processes (great for identifying malware)
# Processs Explorer: a souped up version of Windows Task Manager
# Contig: a command line defrag tool that great for compacting Microsoft Outlook email archives

--------Hosting a Private OneGet Repository

# recall that OneGet by default does not trust the Chocolatey repository. This means that from a practical
# perspective, you receive an extra confirmation prompt when you attempt to install a package from Chocolatey.

# Lets use Register-PackageSource to trust Chocolatey
Register-PackageSource -Name chocolatey -Location http://chocolatey.org/api/v2 -ProviderName chocolatey -Trusted -Verbose 

# NOW you should see that Chocolatey is trusted, validated, and registered on your local system:

Name                        ProviderName        IsTrusted   IsRegistered        IsValidated
-----------                 -----------         ----------- -----------         -----------
chocolatey                  Chocolatey          True        True                True 
PSGallery                   PSModule            False       True                False 
MSPSGallery                 PSModule            True        True                False 


----------------Upgrading Installed Packages 

# Do you remember the most popular PS verb? Get
# Lets use Get-Package to retrieve a list of installed pacakges:

PS> Get-Package | Format-Table -AutoSize
# lots of results - see PowerShellNotes3.txt

# Note that output is not formatted well so you cant see the all the metadata
# so try this
PS> Get-Package   # no AutoSize 
# now you can see that ProviderName property may in fact show multiple versions of the same file. This could be a OneGet error
# but there is no way to know. So move onto next topic.

# NOTE AUTHOR - as this book, OneGet module does NOT include an Upgrade cmdlet, so your best option is to periodically
# query the lastest versions of your target applications from the repositories and simply run:
Install-Package -Force      # which will overwrite the old version.

# NOTE AUTHOR TIP - some Chocolatey packages are nothing more than batch files that invoke the application's GUI installer.
# so you may be able to upgrade the app from the app's UI. Be mindful that simply downloading and installing an updated program
# version from the vendor itself may or may NOT patch your Chocolatey-based installation b/c (as you have now seen this chapter) that
# Chocolatey packages often install the program files OUTSIDE of the traditional locations (ATUL thus resulting in multiple version
# located in different and often disparate locations!!!).

# The Chocolatey package manager itself can be used in conjunction with the ChocolateyGUI package to make package upgrades
# and uninstallation easier. First install the GUI either by using OneGet or the Chocolatey CLI tool:
Find-Package -name chocolateygui | Install-Package 
Choco install chocolateygui
# Now you can find the ChocolateyGUI icon in the Start menu/Start screen.

----------------Removing Packages 

Uninstall-Package -Name TweekDeck

----------------Hosting a Private OneGet Repository 

# last subject. Perhaps your company is unable to trust public repositories such as Chocolatey.
# or maybe your developers inform you that they can create packages themselves that install software
# according to IT dept rules.

# two ways to deploy a private OneGet
# details are beyond the scope of this book but here are the general directions
------------------------Using a File Share 

# assuming that your colleagues can leverage the NuGet building tools directly to build .nupkg package files, then
# you can simply pop the package files into a network shared folder and run Register-PackageSource to point
# to that repository. Example:
Register-PackageSource -ProviderName chocolatey myrepo -Location \\server\share
# this will allow you to create one or more ad hoc software repositories for internal use

------------------------Using a Third Party Tool

# inedo company (http://inedo.com) offers ProGet 
# offers highly available, scalable private package repository that is accessible to you and your team using a standard web browser.
# Free and intended for small use teams
# ProGet Enterprise is $395 per year for large teams.

# Ninite is also an option  (https://ninite.com)
# free service from which you can automatically install software packages on your system.
# Why is OneGet better? 
# a) Ninite offers a limited single, privately owned repository while PowerShell allows you to aggregate multiple repos, 
# b) Ninite gives you no visibility into package behavior, whereas with OneGet/NuGet you can build and deploy your own
#    software packages from scratch.

--------Summary Q&A Workshop

--------Summary 
# OneGet package has NOT been formally released as of the publication of this book. But this book
# offers good enough grounding in the technology so that you can easily adapt as the Windows PS team
# continues to broaden and deepen OneGet's capabilities.

# next - another big ticket enterprise PS feature = DSC.
# OneGet is the easiest way to download and install DSC resources.

--------Q&A 

# Q) How can I figure out exactly where and how Chocolatey installed a package that I installed by using the Install-Package OneGet command?
#    Vast majority of Chocolatey packages downloaded through OneGet as contaied in one or more subdirectories of C:\Chocolatey.
#    Specifically, you should find
#    ChocolateyInstall.ps1 script file nested beneath C:\Chocolatey\lib for each installed software package.
#    Right click that .ps1 file and open it in a text editor or the PS ISE.
#    Within the script file, you will find the installation instructions as dictated by the person who packaged the app in the first place.
#    Some chocolatiers rely on the application's native GUI routine, whereas others take a truely command line approach.

# Q) Why should I care about CLI software installation?
#    Some GUI installers are better than others. For example, Oracle includes third party software along with its own Java Runtime
#    Environment Installer.
#    When running package software installations on the command line, you can bypass those extra annoyances that ride herd with GUI installers.
#    Also, anything that we can do from the command line can be automated.

# Q) How do I find pacakges with choco?
#    Example we needed the PuTTY SSH client and want to install via choco, so we issue the following command

PSC> choco list putty 
# that it.

# output is
                        """ 
                        jivkok.tools 1.1.0.7
                        kellyelton.denvironment 1.0.0.10
                        kitty.portable 0.63.2.1
                        putty 0.63
                        putty.install 0.63
                        putty.portable 0.63
                        putty-d2ddw 2013.08.07
                        PuttyTray 0.63.021
                        """

# so notice that the choco output is formatted in the way that OneGet does the formatting.
# so here you are seeing package names, corresponding version numbers in two seperate columns
# THIS IS GOOD formatting.

# Now lets imagine that we wanted to install Putty, 7-Zip, and Notepad++ simultaneously.
# PS can do this in two code lines:
$apps = @("putty", "7zip", "notepadplusplus")
$apps | foreach { chocolatey install $_. } 


--------Workshop

# 1) Pick out three useful packages by browsing the Chocolatey repository either online or directly through PowerShell
# 2) Create a PowerShell .ps1 script file that installs the three packages
# 3) Test the PowerShell script by running it on a computer that does NOT contain the packages. Note that
#    you might need to temporarily relax the script execution policy of your computer like this:
Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process 

# 4) Use OneGet to uninstall one of the three apps that you installed.

--------Quiz

# 1) Package repositories that you add to OneGet are trusted by default.
#    False. Trust is a big issue with downloadable software. Although Microsoft trusts Chocolatey fully, that does not 
#    compel you do so as well. You need to manually trust package providers in order for your computer to trust them

# 2) NuGet is a "solution-level" package management tool that is aimed for use by software developers and package creators.
#    NuGet is the system-level package manager that serves as the "engine" of OneGet.
#    OneGet is the PowerShell module that gives us our core package management commands.
#    Chocolatey is both a package manager, package browser, and software repository.

# 3) OneGet can be considered a package provider aggregator.
#    True. OneGet is a platform into which you can plug in package providers and associated software repositories from 
#    multiple sources.


===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 18 Desired State Configuration (DSC) Basics

# Historical Background of DSC
# Basic Tenets of DSC 
# DSC Authoring Environment
# Configuring the DSC Environment
# Writing Your First Configuration Script
# A Word on DSC Push Configuration

# DSC is the marquee feature in PS v4 and later.
# Imagine being able to send configuration instructions to your servers such that, with no tedius mouse
# clicking on your part, the target servers simply "Make It So"

# Video
"""
PS> Get-DscResource

                        PS C:\WINDOWS\system32> Get-DscResource

                        ImplementedAs   Name                      ModuleName                     Version    Properties
                        -------------   ----                      ----------                     -------    ----------
                        Binary          File                                                                {DestinationPath, Attributes, Ch...
                        Binary          SignatureValidation                                                 {SignedItemType, TrustedStorePath}
                        PowerShell      PackageManagement         PackageManagement              1.0.0.1    {Name, AdditionalParameters, Dep...
                        PowerShell      PackageManagementSource   PackageManagement              1.0.0.1    {Name, ProviderName, SourceUri, ...
                        PowerShell      Archive                   PSDesiredStateConfiguration    1.1        {Destination, Path, Checksum, Cr...
                        PowerShell      Environment               PSDesiredStateConfiguration    1.1        {Name, DependsOn, Ensure, Path...}
                        PowerShell      Group                     PSDesiredStateConfiguration    1.1        {GroupName, Credential, DependsO...
                        Composite       GroupSet                  PSDesiredStateConfiguration    1.1        {DependsOn, PsDscRunAsCredential...
                        Binary          Log                       PSDesiredStateConfiguration    1.1        {Message, DependsOn, PsDscRunAsC...
                        PowerShell      Package                   PSDesiredStateConfiguration    1.1        {Name, Path, ProductId, Argument...
                        Composite       ProcessSet                PSDesiredStateConfiguration    1.1        {DependsOn, PsDscRunAsCredential...
                        PowerShell      Registry                  PSDesiredStateConfiguration    1.1        {Key, ValueName, DependsOn, Ensu...
                        PowerShell      Script                    PSDesiredStateConfiguration    1.1        {GetScript, SetScript, TestScrip...
                        PowerShell      Service                   PSDesiredStateConfiguration    1.1        {Name, BuiltInAccount, Credentia...
                        Composite       ServiceSet                PSDesiredStateConfiguration    1.1        {DependsOn, PsDscRunAsCredential...
                        PowerShell      User                      PSDesiredStateConfiguration    1.1        {UserName, DependsOn, Descriptio...
                        PowerShell      WaitForAll                PSDesiredStateConfiguration    1.1        {NodeName, ResourceName, Depends...
                        PowerShell      WaitForAny                PSDesiredStateConfiguration    1.1        {NodeName, ResourceName, Depends...
                        PowerShell      WaitForSome               PSDesiredStateConfiguration    1.1        {NodeCount, NodeName, ResourceNa...
                        PowerShell      WindowsFeature            PSDesiredStateConfiguration    1.1        {Name, Credential, DependsOn, En...
                        Composite       WindowsFeatureSet         PSDesiredStateConfiguration    1.1        {DependsOn, PsDscRunAsCredential...
                        PowerShell      WindowsOptionalFeature    PSDesiredStateConfiguration    1.1        {Name, DependsOn, Ensure, LogLev...
                        Composite       WindowsOptionalFeatureSet PSDesiredStateConfiguration    1.1        {DependsOn, PsDscRunAsCredential...
                        PowerShell      WindowsPackageCab         PSDesiredStateConfiguration    1.1        {Ensure, Name, SourcePath, Depen...
                        PowerShell      WindowsProcess            PSDesiredStateConfiguration    1.1        {Arguments, Path, Credential, De...
"""
# back to the book

--------Historical Background of DSC
# Manifesto 4th point --> Monad Management Models describes the basic elements that the team delivered in Windows PS v4

# What is DSC?
# You/colleagues spend hours manually configuring Windows servers, for example
# installing and configuring roles and features
# installing and configurin other system software and services
# deploying and maintainig file shares
# managing registry settings and environment variables
# plus many, many other things.

# but need to avoid "configuration drift" but SLAs, licensure requirements, and industry/govt regulations need to be met.
# So DSC fills a need for Windows server administrators.

----------------Competitive Landscape 
# similar to Unix and bash
# wanted to be close to automated systems configuration framework

# two market leaders in systems configuration/automation space are 
# 1) Chef       http://www.chef.io
# 2) Puppet     http://puppetlabs.com

# DSC can be extended to support the autoconfiguration and remediation 







--------Basic Tenets of DSC 
--------DSC Authoring Environment
----------------DSC Production Environment
------------------------Differences between DSC and Group Policy 
--------Configuring the DSC Environment
----------------Loading Up DSC Resources 
----------------DSC Resource Waves 
--------Writing Your First Configuration Script
----------------More About MOF Files 
----------------Customizing the Local Configuration Manager 
----------------Try It Yourself - Creating and Pushing a DSC Configuration
--------A Word on DSC Push Configuration
--------Summary Q&A Workshop

===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Part 7 Scripting with Windows PowerShell
===========================================================================================

===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 19 Introduction to Windows PowerShell Scripting
--------Managing Execution Policy
--------Writing Our First Script: The User Profile
--------Writing a PowerShell Function
--------Adding Programming Logic
--------Running Scripts
--------Pointers to Master PowerShell Scripting
--------Summary Q&A Workshop

===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 20 Making PowerShell Code Portable with Modules
--------Understanding Snap-Ins 
--------Introducing PowerShell Modules
--------Creating Your First PowerShell Script Module 
--------Using Module Manifests
--------Adding Comment-Based Help
--------Finding Modules Easily
--------Summary Q&A Workshop

===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Part 8 Administering Microsoft Enterprise Servers with Windows PowerShell
===========================================================================================        

===========================================================================================        
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 21 Managing Active Directory with Windows PowerShell
        Installing Active Directory
--------Creating Common Active Directory Objects
--------Understanding Various AD Administrative Tasks
--------Summary Q&A Workshop

===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 22 Managing SQL Server with Windows PowerShell
--------Running PowerShell Using SQL Server Tools 
--------Interacting with SQL Server Using PowerShell
--------Automating Common SQL Server DBA Tasks 
--------Summary Q&A Workshop

===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 23 Managing SharePoint Server with Windows PowerShell
--------Understanding the Environment
--------Deploying a Service Application
--------Deploying a Web Application
--------Deploying a Site Collection 
--------Setting Permissions on a Site Collection
--------Reporting on a SharePoint Farm 
--------Summary Q&A Workshop

===========================================================================================
Book1: Windows PowerShell - Sams Teach Yourself Windows PowerShell in 24 hours Timothy Warner 2015
Chapter 24 Managing Microsoft Azure with Windows PowerShell
--------Defining Microsoft Azure 
--------Preparing Your Azure-PowerShell Environment
--------Working with Azure Virtual Machines 
--------Managing Office 365 and SharePoint Online with Azure
--------Summary Q&A Workshop 


===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================


# Book1: Sams Teach Yourself ASP.NET Core in 24 hours - Jeffrey Fritz 2018 

==========================================TOC==============================================
Book1: Sams Teach Yourself ASP.NET Core in 24 hours - Jeffrey Fritz 2018 

Chapter 1 Introduction to ASP.NET Core 
Chapter 2 Setting Up Your Work Environment for ASP.NET Core 
Chapter 3 Exploring the New Project Templates 
Chapter 4 Defining ASP.NET Core Configuration
Chapter 5 Configuring the Service with the Startup Class 
Chapter 6 Configuring Your Application
Chapter 7 Accessing Your Data with Entity Framework Core 
Chapter 8 Introducing the MVC Architecture
Chapter 9 Building Your First Controller 
Chapter 10 Beginning MVC: Writing Your First View 
Chapter 11 Scaffolding User Interfaces 
Chapter 12 Writing Data from a Controller  
Chapter 13 Writing Wev API Methods  
Chapter 14 Introducing Reusuable User Interface Components 
Chapter 15 npm and bower: Client-Side Package Managers
Chapter 16 Introducing Angular 
Chapter 17 Connection Angular to ASP.NET Core
Chapter 18 Routing Angular Requests Around ASP.NET Core 
Chapter 19 Running Angular on the Server 
Chapter 20 Authenticating Your Users 
Chapter 21 Granting Access to Users  
Chapter 22 Deploying to Production 
Chapter 23 Working with Docker Containers 
Chapter 24 Looking to the Future and .NET Standard

===========================================================================================


==========================================TOC Details======================================
Book1: Sams Teach Yourself ASP.NET Core in 24 hours - Jeffrey Fritz 2018 

===========================================================================================
Chapter 1 Introduction to ASP.NET Core 
--------What is ASP.NET 
--------Why Should You Program in ASP.NET 
--------Significant Changes in ASP.NET Core 
--------Assumptions and Definitions in This Book 
--------Introducing the Sample Project 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 2 Setting Up Your Work Environment for ASP.NET Core 
--------Four Versions of Visual Studio: Where Do I Start 
--------Installing Development Tools on Non-Windows Operating Systems
--------Introducing the dotnet Command-Line Tool 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 3 Exploring the New Project Templates 
--------Getting Started with Visual Studio 2017
--------The wwwroot Folder 
--------Getting Started with Visual Studio Code 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 4 Defining ASP.NET Core Configuration
--------Introducing Our Sample Application 
--------Getting Started with Server-Side Configuration 
--------Fundamentals of .NET Application Structure 
--------Managing and Referencing NuGet Packages 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 5 Configuring the Service with the Startup Class 
--------Introducing the Startup Class
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 6 Configuring Your Application
--------Writing Configuration Files 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 7 Accessing Your Data with Entity Framework Core 
--------Getting Started with Data 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 8 Introducing the MVC Architecture
--------Defining the MVC Architecture
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 9 Building Your First Controller 
--------Reviewing the MVC Folder Structure 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 10 Beginning MVC: Writing Your First View 
--------Introducing Razor Templates 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 11 Scaffolding User Interfaces 
--------Introducing Scaffolding in Visual Studio 2017
--------Investigating the Templates 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 12 Writing Data from a Controller  
--------Enhancing Scaffolded Code 
--------Validating Data in Controller Methods 
--------Investigating Controller Interaction Strategies
--------Preventing Unwanted Cross-site Posting 
--------Speeding Up Data Access with Asynchronous Techniques
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 13 Writing Wev API Methods  
--------In the Old Days of ASP.NET ...
--------Creating a New Trip with Web API 
--------Updating a Trip with Web API
--------Deleting a Trip with Web API 
--------Negotiating and Formatting Content
--------Trimming the Fat: An API-Only Application
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 14 Introducing Reusuable User Interface Components 
--------Introducing Tag Helpers
--------Tag Helpers that Ship with ASP.NET Core 
--------Building Other Reusuable Components 
--------Writing Your Own Tag Helper
--------Writing a Constructor
--------Counting the Number of Trips
--------Formatting Your Trips 
--------Using Your New Tag Helper 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 15 npm and bower: Client-Side Package Managers
--------Whar are npm and bower?
--------Getting Started with npm
--------Getting Started with bower 
--------Automating npm and bower 
--------Installing Newer Versions of npm and bower
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 16 Introducing Angular 
--------Getting Started with Angular 
--------Exploring the Default Template Angular Website 
--------Delivering Content to the Browser 
--------Adding Some Real Code 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 17 Connection Angular to ASP.NET Core
--------Connecting the Pieces 
--------Connecting to a Running ASP.NET Core Service 
--------Combining the Projects: Merging Angular and ASP.NET Core 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 18 Routing Angular Requests Around ASP.NET Core 
--------What Is Routing 
--------Generating URLs from ASP.NET Core 
--------Routing in Angular 
--------Merging Projects: The Final Steps 
--------Debugging and Building Your App 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 19 Running Angular on the Server 
--------Introducing Angular Universal 
--------Migrating Your Application to SpaServices
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 20 Authenticating Your Users 
--------Starting a New Application 
--------Configuring Authentication 
--------Adding the Resigistration Feature 
--------Adding the Login and Logout Features
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 21 Granting Access to Users  
--------Defining Roles, Claims, and Policies
--------Adding Claims to Your Users 
--------Adding a Sample Administrator User 
--------Configuring Authorization
--------Defining Security Policies
--------Enforcing Authorization Policies in Content
--------Creating More Complex Policies
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 22 Deploying to Production 
--------What Is This "Production" You Speak Of
--------Hosting ASP.NET Core Behind Another Server
--------Preparing Production Web Space 
--------Deploying Your Application to a Windows Server
--------Shard and Self-Contained Deployments 
--------Deploying Yoru Application to a Linux Server
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 23 Working with Docker Containers 
--------What Is a Container?
--------Why Use Containers
--------Installing Docker 
--------Packaging Your Application
--------Deploying To Azure
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 24 Looking to the Future and .NET Standard
--------What Is .NET Standard
--------Building and Using a .NET Standard Library 
--------Future Updates for ASP.NET Core 
--------Staying Connected with the ASP.NET Core Community
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 
===========================================================================================





==========================================TOC Details - NOTES==============================
Book1: Sams Teach Yourself ASP.NET Core in 24 hours - Jeffrey Fritz 2018 

Chapter 1 Introduction to ASP.NET Core 
--------What is ASP.NET 
# ASP = Active Server Pages framework
# this book focuses on how to build your first web application with ASP.NET Core and run
# it from Azure
# a travel management application and deployed to Azure using Azure App Service
# using modern JavaScript frameworks like Angular 4 with ASP.NET Core

# Evolution of ASP



--------Why Should You Program in ASP.NET 
--------Significant Changes in ASP.NET Core 
--------Assumptions and Definitions in This Book 
--------Introducing the Sample Project 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 2 Setting Up Your Work Environment for ASP.NET Core 
--------Four Versions of Visual Studio: Where Do I Start 
--------Installing Development Tools on Non-Windows Operating Systems
--------Introducing the dotnet Command-Line Tool 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 3 Exploring the New Project Templates 
--------Getting Started with Visual Studio 2017
--------The wwwroot Folder 
--------Getting Started with Visual Studio Code 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 4 Defining ASP.NET Core Configuration
--------Introducing Our Sample Application 
--------Getting Started with Server-Side Configuration 
--------Fundamentals of .NET Application Structure 
--------Managing and Referencing NuGet Packages 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 5 Configuring the Service with the Startup Class 
--------Introducing the Startup Class
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 6 Configuring Your Application
--------Writing Configuration Files 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 7 Accessing Your Data with Entity Framework Core 
--------Getting Started with Data 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 8 Introducing the MVC Architecture
--------Defining the MVC Architecture
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 


Chapter 9 Building Your First Controller 
--------Reviewing the MVC Folder Structure 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 


Chapter 10 Beginning MVC: Writing Your First View 
--------Introducing Razor Templates 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 


Chapter 11 Scaffolding User Interfaces 
--------Introducing Scaffolding in Visual Studio 2017
--------Investigating the Templates 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 


Chapter 12 Writing Data from a Controller  
--------Enhancing Scaffolded Code 
--------Validating Data in Controller Methods 
--------Investigating Controller Interaction Strategies
--------Preventing Unwanted Cross-site Posting 
--------Speeding Up Data Access with Asynchronous Techniques
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 


Chapter 13 Writing Wev API Methods  
--------In the Old Days of ASP.NET ...
--------Creating a New Trip with Web API 
--------Updating a Trip with Web API
--------Deleting a Trip with Web API 
--------Negotiating and Formatting Content
--------Trimming the Fat: An API-Only Application
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 14 Introducing Reusuable User Interface Components 
--------Introducing Tag Helpers
--------Tag Helpers that Ship with ASP.NET Core 
--------Building Other Reusuable Components 
--------Writing Your Own Tag Helper
--------Writing a Constructor
--------Counting the Number of Trips
--------Formatting Your Trips 
--------Using Your New Tag Helper 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 15 npm and bower: Client-Side Package Managers
--------Whar are npm and bower?
--------Getting Started with npm
--------Getting Started with bower 
--------Automating npm and bower 
--------Installing Newer Versions of npm and bower
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 16 Introducing Angular 
--------Getting Started with Angular 
--------Exploring the Default Template Angular Website 
--------Delivering Content to the Browser 
--------Adding Some Real Code 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 17 Connection Angular to ASP.NET Core
--------Connecting the Pieces 
--------Connecting to a Running ASP.NET Core Service 
--------Combining the Projects: Merging Angular and ASP.NET Core 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 18 Routing Angular Requests Around ASP.NET Core 
--------What Is Routing 
--------Generating URLs from ASP.NET Core 
--------Routing in Angular 
--------Merging Projects: The Final Steps 
--------Debugging and Building Your App 
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 19 Running Angular on the Server 
--------Introducing Angular Universal 
--------Migrating Your Application to SpaServices
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 20 Authenticating Your Users 
--------Starting a New Application 
--------Configuring Authentication 
--------Adding the Resigistration Feature 
--------Adding the Login and Logout Features
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 21 Granting Access to Users  
--------Defining Roles, Claims, and Policies
--------Adding Claims to Your Users 
--------Adding a Sample Administrator User 
--------Configuring Authorization
--------Defining Security Policies
--------Enforcing Authorization Policies in Content
--------Creating More Complex Policies
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 22 Deploying to Production 
--------What Is This "Production" You Speak Of
--------Hosting ASP.NET Core Behind Another Server
--------Preparing Production Web Space 
--------Deploying Your Application to a Windows Server
--------Shard and Self-Contained Deployments 
--------Deploying Yoru Application to a Linux Server
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 23 Working with Docker Containers 
--------What Is a Container?
--------Why Use Containers
--------Installing Docker 
--------Packaging Your Application
--------Deploying To Azure
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 

===========================================================================================
Chapter 24 Looking to the Future and .NET Standard
--------What Is .NET Standard
--------Building and Using a .NET Standard Library 
--------Future Updates for ASP.NET Core 
--------Staying Connected with the ASP.NET Core Community
--------Summary 
--------Q&A
--------Workshop 
--------Exercise 
===========================================================================================




===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================

==========================================TOC==============================================
Book3: Learn PowerShell Scripting - in a month of lunches 2018

Part 1 Introduction to Scripting 
Chapter 1 Before You Begin 
Chapter 2 Setting Up Your Scripting Environment
Chapter 3 WWPD: What Would PowerShell Do?
Chapter 4 Review: Parameter Binding and the PowerShell Pipeline 
Chapter 5 Scripting Language Crash Course 
Chapter 6 Many Forms of Scripting (and Which To Use)
Chapter 7 Scripts and Security 


Part 2 Building a PowerShell Script 
Chapter 8 Always Design First 
Chapter 9 Avoiding Bugs: Start with a Command 
Chapter 10 Building a Basic Function and Script Module 
Chapter 11 Going Advanced with Your Function 
Chapter 12 Objects: The Best Kind of Output 
Chapter 13 Using All The Pipelines 
Chapter 14 Simple Help: Making A Comment 
Chapter 15 Dealing With Errors 
Chapter 16 Filling Out a Manifest 


Part 3 Grown-Up Scripting
Chapter 17 Changing Your Brain When It Comes to Scripting 
Chapter 18 Professional-Grade Scripting 
Chapter 19 An Introduction to Source Control With Git 
Chapter 20 Pestering Your Script 
Chapter 21 Signing Your Script 
Chapter 22 Publishing Your Script 


Part 4 Advanced Techniques
Chapter 23 Squashing Bugs 
Chapter 24 Making Script Output Prettier
Chapter 25 Wrapping Up the .NET Framework
Chapter 26 Storing Data - Not in Excel 
Chapter 27 Never the End 

===========================================================================================


==========================================TOC Details======================================
Book3: Learn PowerShell Scripting - in a month of lunches 2018

Part 1 Introduction to Scripting 

Chapter 1 Before You Begin 
--------1.1 What is toolmaking?
--------1.2 Is this book for you?
--------1.3 Here is what you need to have 
----------------PowerShell version 
----------------Administrative privileges 
----------------SQL Server   
----------------Script editor 
--------1.4 How to use this book 
--------1.5 Expectations
--------1.6 How to ask for help 
--------1.7 Summary 


Chapter 2 Setting Up Your Scripting Environment
--------2.1 The operating system 
--------2.2 Windows PowerShell 
--------2.3 Administrative privileges and execution policy 
--------2.4 A script editor 
--------2.5 Setting up a virtual environment
--------2.6 Example code 
--------2.7 SQL Server Express 
--------2.8 Your turn 


Chapter 3 WWPD: What Would PowerShell Do?
--------3.1 Writing single-task tools 
--------3.2 Naming tools 
--------3.3 Naming parameters 
--------3.4 Producing output 
--------3.5 Dont assume 
--------3.6 Avoid innovation 
--------3.7 Summary 


Chapter 4 Review: Parameter Binding and the PowerShell Pipeline 
--------4.1 Visualizing the pipeline 
--------4.2 Its all in the parameters 
--------4.3 Plan A: ByValue 
----------------Introducing Trace-Command 
----------------Tracing ByValue parameter binding
----------------When ByValue fails 
--------4.4 ByPropertyName
----------------Lets trace ByPropertyName
----------------When ByPropertyName fails 
----------------Planning Ahead
--------4.5 Summary


Chapter 5 Scripting Language Crash Course 
--------5.1 Comparisions 
----------------Wildcards 
----------------Collections 
----------------Troubleshooting comparisons 
--------5.2 The If construct 
--------5.3 The ForEach construct 
--------5.4 The Switch construct 
--------5.5 The Do/While construct 
--------5.6 The For construct
--------5.7 Break 
--------5.8 Summary 


Chapter 6 Many Forms of Scripting (and Which To Use)
--------6.1 Tools vs Controllers 
--------6.2 Thinking about tools 
--------6.2 Thinking about controllers 
--------6.4 Comparing tools and controllers 
--------6.5 Some concrete examples 
----------------Emailing users whose passwords are about to expire 
----------------Provisioning new users 
----------------Setting file permissions 
----------------Helping the help desk
--------6.6 Control more 
--------6.7 Your turn


Chapter 7 Scripts and Security 
--------7.1 PowerShell script security goal
--------7.2 Execution Policy 
----------------Execution scope 
----------------Geting your policies 
----------------Setting an execution policy 
--------7.3 PowerShell isnt the default application 
--------7.4 Running scripts 
--------7.5 Recommendations 
--------7.6 Summary 


Part 2 Building a PowerShell Script 

Chapter 8 Always Design First 
--------8.1 Tools do one thing 
--------8.2 Tools are testable 
--------8.3 Tools are flexible 
--------8.4 Tools look native 
--------8.5 For example 
--------8.6 Your Turn
----------------Start here
----------------Your task 
----------------Our take 


Chapter 9 Avoiding Bugs: Start with a Command 
--------9.1 What you need to run  
--------9.2 Breaking it down, and running it right 
--------9.3 Running commands and digging deeper 
--------9.4 Process matters 
--------9.5 Know what you need 
--------9.6 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 10 Building a Basic Function and Script Module 
--------10.1 Starting with a basic function  
----------------Designing the input parameters
----------------Writing the code 
----------------Designing the output 
--------10.2 Creating a script module 
--------10.3 Prereq check 
--------10.4 Running the command 
--------10.5 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 11 Going Advanced with Your Function 
-------- 11.1 About CmdletBinding and common parameters 
----------------Acceptiong pipeline output 
----------------Mandatory-ness 
----------------Parameter validation 
----------------Parameter aliases 
----------------Supporting-Confirm and -WhatIf
--------11.2 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 12 Objects: The Best Kind of Output 
--------12.1 Assembling the information 
--------12.2 Constructing and emitting output 
--------12.3 A quick test 
--------12.4 An object alternative
--------12.5 Enriching objects 
--------12.6 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 13 Using All The Pipelines 
--------13.1 Knowing the six channels 
--------13.2 Adding verbose and warning output 
--------13.3 Doing with with -Verbose 
--------13.4 Information output 
----------------Detailed information example 
--------13.5 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 14 Simple Help: Making A Comment 
--------14.1 Where to put your help
--------14.2 Getting started 
--------14.3 Going further with comment based help
--------14.4 Broken help
--------14.5 Beyond comments
--------14.6 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 15 Dealing With Errors 
--------15.1 Understanding errors and exceptions 
--------15.2 Bad handling 
--------15.3 Two reasons for exception handling 
--------15.4 Handling exceptions in your tool
--------15.5 Capturing the exception 
--------15.6 Handling exceptions for non-commands 
--------15.7 Going further with exception handling 
--------15.8 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 16 Filling Out a Manifest 
--------16.1 Module execution order 
--------16.2 Creating a new manifest 
--------16.3 Examining the manifest
----------------Metadata 
----------------The root module 
----------------Prerequisites
----------------Scripts, types, and formats 
----------------Exporting members 
--------16.4 Your turn 
----------------Start here
----------------Your task 
----------------Our take 



Part 3 Grown-Up Scripting

Chapter 17 Changing Your Brain When It Comes to Scripting 
--------Example 1
----------------The critque 
----------------Our take 
----------------Thinking beyond the literal
--------Example 2
----------------The walkthrough 
----------------Our take
--------11.2 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 18 Professional-Grade Scripting 
--------18.1 Using source control 
--------18.2 Spelling it out 
--------18.3 Commenting your code 
--------18.4 Formatting your code 
--------18.5 Using meaningful non-Hungarian variable names 
--------18.6 Avoiding aliases 
--------18.7 Avoiding awkward pipelines
--------18.8 Providing help
--------18.9 Avoiding Write-Host and Read-Host 
--------18.10 Sticking with single quotes 
--------18.11 Not polluting the global space 
--------18.12 Being flexible 
--------18.13 Being secure 
--------18.14 Striving for elegance 
--------18.15 Summary 


Chapter 19 An Introduction to Source Control With Git 
--------19.1 Why source control? 
--------19.2 What is git?
----------------Installing git 
----------------Git basics 
--------19.3 Repository basics 
----------------Creating a repository 
----------------Staging a change 
----------------Committing a change
----------------Rolling back a change 
----------------Branching and merging 
--------19.4 Using git with VS Code 
--------19.5 Integrating with GitHub 
--------19.6 Summary 


Chapter 20 Pestering Your Script 
--------20.1 The vision  
--------20.2 Problems with manual testing 
--------20.3 Benefits of automated testing 
--------20.4 Introducing Pester 
--------20.5 Coding to be tested 
--------20.6 What do you test?
----------------Integration tests 
----------------Unit tests 
----------------Dont test what is not yours 
--------20.7 Writing a basic Pester test 
----------------Creating a fixture 
----------------Writing the first test 
----------------Creating a mock 
----------------Adding more tests 
----------------Code coverage
--------20.8 Summary 


Chapter 21 Signing Your Script 
--------21.1 Why sign your scripts? 
--------21.2 A word about certificates 
--------21.3 Setting your policy
--------21.4 Code-signing basics 
----------------Getting a code-signing certificate 
----------------Trusting self-signed certificates 
----------------Signing your scripts 
----------------Testing script signatures
--------21.5 Summary 


Chapter 22 Publishing Your Script 
--------22.1 Why publish?
--------22.2 Meet the PowerShell Gallery 
--------23.3 Other publishing targets 
--------22.4 Before you publish
----------------Are you reinventing the wheel?
----------------Updating your manifest 
----------------Getting an API key
--------22.5 Ready, set, publish
----------------Managing revisions 
--------22.6 Publishing scripts 
----------------Using the Microsoft script repository 
----------------Creating ScriptFileInfo 
----------------Publishing the script 
----------------Managing published scripts
--------22.7 Summary


Part 4 Advanced Techniques

Chapter 23 Squashing Bugs 
--------23.1 The three kinds of bugs 
--------23.2 Dealing with syntax bugs 
--------23.3 Dealing with results bugs 
--------23.4 Dealing with logic bugs
----------------Setting breakpoints
----------------Setting watches
----------------So much more 
----------------Dont be lazy
--------13.5 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 24 Making Script Output Prettier
--------24.1 Our starting point 
--------24.2 Creating a default view 
----------------Exploring Microsoft's views '
--------24.3 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 25 Wrapping Up the .NET Framework
--------25.1 Why does PowerShell exist?
--------25.2 A crash course in .NET 
--------25.3 Exploring a class
--------25.4 Making a wrapper
--------25.5 A more practical example
--------25.6 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 26 Storing Data - Not in Excel 
--------26.1 Introducing SQL Server
--------26.2 Setting up everything  
--------26.3 Using your database: creating a table 
--------26.4 Saving data to SQL Server 
--------26.5 Querying data from SQL Server 
--------26.6 Summary 


Chapter 27 Never the End 
--------27.1 Welcome to toolmaking 
--------27.2 Taking your next step 
--------27.3 What is in your future 


===========================================================================================



==========================================TOC Details - NOTES==============================
Book3: Learn PowerShell Scripting - in a month of lunches 2018

Part 1 Introduction to Scripting 

Chapter 1 Before You Begin 
--------1.1 What is toolmaking?
# LEGO analogy
# make small self contained tools that can "snap onto" other tools
# thus makes your code more reusable across more situations, reduces debugging and maintenance overhead

--------1.2 Is this book for you?

--------1.3 Here is what you need to have 
# used PowerShell v 5.1 to write this book. But v3 and later also work fine.
# download WMF (Windows Management Framework)
# Note1 many server applications are picky about which PowerShell version they work with, so installing wrong
# version will break things.
# Note2 each PowerShell version supports only specific versions of Windows.

----------------PowerShell version 
# run $PSVersionTable to see which version you have
PS> $PSVersionTable

# authors wrote this book so PS code is evergreen = meaning it doesnt change from season to season.

----------------Administrative privileges 

----------------SQL Server   
# SQL Server Management Studio downloaded (SSMS)

----------------Script editor 

# VS Code same as Visual Studio 2017?

--------1.4 How to use this book 

--------1.5 Expectations
# Follow book to this book is
The PowerShell and Scripting Toolmaking Book http://bit.ly/PSToolmaking

--------1.6 How to ask for help 
# see PowerShell.org for questions

--------1.7 Summary 


Chapter 2 Setting Up Your Scripting Environment

--------2.1 The operating system 
# the examples here will use WMI and CIM systems 
# WMI = Windows Management Instrumentation
# CIM = Common Information Model

# need Windows 10

--------2.2 Windows PowerShell 
# need PS 5.1 or later
# PS is part of WMF
# WMF = Windows Management Framework

# run $PSVersionTable to see which version you have
PS> $PSVersionTable

# Note Microsoft produces two versions of PowerShell: PowerShell is the full version and is part of WMF.
#      There is also PowerShell Core which runs on Linux, MacOS.

--------2.3 Administrative privileges and execution policy 
# need to run as Administrator
# to check
PS> Get-ExecutionPolicy

--------2.4 A script editor 
--------2.5 Setting up a virtual environment
--------2.6 Example code 
--------2.7 SQL Server Express 
--------2.8 Your turn 


Chapter 3 WWPD: What Would PowerShell Do?
--------3.1 Writing single-task tools 
--------3.2 Naming tools 
--------3.3 Naming parameters 
--------3.4 Producing output 
--------3.5 Dont assume 
--------3.6 Avoid innovation 
--------3.7 Summary 


Chapter 4 Review: Parameter Binding and the PowerShell Pipeline 
--------4.1 Visualizing the pipeline 
--------4.2 Its all in the parameters 
--------4.3 Plan A: ByValue 
----------------Introducing Trace-Command 
----------------Tracing ByValue parameter binding
----------------When ByValue fails 
--------4.4 ByPropertyName
----------------Lets trace ByPropertyName
----------------When ByPropertyName fails 
----------------Planning Ahead
--------4.5 Summary


Chapter 5 Scripting Language Crash Course 
--------5.1 Comparisions 
----------------Wildcards 
----------------Collections 
----------------Troubleshooting comparisons 
--------5.2 The If construct 
--------5.3 The ForEach construct 
--------5.4 The Switch construct 
--------5.5 The Do/While construct 
--------5.6 The For construct
--------5.7 Break 
--------5.8 Summary 


Chapter 6 Many Forms of Scripting (and Which To Use)
--------6.1 Tools vs Controllers 
--------6.2 Thinking about tools 
--------6.2 Thinking about controllers 
--------6.4 Comparing tools and controllers 
--------6.5 Some concrete examples 
----------------Emailing users whose passwords are about to expire 
----------------Provisioning new users 
----------------Setting file permissions 
----------------Helping the help desk
--------6.6 Control more 
--------6.7 Your turn


Chapter 7 Scripts and Security 
--------7.1 PowerShell script security goal
--------7.2 Execution Policy 
----------------Execution scope 
----------------Geting your policies 
----------------Setting an execution policy 
--------7.3 PowerShell isnt the default application 
--------7.4 Running scripts 
--------7.5 Recommendations 
--------7.6 Summary 


Part 2 Building a PowerShell Script 

Chapter 8 Always Design First 
--------8.1 Tools do one thing 
--------8.2 Tools are testable 
--------8.3 Tools are flexible 
--------8.4 Tools look native 
--------8.5 For example 
--------8.6 Your Turn
----------------Start here
----------------Your task 
----------------Our take 


Chapter 9 Avoiding Bugs: Start with a Command 
--------9.1 What you need to run  
--------9.2 Breaking it down, and running it right 
--------9.3 Running commands and digging deeper 
--------9.4 Process matters 
--------9.5 Know what you need 
--------9.6 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 10 Building a Basic Function and Script Module 
--------10.1 Starting with a basic function  
----------------Designing the input parameters
----------------Writing the code 
----------------Designing the output 
--------10.2 Creating a script module 
--------10.3 Prereq check 
--------10.4 Running the command 
--------10.5 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 11 Going Advanced with Your Function 
-------- 11.1 About CmdletBinding and common parameters 
----------------Acceptiong pipeline output 
----------------Mandatory-ness 
----------------Parameter validation 
----------------Parameter aliases 
----------------Supporting-Confirm and -WhatIf
--------11.2 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 12 Objects: The Best Kind of Output 
--------12.1 Assembling the information 
--------12.2 Constructing and emitting output 
--------12.3 A quick test 
--------12.4 An object alternative
--------12.5 Enriching objects 
--------12.6 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 13 Using All The Pipelines 
--------13.1 Knowing the six channels 
--------13.2 Adding verbose and warning output 
--------13.3 Doing with with -Verbose 
--------13.4 Information output 
----------------Detailed information example 
--------13.5 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 14 Simple Help: Making A Comment 
--------14.1 Where to put your help
--------14.2 Getting started 
--------14.3 Going further with comment based help
--------14.4 Broken help
--------14.5 Beyond comments
--------14.6 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 15 Dealing With Errors 
--------15.1 Understanding errors and exceptions 
--------15.2 Bad handling 
--------15.3 Two reasons for exception handling 
--------15.4 Handling exceptions in your tool
--------15.5 Capturing the exception 
--------15.6 Handling exceptions for non-commands 
--------15.7 Going further with exception handling 
--------15.8 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 16 Filling Out a Manifest 
--------16.1 Module execution order 
--------16.2 Creating a new manifest 
--------16.3 Examining the manifest
----------------Metadata 
----------------The root module 
----------------Prerequisites
----------------Scripts, types, and formats 
----------------Exporting members 
--------16.4 Your turn 
----------------Start here
----------------Your task 
----------------Our take 



Part 3 Grown-Up Scripting

Chapter 17 Changing Your Brain When It Comes to Scripting 
--------Example 1
----------------The critque 
----------------Our take 
----------------Thinking beyond the literal
--------Example 2
----------------The walkthrough 
----------------Our take
--------11.2 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 18 Professional-Grade Scripting 
--------18.1 Using source control 
--------18.2 Spelling it out 
--------18.3 Commenting your code 
--------18.4 Formatting your code 
--------18.5 Using meaningful non-Hungarian variable names 
--------18.6 Avoiding aliases 
--------18.7 Avoiding awkward pipelines
--------18.8 Providing help
--------18.9 Avoiding Write-Host and Read-Host 
--------18.10 Sticking with single quotes 
--------18.11 Not polluting the global space 
--------18.12 Being flexible 
--------18.13 Being secure 
--------18.14 Striving for elegance 
--------18.15 Summary 


Chapter 19 An Introduction to Source Control With Git 
--------19.1 Why source control? 
--------19.2 What is git?
----------------Installing git 
----------------Git basics 
--------19.3 Repository basics 
----------------Creating a repository 
----------------Staging a change 
----------------Committing a change
----------------Rolling back a change 
----------------Branching and merging 
--------19.4 Using git with VS Code 
--------19.5 Integrating with GitHub 
--------19.6 Summary 


Chapter 20 Pestering Your Script 
--------20.1 The vision  
--------20.2 Problems with manual testing 
--------20.3 Benefits of automated testing 
--------20.4 Introducing Pester 
--------20.5 Coding to be tested 
--------20.6 What do you test?
----------------Integration tests 
----------------Unit tests 
----------------Dont test what is not yours 
--------20.7 Writing a basic Pester test 
----------------Creating a fixture 
----------------Writing the first test 
----------------Creating a mock 
----------------Adding more tests 
----------------Code coverage
--------20.8 Summary 


Chapter 21 Signing Your Script 
--------21.1 Why sign your scripts? 
--------21.2 A word about certificates 
--------21.3 Setting your policy
--------21.4 Code-signing basics 
----------------Getting a code-signing certificate 
----------------Trusting self-signed certificates 
----------------Signing your scripts 
----------------Testing script signatures
--------21.5 Summary 


Chapter 22 Publishing Your Script 
--------22.1 Why publish?
--------22.2 Meet the PowerShell Gallery 
--------23.3 Other publishing targets 
--------22.4 Before you publish
----------------Are you reinventing the wheel?
----------------Updating your manifest 
----------------Getting an API key
--------22.5 Ready, set, publish
----------------Managing revisions 
--------22.6 Publishing scripts 
----------------Using the Microsoft script repository 
----------------Creating ScriptFileInfo 
----------------Publishing the script 
----------------Managing published scripts
--------22.7 Summary


Part 4 Advanced Techniques

Chapter 23 Squashing Bugs 
--------23.1 The three kinds of bugs 
--------23.2 Dealing with syntax bugs 
--------23.3 Dealing with results bugs 
--------23.4 Dealing with logic bugs
----------------Setting breakpoints
----------------Setting watches
----------------So much more 
----------------Dont be lazy
--------13.5 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 24 Making Script Output Prettier
--------24.1 Our starting point 
--------24.2 Creating a default view 
----------------Exploring Microsoft's views '
--------24.3 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 25 Wrapping Up the .NET Framework
--------25.1 Why does PowerShell exist?
--------25.2 A crash course in .NET 
--------25.3 Exploring a class
--------25.4 Making a wrapper
--------25.5 A more practical example
--------25.6 Your turn 
----------------Start here
----------------Your task 
----------------Our take 


Chapter 26 Storing Data - Not in Excel 
--------26.1 Introducing SQL Server
--------26.2 Setting up everything  
--------26.3 Using your database: creating a table 
--------26.4 Saving data to SQL Server 
--------26.5 Querying data from SQL Server 
--------26.6 Summary 


Chapter 27 Never the End 
--------27.1 Welcome to toolmaking 
--------27.2 Taking your next step 
--------27.3 What is in your future 


===========================================================================================





===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================



==========================================TOC==============================================
Book4: Windows PowerShell In Action - Manning Books Characters 2018

Chapter 1 Welcome to PowerShell
Chapter 2 Working with types 
Chapter 3 Operators and expressions 
Chapter 4 Advanced operators and variables 
Chapter 5 Flow control in scripts 
Chapter 6 PowerShell functions 
Chapter 7 Advanced functions and scripts 
Chapter 8 Using and authoring modules
Chapter 9 Module manifests and metadata
Chapter 10 Metaprogramming with scriptblocks and dynamic code
Chapter 11 PowerShell remoting  
Chapter 12 PowerShell workflows 
Chapter 13 PowerShell jobs 
Chapter 14 Errors and exceptions 
Chapter 15 Debugging 
Chapter 16 Working with providers, files, and CIM 
Chapter 17 Working with .NET and events 
Chapter 18 Desired State Configuration
Chapter 19 Classes in PowerShell
Chapter 20 The PowerShell and runspace APIs

===========================================================================================



==========================================TOC Details - NOTES==============================
Book4: Windows PowerShell In Action - Manning Books Characters 2018

Chapter 1 Welcome to PowerShell
--------1.1 What is PowerShell
--------1.2 PowerShell example code 
--------1.3 Core concepts 
--------1.4 Parsing the PowerShell langauge 
--------1.5 How the pipeline works 
--------1.6 Formatting and output
--------1.7 Summary 


Chapter 2 Working with types 
--------2.1 Type management 
--------2.2 Basic types and literals 
--------2.3 Collections: dictionaries and hashtables 
--------2.4 Collections: arrays and sequences 
--------2.5 Types literals 
--------2.6 Type conversions 
--------2.7 Summary


Chapter 3 Operators and expressions 
--------3.1 Arithmetic operators 
--------3.2 Assignment oeprators
--------3.3 Comparison operators 
--------3.4 Pattern matching and text manipulation 
--------3.5 Logical and bitwise operators 
--------3.6 Where() and ForEach() methods 
--------3.7 Summary


Chapter 4 Advanced operators and variables 
--------4.1 Operators for working with types 
--------4.2 Unary operators 
--------4.3 Grouping and subexpressions
--------4.4 Array operators 
--------4.5 Property and method operators 
--------4.6 Format operator 
--------4.7 Redirection and redirection operators 
--------4.8 Working with variables 
--------4.9 Summary


Chapter 5 Flow control in scripts 
--------5.1 Conditional statement
--------5.2 Looping statements 
--------5.3 Labels, break, and continue 
--------5.3 switch statement 
--------5.5 Flow control using cmdlets 
--------5.6 Statements as values 
--------5.7 A word about performance 
--------5.8 Summary 


Chapter 6 PowerShell functions 
--------6.1 Fundamentals of PowerShell functions 
--------6.2 Declaring formal parameters for a function
--------6.3 Returning values from functions 
--------6.4 Using simple functions in a pipeline
--------6.5 Managing function definitions in a session 
--------6.6 Variable scoping in functions 
--------6.7 Summary 


Chapter 7 Advanced functions and scripts 
--------7.1 PowerShell scripts 
--------7.2 Writing advanced functions and scripts  
--------7.3 Dynamic parameters and dynamicParam 
--------7.4 Cmdlet default parameter values 
--------7.5 Documenting functions and scripts  
--------7.6 Summary 


Chapter 8 Using and authoring modules
--------8.1 Role of a module system 
--------8.2 Module basics 
--------8.3 Working with modules 
--------8.4 Writing script modules 
--------8.5 Binary modules 
--------8.6 Summary 


Chapter 9 Module manifests and metadata
--------9.1 Module folder structure 
--------9.2 Module manifest structure
--------9.3 Production manifest elements 
--------9.4 Construction manifest elements
--------9.5 Content manifest elements
--------9.6 Advanced module operations 
--------9.7 Publishing a module to a PowerShell Gallery
--------9.8 Summary 

Chapter 10 Metaprogramming with scriptblocks and dynamic code
--------10.1 Scriptblock basics 
--------10.2 Building and manipulating objects 
--------10.3 Using the Select-Object cmdlet 
--------10.4 Dynamic modules 
--------10.5 Steppable pipelines 
--------10.6 Closer look at the type-system plumbing
--------10.7 Extending the PowerShell language 
--------10.8 Building script code at runtime
--------10.9 Compiling code with Add-Type
--------10.10 Summary


Chapter 11 PowerShell remoting  
--------11.1 PowerShell remoting overview 
--------11.2 Applying PowerShell remoting
--------11.3 PowerShell remoting sessions and persistent connections 
--------11.4 Implicit remoting 
--------11.5 Considerations when running commands remotely
--------11.6 Building custom remoting services 
--------11.7 PowerShell Direct 
--------11.8 Summary

Chapter 12 PowerShell workflows 
--------12.1 Workflow overview
--------12.2 Workflow keywords 
--------12.3 Using workflow effectively 
--------12.4 Workflow cmdlets
--------12.5 Summary


Chapter 13 PowerShell jobs 
--------13.1 Background jobs in PowerShell
--------13.2 Workflows as jobs 
--------13.3 Scheduled jobs 
--------13.4 Summary 


Chapter 14 Errors and exceptions 
--------14.1 Error handling 
--------14.2 Dealing with errors that terminate execution 
--------14.3 PowerShell and the event log 
--------14.4 Summary


Chapter 15 Debugging 
--------15.1 Script instrumentation 
--------15.2 Capturing session output 
--------15.3 PowerShell script debugging features 
--------15.4 Command-line debugging 
--------15.5 Beyond scripts  
--------15.6 Summary


Chapter 16 Working with providers, files, and CIM 
--------16.1 PowerShell providers 
--------16.2 Files, text, and XML 
--------16.3 Accessing COM objects 
--------16.4 Using CIM 
--------16.5 Summary 


Chapter 17 Working with .NET and events 
--------17.1 .NET and PowerShell
--------17.2 Real-time events 
--------17.3 Summary 


Chapter 18 Desired State Configuration
--------18.1 DSC model and architecture 
--------18.2 Push mode to a single node 
--------18.3 Pushing to multiple nodes
--------18.4 DSC in pull mode 
--------18.5 Configuring the Local Configuration Manager 
--------18.6 Partial configurations
--------18.7 Summary


Chapter 19 Classes in PowerShell
--------19.1 Writing classes in PowerShell
--------19.2 Methods in PowerShell classes 
--------19.3 Extending existing classes 
--------19.4 Classes, modules, using, and namespaces 
--------19.5 Writing class-based DSC resources
--------19.6 Summary


Chapter 20 The PowerShell and runspace APIs
--------20.1 PowerShell API Basics 
--------20.2 Runspaces and the PowerShell API  
--------20.3 Runspace pools
--------20.4 Out-of-process runspaces 
--------20.5 Remote runspaces
--------20.6 Managing runspaces
--------20.7 Summary

===========================================================================================



===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================




==========================================TOC==============================================
Book5: Windows PowerShell 3.0 Step By Step 2013

Chapter 1 Overview of Windows PowerShell 3.0
Chapter 2 Using Windows PowerShell Cmdlets 
Chapter 3 Understanding and Using PowerShell Providers 
Chapter 4 Using PowerShell Remoting and Jobs 
Chapter 5 Using PowerShell Scripts 
Chapter 6 Working with Functions 
Chapter 7 Creating Advanced Funtions and Modules  
Chapter 8 Using the Windows PowerShell ISE 
Chapter 9 Working with Windows PowerShell Profiles  
Chapter 10 Using WMI 
Chapter 11 Quering WMI 
Chapter 12 Remoting WMI 
Chapter 13 Calling WMI Methods on WMI Classes 
Chapter 14 Using the CIM Cmdlets 
Chapter 15 Working with Active Directory
Chapter 16 Working with the AD DS Module
Chapter 17 Deploying Active Directory with Windows Server 2012 
Chapter 18 Debugging Scripts 
Chapter 19 Handling Errors 
Chapter 20 Managing Exchange Server 
Appendix A Windows PowerShell Core Cmdlets 
Appendix B Windows PowerShell Module Coverage 
Appendix C Windows PowerShell Cmdlet Naming 
Appendix D Windows PowerShell FAQ 
Appendix E Useful WMI Classes
Appendix F Basic Troubleshooting Tips 
Appendix G General PowerShell Scripting Guidelines


===========================================================================================



==========================================TOC Details - NOTES==============================
Book5: Windows PowerShell 3.0 Step By Step 2013

Chapter 1 Overview of Windows PowerShell 3.0
Chapter 2 Using Windows PowerShell Cmdlets 
Chapter 3 Understanding and Using PowerShell Providers 
Chapter 4 Using PowerShell Remoting and Jobs 
Chapter 5 Using PowerShell Scripts 
Chapter 6 Working with Functions 
Chapter 7 Creating Advanced Funtions and Modules  
Chapter 8 Using the Windows PowerShell ISE 
Chapter 9 Working with Windows PowerShell Profiles  
Chapter 10 Using WMI 
Chapter 11 Quering WMI 
Chapter 12 Remoting WMI 
Chapter 13 Calling WMI Methods on WMI Classes 
Chapter 14 Using the CIM Cmdlets 
Chapter 15 Working with Active Directory
Chapter 16 Working with the AD DS Module
Chapter 17 Deploying Active Directory with Windows Server 2012 
Chapter 18 Debugging Scripts 
Chapter 19 Handling Errors 
Chapter 20 Managing Exchange Server 
Appendix A Windows PowerShell Core Cmdlets 
Appendix B Windows PowerShell Module Coverage 
Appendix C Windows PowerShell Cmdlet Naming 
Appendix D Windows PowerShell FAQ 
Appendix E Useful WMI Classes
Appendix F Basic Troubleshooting Tips 
Appendix G General PowerShell Scripting Guidelines

===========================================================================================



===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================




==========================================TOC==============================================
Book6: Automating Active Directory Administration with Windows PowerShell 2.0 (2011)

Part 1 Administring Service Directory 
Chapter 1 Using PowerShell with Active Directory 
Chapter 2 Managing Domains and Forests
Chapter 3 Managing Sites and Replication 
Chapter 4 Managing Domain Controllers 

Part 2 Managing Active Directory Data 
Chapter 5 Configuring Active Directory Dependencies
Chapter 6 Administering User and Group Accounts
Chapter 7 Managing Conputer Accounts, Objects, and Organizational Units 
Chapter 8 Managing Group Policies 

Part 3 Protecting Your Investment in Active Directory 
Chapter 9 Automating Active Directory Security
Chapter 10 Backing Up Data and Recovering from Disasters
Chapter 11 Monitoring Health and Performance 
===========================================================================================


==========================================TOC Details======================================
Book6: Automating Active Directory Administration with Windows PowerShell 2.0 (2011)

Part 1 Administring Service Directory 

Chapter 1 Using PowerShell with Active Directory 
--------Understand the Basics of PowerShell 
----------------Use the Shell 
----------------Use the Scripting Environment 
----------------Understand Profiles 
----------------Work with Cmdlets 
----------------Script Administration Tasks 
--------Understand How PowerShell and Active Directory Work Together 
----------------Interact with Active Directory Using PS 
----------------Prepare Your Environment for the Active Directory Module 

Chapter 2 Managing Domains and Forests # high level containers
--------Managing AD Domains 
----------------Add and Remove Active Directory Domains 
----------------Managine Domain Settings 
--------Manage Active Directory Trusts 
----------------Creat and Remove Active Directory Trusts 
----------------Managine Active Directory Trusts 

Chapter 3 Managing Sites and Replication 
--------Manage the Site Topology 
----------------Edit Sites, Site Links, and Subnets 
----------------Managine Site Settings 
--------Manage Replication 
----------------View the State of Replication 
----------------Tune Replication Settings 

Chapter 4 Managing Domain Controllers 
--------Manage How the Active Directory Service is Provided 
----------------Install Active Directory on the Domain Controller 
----------------Work with the FSMO Roles 
----------------Manage the Global Catalog Settings 
--------Manage Server-Specific Settings 
----------------Manage Domain Controller Settings 
----------------Manage the Active Directory Database 

Part 2 Managing Active Directory Data 

Chapter 5 Configuring Active Directory Dependencies
--------Configure DNS 
----------------Configure DNS Server Settings 
----------------Manage the DNS Server 
----------------Configure Active Directory DNS Records 
--------Manage Domain Time 
----------------View Time Service Information 
----------------Configure the Time Service 


Chapter 6 Administering User and Group Accounts
--------Manage User Accounts 
----------------Add and Remove Users 
----------------Maintain User Passwords 
----------------Manage User Access 
----------------Manage Account Information
--------Manage Groups 
----------------Add and Remove Groups 
----------------Manage Group Settings 
----------------Manage Group Membership 


Chapter 7 Managing Conputer Accounts, Objects, and Organizational Units 
--------Manage Objects 
----------------Create and Edit Objects 
----------------Work with Service Principle Names
--------Manage Computer Accounts 
----------------Create and Modify Computer Accounts 
----------------Manage Computers 
--------Manage Organizational Units 
----------------Build Organizational Unit Structures 
----------------Modify Organizational Unit Objects 


Chapter 8 Managing Group Policies 
--------Manage Group Policy Settings 
----------------Create and Modify Policies 
----------------Use Advanced GPO Operations 
--------Manage Group Policy Application 
----------------Apply Group Policies 
----------------View Existing Policies 


Part 3 Protecting Your Investment in Active Directory 

Chapter 9 Automating Active Directory Security
--------Secure the Forest 
----------------Automate Directory Permissions 
----------------Manage Passwords 
--------Mange BitLocker 
----------------Manage BitLocker Settings 
----------------Manage BitLocker Recovery Passwords 


Chapter 10 Backing Up Data and Recovering from Disasters
--------Back Up Active Directory Data 
----------------Back Up the Directory Database 
----------------Back Up Other Essential Data 
----------------Make Backups Easier 
--------Restore Data 
----------------Restore Directory Data 
----------------Restore Other Essential Data 


Chapter 11 Monitoring Health and Performance 
--------Keep Active Directory Healthy
----------------Enable Logging 
----------------Check the Health of Domain Controllers 
--------Track Domain Controller Performance 
----------------Monitor Active Directory Performance 
----------------Monitor Domain Controller Hardware 




===========================================================================================






===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================
===========================================================================================




==========================================TOC==============================================
Book ?: Dependency Injection in .NET - Mark Seemann 2012 

Part 1 Putting Dependency Injection On The Map 
Chapter 1 Dependency Injection tasting menu 
Chapter 2 Comprehensive Example 
Chapter 3 DI Containers

Part 2 DI Catalog 
Chapter 4 DI patterns 
Chapter 5 DI anti-pattern
Chapter 6 DI refactorings 

Part 3 DIY DI 
Chapter 7 Object Composition 
Chapter 8 Object Lifetime 
Chapter 9 Interception 

Part 4 DI Containers 
Chapter 10 Castle Windsor 
Chapter 11 StructureMap 
Chapter 12 Spring.NET 
Chapter 13 Autofac 
Chapter 14 Unity 
Chapter 15 MEF 
===========================================================================================



==========================================TOC Details======================================
Book ?: Dependency Injection in .NET - Mark Seemann 2012 

Part 1 Putting Dependency Injection On The Map 

Chapter 1 Dependency Injection tasting menu 
--------1.1 Writing maintable code 
----------------Unlearning DI 
----------------Understanding the purpose of DI 
--------1.2 Hello DI 
----------------Hello DI code 
----------------Benefits of DI 
--------1.3 What to inject and what not to inject 
----------------Seams 
----------------Stable Dependencies
----------------Volatile Dependencies
--------1.4 DI scope 
----------------Object Composition 
----------------Object Lifetime 
----------------Interception 
----------------DI in three dimensions 
--------1.5 Summary 


Chapter 2 Comprehensive Example 
--------2.1 Doing it wrong 
--------2.2 Doing it right 
--------2.3 Expanding the sample application 
--------2.4 Summary


Chapter 3 DI Containers
--------3.1 Introducing DI Containers
--------3.2 Configuring DI Containers
--------3.3 DI Container patterns 
--------3.4 DI Container landscape 
--------3.5 Summary 


Part 2 DI Catalog 

Chapter 4 DI patterns 
--------4.1 Constructor Injection 
--------4.2 Property Injection
--------4.3 Method Injection 
--------4.4 Ambient Context 
--------4.5 Summary 


Chapter 5 DI anti-pattern
--------5.1 Control Freak
--------5.2 Bastard Injection 
--------5.3 Constrained Construction
--------5.4 Service Locator 
--------5.5 Summary 


Chapter 6 DI refactorings 
--------6.1 Mapping runtime values to Abstraction 
--------6.2 Working with short-lived Dependencies
--------6.3 Resovling cyclic Dependencies
--------6.4 Dealing with Constructor Over-injection
--------6.5 Monitoring coupling
--------6.6 Summary 


Part 3 DIY DI 

Chapter 7 Object Composition 
--------7.1 Composing console applications 
--------7.2 Composing ASP.NET MVC applications
--------7.3 Composing WCF applications 
--------7.4 Composing WPF applications
--------7.5 Composing ASP.NET applications
--------7.6 Composign PowerShell cmdlets
--------7.7 Summary 


Chapter 8 Object Lifetime 
--------8.1 Managing Dependency Lifetime 
--------8.2 Working with disposable Dependencies
--------8.3 Lifestyle catalog 
--------8.4 Summary 


Chapter 9 Interception 
--------9.1 Introducing Interception 
--------9.2 Implementing Cross-Cutting Concerns 
--------9.3 Declaring aspects 
--------9.4 Summary


Part 4 DI Containers 

Chapter 10 Castle Windsor 

Chapter 11 StructureMap 

Chapter 12 Spring.NET 

Chapter 13 Autofac 

Chapter 14 Unity 

Chapter 15 MEF 

===========================================================================================



==========================================TOC Details - NOTES==============================
Book ?: Dependency Injection in .NET - Mark Seemann 2012  

===========================================================================================






<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<
ATUL <<<<<<<<<<<<<<<<
pg 304<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<
